// Dafny program Dafny-compiler-rust.dfy compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq();
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq() {
      return new BinOp_Eq();
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public BinOp_Eq() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> __accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in0 = (i).Drop(BigInteger.One);
          i = _in0;
          goto TAIL_CALL_START;
        } else {
          __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in1 = (i).Drop(BigInteger.One);
          i = _in1;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> body;
      Dafny.ISequence<Dafny.Rune> _out0;
      _out0 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      body = _out0;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger i;
      i = BigInteger.Zero;
      while ((i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source0 = (body).Select(i);
        if (_source0.is_Module) {
          DAST._IModule __mcc_h0 = _source0.dtor_Module_a0;
          DAST._IModule m = __mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out1;
          _out1 = DCOMP.COMP.GenModule(m, containingPath);
          generated = _out1;
        } else if (_source0.is_Class) {
          DAST._IClass __mcc_h1 = _source0.dtor_Class_a0;
          DAST._IClass c = __mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = DCOMP.COMP.GenClass(c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name)));
          generated = _out2;
        } else if (_source0.is_Trait) {
          DAST._ITrait __mcc_h2 = _source0.dtor_Trait_a0;
          DAST._ITrait t = __mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = DCOMP.COMP.GenTrait(t, containingPath);
          generated = _out3;
        } else if (_source0.is_Newtype) {
          DAST._INewtype _10___mcc_h3 = _source0.dtor_Newtype_a0;
          DAST._INewtype _11_n = _10___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out4;
          _out4 = DCOMP.COMP.GenNewtype(_11_n);
          generated = _out4;
        } else {
          DAST._IDatatype _12___mcc_h4 = _source0.dtor_Datatype_a0;
          DAST._IDatatype _13_d = _12___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out5;
          _out5 = DCOMP.COMP.GenDatatype(_13_d);
          generated = _out5;
        }
        if ((i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, generated);
        i = (i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _14_tpI;
      _14_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_14_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _15_tp;
          _15_tp = (@params).Select(_14_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_15_tp));
          Dafny.ISequence<Dafny.Rune> _16_genTp;
          Dafny.ISequence<Dafny.Rune> _out6;
          _out6 = DCOMP.COMP.GenType(_15_tp, false, false);
          _16_genTp = _out6;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _16_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _17_baseConstraints;
          _17_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _16_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _16_genTp), _17_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _16_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _16_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _16_genTp), _17_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _16_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _16_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _16_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _14_tpI = (_14_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _18_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _19_typeParams;
      Dafny.ISequence<Dafny.Rune> _20_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _21_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _22_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _23_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _24_erasedParams;
      Dafny.ISet<DAST._IType> _out7;
      Dafny.ISequence<Dafny.Rune> _out8;
      Dafny.ISequence<Dafny.Rune> _out9;
      Dafny.ISequence<Dafny.Rune> _out10;
      Dafny.ISequence<Dafny.Rune> _out11;
      Dafny.ISequence<Dafny.Rune> _out12;
      Dafny.ISequence<Dafny.Rune> _out13;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out7, out _out8, out _out9, out _out10, out _out11, out _out12, out _out13);
      _18_typeParamsSet = _out7;
      _19_typeParams = _out8;
      _20_constrainedTypeParams = _out9;
      _21_whereConstraints = _out10;
      _22_constrainedEraseParams = _out11;
      _23_unerasedParams = _out12;
      _24_erasedParams = _out13;
      Dafny.ISequence<Dafny.Rune> _25_fields;
      _25_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _26_fieldInits;
      _26_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _27_fieldI;
      _27_fieldI = BigInteger.Zero;
      while ((_27_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _28_field;
        _28_field = ((c).dtor_fields).Select(_27_fieldI);
        Dafny.ISequence<Dafny.Rune> _29_fieldType;
        Dafny.ISequence<Dafny.Rune> _out14;
        _out14 = DCOMP.COMP.GenType(((_28_field).dtor_formal).dtor_typ, false, false);
        _29_fieldType = _out14;
        _25_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_25_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_28_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _29_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source1 = (_28_field).dtor_defaultValue;
        if (_source1.is_Some) {
          DAST._IExpression _30___mcc_h0 = _source1.dtor_Some_a0;
          DAST._IExpression _31_e = _30___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _32_eStr;
            bool _33___v1;
            bool _34___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _35___v3;
            Dafny.ISequence<Dafny.Rune> _out15;
            bool _out16;
            bool _out17;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out18;
            DCOMP.COMP.GenExpr(_31_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out15, out _out16, out _out17, out _out18);
            _32_eStr = _out15;
            _33___v1 = _out16;
            _34___v2 = _out17;
            _35___v3 = _out18;
            _26_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_26_fieldInits, DCOMP.__default.escapeIdent(((_28_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _32_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _26_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_26_fieldInits, DCOMP.__default.escapeIdent(((_28_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _27_fieldI = (_27_fieldI) + (BigInteger.One);
      }
      BigInteger _36_typeParamI;
      _36_typeParamI = BigInteger.Zero;
      while ((_36_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _37_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out19;
        _out19 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_36_typeParamI), false, false);
        _37_tpeGen = _out19;
        _25_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_25_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_36_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _37_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _26_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_26_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_36_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _36_typeParamI = (_36_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _19_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _25_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _38_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _39_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out20;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out21;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _18_typeParamsSet, out _out20, out _out21);
      _38_implBody = _out20;
      _39_traitBodies = _out21;
      _38_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _26_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _38_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _20_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _19_typeParams), _21_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _38_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _40_i;
        _40_i = BigInteger.Zero;
        while ((_40_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _41_superClass;
          _41_superClass = ((c).dtor_superClasses).Select(_40_i);
          DAST._IType _source2 = _41_superClass;
          if (_source2.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _42___mcc_h1 = _source2.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _43___mcc_h2 = _source2.dtor_typeArgs;
            DAST._IResolvedType _44___mcc_h3 = _source2.dtor_resolved;
            DAST._IResolvedType _source3 = _44___mcc_h3;
            if (_source3.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _45___mcc_h7 = _source3.dtor_path;
            } else if (_source3.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _46___mcc_h9 = _source3.dtor_path;
              Dafny.ISequence<DAST._IType> _47_typeArgs = _43___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _48_traitPath = _42___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _49_pathStr;
                Dafny.ISequence<Dafny.Rune> _out22;
                _out22 = DCOMP.COMP.GenPath(_48_traitPath);
                _49_pathStr = _out22;
                Dafny.ISequence<Dafny.Rune> _50_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out23;
                _out23 = DCOMP.COMP.GenTypeArgs(_47_typeArgs, false, false);
                _50_typeArgs = _out23;
                Dafny.ISequence<Dafny.Rune> _51_body;
                _51_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_39_traitBodies).Contains(_48_traitPath)) {
                  _51_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_39_traitBodies, _48_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _52_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out24;
                _out24 = DCOMP.COMP.GenPath(path);
                _52_genSelfPath = _out24;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _20_constrainedTypeParams), _49_pathStr), _50_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _52_genSelfPath), _19_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _21_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _51_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _53___mcc_h11 = _source3.dtor_Newtype_a0;
            }
          } else if (_source2.is_Nullable) {
            DAST._IType _54___mcc_h13 = _source2.dtor_Nullable_a0;
          } else if (_source2.is_Tuple) {
            Dafny.ISequence<DAST._IType> _55___mcc_h15 = _source2.dtor_Tuple_a0;
          } else if (_source2.is_Array) {
            DAST._IType _56___mcc_h17 = _source2.dtor_element;
            BigInteger _57___mcc_h18 = _source2.dtor_dims;
          } else if (_source2.is_Seq) {
            DAST._IType _58___mcc_h21 = _source2.dtor_element;
          } else if (_source2.is_Set) {
            DAST._IType _59___mcc_h23 = _source2.dtor_element;
          } else if (_source2.is_Multiset) {
            DAST._IType _60___mcc_h25 = _source2.dtor_element;
          } else if (_source2.is_Map) {
            DAST._IType _61___mcc_h27 = _source2.dtor_key;
            DAST._IType _62___mcc_h28 = _source2.dtor_value;
          } else if (_source2.is_Arrow) {
            Dafny.ISequence<DAST._IType> _63___mcc_h31 = _source2.dtor_args;
            DAST._IType _64___mcc_h32 = _source2.dtor_result;
          } else if (_source2.is_Primitive) {
            DAST._IPrimitive _65___mcc_h35 = _source2.dtor_Primitive_a0;
          } else if (_source2.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _66___mcc_h37 = _source2.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _67___mcc_h39 = _source2.dtor_TypeArg_a0;
          }
          _40_i = (_40_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _68_defaultImpl;
      _68_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _20_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _19_typeParams), _21_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _68_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_68_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _68_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_68_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _68_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_68_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _68_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_68_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _69_printImpl;
      _69_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _20_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _19_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _69_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_69_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _70_ptrPartialEqImpl;
      _70_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _19_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _19_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _70_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_70_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _70_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_70_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _70_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_70_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _71_identEraseImpls;
      _71_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _20_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _19_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _24_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _71_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_71_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _22_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _19_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _68_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _69_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _70_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _71_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _72_typeParamsSet;
      _72_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _73_typeParams;
      _73_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _74_tpI;
      _74_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _73_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_74_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _75_tp;
          _75_tp = ((t).dtor_typeParams).Select(_74_tpI);
          _72_typeParamsSet = Dafny.Set<DAST._IType>.Union(_72_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_75_tp));
          Dafny.ISequence<Dafny.Rune> _76_genTp;
          Dafny.ISequence<Dafny.Rune> _out25;
          _out25 = DCOMP.COMP.GenType(_75_tp, false, false);
          _76_genTp = _out25;
          _73_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_73_typeParams, _76_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _74_tpI = (_74_tpI) + (BigInteger.One);
        }
        _73_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_73_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _77_fullPath;
      _77_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _78_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _79___v6;
      Dafny.ISequence<Dafny.Rune> _out26;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out27;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_77_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_77_fullPath)), _72_typeParamsSet, out _out26, out _out27);
      _78_implBody = _out26;
      _79___v6 = _out27;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _73_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _78_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _80_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _81_typeParams;
      Dafny.ISequence<Dafny.Rune> _82_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _83_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _84___v7;
      Dafny.ISequence<Dafny.Rune> _85___v8;
      Dafny.ISequence<Dafny.Rune> _86___v9;
      Dafny.ISet<DAST._IType> _out28;
      Dafny.ISequence<Dafny.Rune> _out29;
      Dafny.ISequence<Dafny.Rune> _out30;
      Dafny.ISequence<Dafny.Rune> _out31;
      Dafny.ISequence<Dafny.Rune> _out32;
      Dafny.ISequence<Dafny.Rune> _out33;
      Dafny.ISequence<Dafny.Rune> _out34;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out28, out _out29, out _out30, out _out31, out _out32, out _out33, out _out34);
      _80_typeParamsSet = _out28;
      _81_typeParams = _out29;
      _82_constrainedTypeParams = _out30;
      _83_whereConstraints = _out31;
      _84___v7 = _out32;
      _85___v8 = _out33;
      _86___v9 = _out34;
      Dafny.ISequence<Dafny.Rune> _87_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out35;
      _out35 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _87_underlyingType = _out35;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _81_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _87_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _82_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _81_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _87_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _82_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _87_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _81_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _82_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _81_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _81_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _82_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _81_typeParams), _83_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source4 = (c).dtor_witnessExpr;
      if (_source4.is_Some) {
        DAST._IExpression _88___mcc_h0 = _source4.dtor_Some_a0;
        DAST._IExpression _89_e = _88___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _90_eStr;
          bool _91___v10;
          bool _92___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _93___v12;
          Dafny.ISequence<Dafny.Rune> _out36;
          bool _out37;
          bool _out38;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out39;
          DCOMP.COMP.GenExpr(_89_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out36, out _out37, out _out38, out _out39);
          _90_eStr = _out36;
          _91___v10 = _out37;
          _92___v11 = _out38;
          _93___v12 = _out39;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _90_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _82_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _81_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _82_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _81_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _87_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _94_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _95_typeParams;
      Dafny.ISequence<Dafny.Rune> _96_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _97_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _98_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _99_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _100_erasedParams;
      Dafny.ISet<DAST._IType> _out40;
      Dafny.ISequence<Dafny.Rune> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      Dafny.ISequence<Dafny.Rune> _out43;
      Dafny.ISequence<Dafny.Rune> _out44;
      Dafny.ISequence<Dafny.Rune> _out45;
      Dafny.ISequence<Dafny.Rune> _out46;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out40, out _out41, out _out42, out _out43, out _out44, out _out45, out _out46);
      _94_typeParamsSet = _out40;
      _95_typeParams = _out41;
      _96_constrainedTypeParams = _out42;
      _97_whereConstraints = _out43;
      _98_constrainedEraseParams = _out44;
      _99_unerasedParams = _out45;
      _100_erasedParams = _out46;
      Dafny.ISequence<Dafny.Rune> _101_ctors;
      _101_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _102_i;
      _102_i = BigInteger.Zero;
      while ((_102_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _103_ctor;
        _103_ctor = ((c).dtor_ctors).Select(_102_i);
        Dafny.ISequence<Dafny.Rune> _104_ctorBody;
        _104_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_103_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _105_j;
        _105_j = BigInteger.Zero;
        while ((_105_j) < (new BigInteger(((_103_ctor).dtor_args).Count))) {
          DAST._IFormal _106_formal;
          _106_formal = ((_103_ctor).dtor_args).Select(_105_j);
          Dafny.ISequence<Dafny.Rune> _107_formalType;
          Dafny.ISequence<Dafny.Rune> _out47;
          _out47 = DCOMP.COMP.GenType((_106_formal).dtor_typ, false, false);
          _107_formalType = _out47;
          if ((c).dtor_isCo) {
            _104_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_104_ctorBody, DCOMP.__default.escapeIdent((_106_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _107_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _104_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_104_ctorBody, DCOMP.__default.escapeIdent((_106_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _107_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _105_j = (_105_j) + (BigInteger.One);
        }
        _104_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_104_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _101_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_101_ctors, _104_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _102_i = (_102_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _108_selfPath;
      _108_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _109_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _110_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out48;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out49;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_108_selfPath)), _94_typeParamsSet, out _out48, out _out49);
      _109_implBody = _out48;
      _110_traitBodies = _out49;
      _102_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _111_emittedFields;
      _111_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_102_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _112_ctor;
        _112_ctor = ((c).dtor_ctors).Select(_102_i);
        BigInteger _113_j;
        _113_j = BigInteger.Zero;
        while ((_113_j) < (new BigInteger(((_112_ctor).dtor_args).Count))) {
          DAST._IFormal _114_formal;
          _114_formal = ((_112_ctor).dtor_args).Select(_113_j);
          if (!((_111_emittedFields).Contains((_114_formal).dtor_name))) {
            _111_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_111_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_114_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _115_formalType;
            Dafny.ISequence<Dafny.Rune> _out50;
            _out50 = DCOMP.COMP.GenType((_114_formal).dtor_typ, false, false);
            _115_formalType = _out50;
            Dafny.ISequence<Dafny.Rune> _116_methodBody;
            _116_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _117_k;
            _117_k = BigInteger.Zero;
            while ((_117_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _118_ctor2;
              _118_ctor2 = ((c).dtor_ctors).Select(_117_k);
              Dafny.ISequence<Dafny.Rune> _119_ctorMatch;
              _119_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_118_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _120_l;
              _120_l = BigInteger.Zero;
              bool _121_hasMatchingField;
              _121_hasMatchingField = false;
              while ((_120_l) < (new BigInteger(((_118_ctor2).dtor_args).Count))) {
                DAST._IFormal _122_formal2;
                _122_formal2 = ((_118_ctor2).dtor_args).Select(_120_l);
                if (((_114_formal).dtor_name).Equals((_122_formal2).dtor_name)) {
                  _121_hasMatchingField = true;
                }
                _119_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_119_ctorMatch, DCOMP.__default.escapeIdent((_122_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _120_l = (_120_l) + (BigInteger.One);
              }
              if (_121_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _119_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_119_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_114_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _119_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_119_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_114_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _119_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_119_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _116_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_116_methodBody, _119_ctorMatch);
              _117_k = (_117_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _116_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_116_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _116_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_116_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _109_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_109_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_114_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _115_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _116_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _113_j = (_113_j) + (BigInteger.One);
        }
        _102_i = (_102_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _101_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_101_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _123_typeI;
        _123_typeI = BigInteger.Zero;
        while ((_123_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_123_typeI).Sign == 1) {
            _101_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_101_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _124_genTp;
          Dafny.ISequence<Dafny.Rune> _out51;
          _out51 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_123_typeI), false, false);
          _124_genTp = _out51;
          _101_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_101_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _124_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _123_typeI = (_123_typeI) + (BigInteger.One);
        }
        _101_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_101_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _125_enumBody;
      _125_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _95_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _101_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _96_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _95_typeParams), _97_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _109_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _126_identEraseImpls;
      _126_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _96_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _95_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _100_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _126_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_126_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _98_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _99_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _95_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _127_printImpl;
      _127_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _96_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _95_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _102_i = BigInteger.Zero;
      while ((_102_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _128_ctor;
        _128_ctor = ((c).dtor_ctors).Select(_102_i);
        Dafny.ISequence<Dafny.Rune> _129_ctorMatch;
        _129_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_128_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _130_modulePrefix;
        _130_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _131_printRhs;
        _131_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _130_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_128_ctor).dtor_name), (((_128_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _132_j;
        _132_j = BigInteger.Zero;
        while ((_132_j) < (new BigInteger(((_128_ctor).dtor_args).Count))) {
          DAST._IFormal _133_formal;
          _133_formal = ((_128_ctor).dtor_args).Select(_132_j);
          _129_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_129_ctorMatch, DCOMP.__default.escapeIdent((_133_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_132_j).Sign == 1) {
            _131_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_131_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _131_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_131_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_133_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _132_j = (_132_j) + (BigInteger.One);
        }
        _129_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_129_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_128_ctor).dtor_hasAnyArgs) {
          _131_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_131_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _131_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_131_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _127_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_127_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _129_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _131_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _102_i = (_102_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _127_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_127_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _127_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_127_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _134_defaultImpl;
      _134_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _134_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _96_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _95_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _102_i = BigInteger.Zero;
        while ((_102_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _135_formal;
          _135_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_102_i);
          _134_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_134_defaultImpl, DCOMP.__default.escapeIdent((_135_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _102_i = (_102_i) + (BigInteger.One);
        }
        _134_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_134_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_125_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _126_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _127_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _134_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _136_i;
        _136_i = BigInteger.Zero;
        while ((_136_i) < (new BigInteger((p).Count))) {
          if ((_136_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_136_i))));
          _136_i = (_136_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _137_i;
        _137_i = BigInteger.Zero;
        while ((_137_i) < (new BigInteger((args).Count))) {
          if ((_137_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _138_genTp;
          Dafny.ISequence<Dafny.Rune> _out52;
          _out52 = DCOMP.COMP.GenType((args).Select(_137_i), inBinding, inFn);
          _138_genTp = _out52;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _138_genTp);
          _137_i = (_137_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source5 = c;
      if (_source5.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _139___mcc_h0 = _source5.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _140___mcc_h1 = _source5.dtor_typeArgs;
        DAST._IResolvedType _141___mcc_h2 = _source5.dtor_resolved;
        DAST._IResolvedType _142_resolved = _141___mcc_h2;
        Dafny.ISequence<DAST._IType> _143_args = _140___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _144_p = _139___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out53;
          _out53 = DCOMP.COMP.GenPath(_144_p);
          s = _out53;
          Dafny.ISequence<Dafny.Rune> _145_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out54;
          _out54 = DCOMP.COMP.GenTypeArgs(_143_args, inBinding, inFn);
          _145_typeArgs = _out54;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _145_typeArgs);
          DAST._IResolvedType _source6 = _142_resolved;
          if (_source6.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _146___mcc_h18 = _source6.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source6.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _147___mcc_h20 = _source6.dtor_path;
            {
              if ((_144_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _148___mcc_h22 = _source6.dtor_Newtype_a0;
            DAST._IResolvedType _149_Primitive = _142_resolved;
          }
        }
      } else if (_source5.is_Nullable) {
        DAST._IType _150___mcc_h3 = _source5.dtor_Nullable_a0;
        DAST._IType _151_inner = _150___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _152_innerStr;
          Dafny.ISequence<Dafny.Rune> _out55;
          _out55 = DCOMP.COMP.GenType(_151_inner, inBinding, inFn);
          _152_innerStr = _out55;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _152_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source5.is_Tuple) {
        Dafny.ISequence<DAST._IType> _153___mcc_h4 = _source5.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _154_types = _153___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _155_i;
          _155_i = BigInteger.Zero;
          while ((_155_i) < (new BigInteger((_154_types).Count))) {
            if ((_155_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _156_generated;
            Dafny.ISequence<Dafny.Rune> _out56;
            _out56 = DCOMP.COMP.GenType((_154_types).Select(_155_i), inBinding, inFn);
            _156_generated = _out56;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _156_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _155_i = (_155_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source5.is_Array) {
        DAST._IType _157___mcc_h5 = _source5.dtor_element;
        BigInteger _158___mcc_h6 = _source5.dtor_dims;
        BigInteger _159_dims = _158___mcc_h6;
        DAST._IType _160_element = _157___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _161_elemStr;
          Dafny.ISequence<Dafny.Rune> _out57;
          _out57 = DCOMP.COMP.GenType(_160_element, inBinding, inFn);
          _161_elemStr = _out57;
          s = _161_elemStr;
          BigInteger _162_i;
          _162_i = BigInteger.Zero;
          while ((_162_i) < (_159_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _162_i = (_162_i) + (BigInteger.One);
          }
        }
      } else if (_source5.is_Seq) {
        DAST._IType _163___mcc_h7 = _source5.dtor_element;
        DAST._IType _164_element = _163___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _165_elemStr;
          Dafny.ISequence<Dafny.Rune> _out58;
          _out58 = DCOMP.COMP.GenType(_164_element, inBinding, inFn);
          _165_elemStr = _out58;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _165_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source5.is_Set) {
        DAST._IType _166___mcc_h8 = _source5.dtor_element;
        DAST._IType _167_element = _166___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _168_elemStr;
          Dafny.ISequence<Dafny.Rune> _out59;
          _out59 = DCOMP.COMP.GenType(_167_element, inBinding, inFn);
          _168_elemStr = _out59;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _168_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source5.is_Multiset) {
        DAST._IType _169___mcc_h9 = _source5.dtor_element;
        DAST._IType _170_element = _169___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _171_elemStr;
          Dafny.ISequence<Dafny.Rune> _out60;
          _out60 = DCOMP.COMP.GenType(_170_element, inBinding, inFn);
          _171_elemStr = _out60;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _171_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source5.is_Map) {
        DAST._IType _172___mcc_h10 = _source5.dtor_key;
        DAST._IType _173___mcc_h11 = _source5.dtor_value;
        DAST._IType _174_value = _173___mcc_h11;
        DAST._IType _175_key = _172___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _176_keyStr;
          Dafny.ISequence<Dafny.Rune> _out61;
          _out61 = DCOMP.COMP.GenType(_175_key, inBinding, inFn);
          _176_keyStr = _out61;
          Dafny.ISequence<Dafny.Rune> _177_valueStr;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenType(_174_value, inBinding, inFn);
          _177_valueStr = _out62;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _176_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _177_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source5.is_Arrow) {
        Dafny.ISequence<DAST._IType> _178___mcc_h12 = _source5.dtor_args;
        DAST._IType _179___mcc_h13 = _source5.dtor_result;
        DAST._IType _180_result = _179___mcc_h13;
        Dafny.ISequence<DAST._IType> _181_args = _178___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _182_i;
          _182_i = BigInteger.Zero;
          while ((_182_i) < (new BigInteger((_181_args).Count))) {
            if ((_182_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _183_generated;
            Dafny.ISequence<Dafny.Rune> _out63;
            _out63 = DCOMP.COMP.GenType((_181_args).Select(_182_i), inBinding, true);
            _183_generated = _out63;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _183_generated);
            _182_i = (_182_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _184_resultType;
          Dafny.ISequence<Dafny.Rune> _out64;
          _out64 = DCOMP.COMP.GenType(_180_result, inBinding, (inFn) || (inBinding));
          _184_resultType = _out64;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _184_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source5.is_Primitive) {
        DAST._IPrimitive _185___mcc_h14 = _source5.dtor_Primitive_a0;
        DAST._IPrimitive _186_p = _185___mcc_h14;
        {
          DAST._IPrimitive _source7 = _186_p;
          if (_source7.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source7.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source7.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source7.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source5.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _187___mcc_h15 = _source5.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _188_v = _187___mcc_h15;
        s = _188_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _189___mcc_h16 = _source5.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source8 = _189___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _190___mcc_h17 = _source8;
        Dafny.ISequence<Dafny.Rune> _191_name = _190___mcc_h17;
        s = DCOMP.__default.escapeIdent(_191_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _192_i;
      _192_i = BigInteger.Zero;
      while ((_192_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source9 = (body).Select(_192_i);
        DAST._IMethod _193___mcc_h0 = _source9;
        DAST._IMethod _194_m = _193___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source10 = (_194_m).dtor_overridingPath;
          if (_source10.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _195___mcc_h1 = _source10.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _196_p = _195___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _197_existing;
              _197_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_196_p)) {
                _197_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _196_p);
              }
              if ((new BigInteger((_197_existing).Count)).Sign == 1) {
                _197_existing = Dafny.Sequence<Dafny.Rune>.Concat(_197_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _198_genMethod;
              Dafny.ISequence<Dafny.Rune> _out65;
              _out65 = DCOMP.COMP.GenMethod(_194_m, true, enclosingType, enclosingTypeParams);
              _198_genMethod = _out65;
              _197_existing = Dafny.Sequence<Dafny.Rune>.Concat(_197_existing, _198_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_196_p, _197_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _199_generated;
              Dafny.ISequence<Dafny.Rune> _out66;
              _out66 = DCOMP.COMP.GenMethod(_194_m, forTrait, enclosingType, enclosingTypeParams);
              _199_generated = _out66;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _199_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _192_i = (_192_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _200_i;
      _200_i = BigInteger.Zero;
      while ((_200_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _201_param;
        _201_param = (@params).Select(_200_i);
        Dafny.ISequence<Dafny.Rune> _202_paramType;
        Dafny.ISequence<Dafny.Rune> _out67;
        _out67 = DCOMP.COMP.GenType((_201_param).dtor_typ, false, false);
        _202_paramType = _out67;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_201_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _202_paramType);
        if ((_200_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _200_i = (_200_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _203_params;
      Dafny.ISequence<Dafny.Rune> _out68;
      _out68 = DCOMP.COMP.GenParams((m).dtor_params);
      _203_params = _out68;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _204_paramNames;
      _204_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _205_paramI;
      _205_paramI = BigInteger.Zero;
      while ((_205_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _204_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_204_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_205_paramI)).dtor_name));
        _205_paramI = (_205_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _203_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _203_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _206_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out69;
          _out69 = DCOMP.COMP.GenType(enclosingType, false, false);
          _206_enclosingTypeString = _out69;
          _203_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _206_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _203_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _207_retType;
      _207_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _208_typeI;
      _208_typeI = BigInteger.Zero;
      while ((_208_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_208_typeI).Sign == 1) {
          _207_retType = Dafny.Sequence<Dafny.Rune>.Concat(_207_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _209_typeString;
        Dafny.ISequence<Dafny.Rune> _out70;
        _out70 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_208_typeI), false, false);
        _209_typeString = _out70;
        _207_retType = Dafny.Sequence<Dafny.Rune>.Concat(_207_retType, _209_typeString);
        _208_typeI = (_208_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _207_retType = Dafny.Sequence<Dafny.Rune>.Concat(_207_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _210_typeParamsFiltered;
      _210_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _211_typeParamI;
      _211_typeParamI = BigInteger.Zero;
      while ((_211_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _212_typeParam;
        _212_typeParam = ((m).dtor_typeParams).Select(_211_typeParamI);
        if (!((enclosingTypeParams).Contains(_212_typeParam))) {
          _210_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_210_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_212_typeParam));
        }
        _211_typeParamI = (_211_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _213_whereClauses;
      _213_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_210_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _213_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_213_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _214_i;
        _214_i = BigInteger.Zero;
        while ((_214_i) < (new BigInteger((_210_typeParamsFiltered).Count))) {
          if ((_214_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _213_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_213_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _215_typeString;
          Dafny.ISequence<Dafny.Rune> _out71;
          _out71 = DCOMP.COMP.GenType((_210_typeParamsFiltered).Select(_214_i), false, false);
          _215_typeString = _out71;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _215_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _215_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _213_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_213_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _215_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _214_i = (_214_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _203_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _207_retType), _213_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _216_earlyReturn;
        _216_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source11 = (m).dtor_outVars;
        if (_source11.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _217___mcc_h0 = _source11.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _218_outVars = _217___mcc_h0;
          {
            _216_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _219_outI;
            _219_outI = BigInteger.Zero;
            while ((_219_outI) < (new BigInteger((_218_outVars).Count))) {
              if ((_219_outI).Sign == 1) {
                _216_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_216_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _220_outVar;
              _220_outVar = (_218_outVars).Select(_219_outI);
              _216_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_216_earlyReturn, DCOMP.__default.escapeIdent((_220_outVar)));
              _219_outI = (_219_outI) + (BigInteger.One);
            }
            _216_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_216_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _221_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _222___v15;
        Dafny.ISequence<Dafny.Rune> _out72;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out73;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _204_paramNames, true, _216_earlyReturn, out _out72, out _out73);
        _221_body = _out72;
        _222___v15 = _out73;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _221_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _223_declarations;
      _223_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _224_i;
      _224_i = BigInteger.Zero;
      while ((_224_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _225_stmt;
        _225_stmt = (stmts).Select(_224_i);
        Dafny.ISequence<Dafny.Rune> _226_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _227_recIdents;
        Dafny.ISequence<Dafny.Rune> _out74;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out75;
        DCOMP.COMP.GenStmt(_225_stmt, selfIdent, @params, (isLast) && ((_224_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out74, out _out75);
        _226_stmtString = _out74;
        _227_recIdents = _out75;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_227_recIdents, _223_declarations));
        DAST._IStatement _source12 = _225_stmt;
        if (_source12.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _228___mcc_h0 = _source12.dtor_name;
          DAST._IType _229___mcc_h1 = _source12.dtor_typ;
          DAST._IOptional<DAST._IExpression> _230___mcc_h2 = _source12.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _231_name = _228___mcc_h0;
          {
            _223_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_223_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_231_name));
          }
        } else if (_source12.is_Assign) {
          DAST._IAssignLhs _232___mcc_h6 = _source12.dtor_lhs;
          DAST._IExpression _233___mcc_h7 = _source12.dtor_value;
        } else if (_source12.is_If) {
          DAST._IExpression _234___mcc_h10 = _source12.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _235___mcc_h11 = _source12.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _236___mcc_h12 = _source12.dtor_els;
        } else if (_source12.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _237___mcc_h16 = _source12.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _238___mcc_h17 = _source12.dtor_body;
        } else if (_source12.is_While) {
          DAST._IExpression _239___mcc_h20 = _source12.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _240___mcc_h21 = _source12.dtor_body;
        } else if (_source12.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _241___mcc_h24 = _source12.dtor_boundName;
          DAST._IType _242___mcc_h25 = _source12.dtor_boundType;
          DAST._IExpression _243___mcc_h26 = _source12.dtor_over;
          Dafny.ISequence<DAST._IStatement> _244___mcc_h27 = _source12.dtor_body;
        } else if (_source12.is_Call) {
          DAST._IExpression _245___mcc_h32 = _source12.dtor_on;
          Dafny.ISequence<Dafny.Rune> _246___mcc_h33 = _source12.dtor_name;
          Dafny.ISequence<DAST._IType> _247___mcc_h34 = _source12.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _248___mcc_h35 = _source12.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _249___mcc_h36 = _source12.dtor_outs;
        } else if (_source12.is_Return) {
          DAST._IExpression _250___mcc_h42 = _source12.dtor_expr;
        } else if (_source12.is_EarlyReturn) {
        } else if (_source12.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _251___mcc_h44 = _source12.dtor_toLabel;
        } else if (_source12.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _252___mcc_h46 = _source12.dtor_body;
        } else if (_source12.is_JumpTailCallStart) {
        } else if (_source12.is_Halt) {
        } else {
          DAST._IExpression _253___mcc_h48 = _source12.dtor_Print_a0;
        }
        if ((_224_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _226_stmtString);
        _224_i = (_224_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source13 = lhs;
      if (_source13.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _254___mcc_h0 = _source13.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source14 = _254___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _255___mcc_h1 = _source14;
        Dafny.ISequence<Dafny.Rune> _256_id = _255___mcc_h1;
        {
          if ((@params).Contains(_256_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_256_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_256_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_256_id);
          needsIIFE = false;
        }
      } else if (_source13.is_Select) {
        DAST._IExpression _257___mcc_h2 = _source13.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _258___mcc_h3 = _source13.dtor_field;
        Dafny.ISequence<Dafny.Rune> _259_field = _258___mcc_h3;
        DAST._IExpression _260_on = _257___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _261_onExpr;
          bool _262_onOwned;
          bool _263_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _264_recIdents;
          Dafny.ISequence<Dafny.Rune> _out76;
          bool _out77;
          bool _out78;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out79;
          DCOMP.COMP.GenExpr(_260_on, selfIdent, @params, false, out _out76, out _out77, out _out78, out _out79);
          _261_onExpr = _out76;
          _262_onOwned = _out77;
          _263_onErased = _out78;
          _264_recIdents = _out79;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _261_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _259_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _264_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _265___mcc_h4 = _source13.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _266___mcc_h5 = _source13.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _267_indices = _266___mcc_h5;
        DAST._IExpression _268_on = _265___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _269_onExpr;
          bool _270_onOwned;
          bool _271_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _272_recIdents;
          Dafny.ISequence<Dafny.Rune> _out80;
          bool _out81;
          bool _out82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out83;
          DCOMP.COMP.GenExpr(_268_on, selfIdent, @params, false, out _out80, out _out81, out _out82, out _out83);
          _269_onExpr = _out80;
          _270_onOwned = _out81;
          _271_onErased = _out82;
          _272_recIdents = _out83;
          readIdents = _272_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _273_i;
          _273_i = BigInteger.Zero;
          while ((_273_i) < (new BigInteger((_267_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _274_idx;
            bool _275___v19;
            bool _276_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _277_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out84;
            bool _out85;
            bool _out86;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out87;
            DCOMP.COMP.GenExpr((_267_indices).Select(_273_i), selfIdent, @params, true, out _out84, out _out85, out _out86, out _out87);
            _274_idx = _out84;
            _275___v19 = _out85;
            _276_idxErased = _out86;
            _277_recIdentsIdx = _out87;
            if (!(_276_idxErased)) {
              _274_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _274_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_273_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _274_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _277_recIdentsIdx);
            _273_i = (_273_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _269_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _273_i = BigInteger.Zero;
          while ((_273_i) < (new BigInteger((_267_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_273_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _273_i = (_273_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source15 = stmt;
      if (_source15.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _278___mcc_h0 = _source15.dtor_name;
        DAST._IType _279___mcc_h1 = _source15.dtor_typ;
        DAST._IOptional<DAST._IExpression> _280___mcc_h2 = _source15.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source16 = _280___mcc_h2;
        if (_source16.is_Some) {
          DAST._IExpression _281___mcc_h3 = _source16.dtor_Some_a0;
          DAST._IExpression _282_expression = _281___mcc_h3;
          DAST._IType _283_typ = _279___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _284_name = _278___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _285_typeString;
            Dafny.ISequence<Dafny.Rune> _out88;
            _out88 = DCOMP.COMP.GenType(_283_typ, true, false);
            _285_typeString = _out88;
            Dafny.ISequence<Dafny.Rune> _286_expr;
            bool _287___v20;
            bool _288_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _289_recIdents;
            Dafny.ISequence<Dafny.Rune> _out89;
            bool _out90;
            bool _out91;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out92;
            DCOMP.COMP.GenExpr(_282_expression, selfIdent, @params, true, out _out89, out _out90, out _out91, out _out92);
            _286_expr = _out89;
            _287___v20 = _out90;
            _288_recErased = _out91;
            _289_recIdents = _out92;
            if (!(_288_recErased)) {
              _286_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _286_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _286_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _285_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _286_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_284_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _285_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _286_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _289_recIdents;
          }
        } else {
          DAST._IType _290_typ = _279___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _291_name = _278___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _292_typeString;
            Dafny.ISequence<Dafny.Rune> _out93;
            _out93 = DCOMP.COMP.GenType(_290_typ, true, false);
            _292_typeString = _out93;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_291_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _292_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source15.is_Assign) {
        DAST._IAssignLhs _293___mcc_h4 = _source15.dtor_lhs;
        DAST._IExpression _294___mcc_h5 = _source15.dtor_value;
        DAST._IExpression _295_expression = _294___mcc_h5;
        DAST._IAssignLhs _296_lhs = _293___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _297_lhsGen;
          bool _298_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _299_recIdents;
          Dafny.ISequence<Dafny.Rune> _out94;
          bool _out95;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out96;
          DCOMP.COMP.GenAssignLhs(_296_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out94, out _out95, out _out96);
          _297_lhsGen = _out94;
          _298_needsIIFE = _out95;
          _299_recIdents = _out96;
          Dafny.ISequence<Dafny.Rune> _300_exprGen;
          bool _301___v21;
          bool _302_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _303_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out97;
          bool _out98;
          bool _out99;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out100;
          DCOMP.COMP.GenExpr(_295_expression, selfIdent, @params, true, out _out97, out _out98, out _out99, out _out100);
          _300_exprGen = _out97;
          _301___v21 = _out98;
          _302_exprErased = _out99;
          _303_exprIdents = _out100;
          if (!(_302_exprErased)) {
            _300_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _300_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _300_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _300_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_298_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _300_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _297_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_297_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _300_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_299_recIdents, _303_exprIdents);
        }
      } else if (_source15.is_If) {
        DAST._IExpression _304___mcc_h6 = _source15.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _305___mcc_h7 = _source15.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _306___mcc_h8 = _source15.dtor_els;
        Dafny.ISequence<DAST._IStatement> _307_els = _306___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _308_thn = _305___mcc_h7;
        DAST._IExpression _309_cond = _304___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _310_condString;
          bool _311___v22;
          bool _312_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _313_recIdents;
          Dafny.ISequence<Dafny.Rune> _out101;
          bool _out102;
          bool _out103;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out104;
          DCOMP.COMP.GenExpr(_309_cond, selfIdent, @params, true, out _out101, out _out102, out _out103, out _out104);
          _310_condString = _out101;
          _311___v22 = _out102;
          _312_condErased = _out103;
          _313_recIdents = _out104;
          if (!(_312_condErased)) {
            _310_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _310_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _313_recIdents;
          Dafny.ISequence<Dafny.Rune> _314_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _315_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out105;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out106;
          DCOMP.COMP.GenStmts(_308_thn, selfIdent, @params, isLast, earlyReturn, out _out105, out _out106);
          _314_thnString = _out105;
          _315_thnIdents = _out106;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _315_thnIdents);
          Dafny.ISequence<Dafny.Rune> _316_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _317_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out108;
          DCOMP.COMP.GenStmts(_307_els, selfIdent, @params, isLast, earlyReturn, out _out107, out _out108);
          _316_elsString = _out107;
          _317_elsIdents = _out108;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _317_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _310_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _314_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _316_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _318___mcc_h9 = _source15.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _319___mcc_h10 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _320_body = _319___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _321_lbl = _318___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _322_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _323_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out110;
          DCOMP.COMP.GenStmts(_320_body, selfIdent, @params, isLast, earlyReturn, out _out109, out _out110);
          _322_bodyString = _out109;
          _323_bodyIdents = _out110;
          readIdents = _323_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _321_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _322_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_While) {
        DAST._IExpression _324___mcc_h11 = _source15.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _325___mcc_h12 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _326_body = _325___mcc_h12;
        DAST._IExpression _327_cond = _324___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _328_condString;
          bool _329___v23;
          bool _330_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _331_recIdents;
          Dafny.ISequence<Dafny.Rune> _out111;
          bool _out112;
          bool _out113;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out114;
          DCOMP.COMP.GenExpr(_327_cond, selfIdent, @params, true, out _out111, out _out112, out _out113, out _out114);
          _328_condString = _out111;
          _329___v23 = _out112;
          _330_condErased = _out113;
          _331_recIdents = _out114;
          if (!(_330_condErased)) {
            _328_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _328_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _331_recIdents;
          Dafny.ISequence<Dafny.Rune> _332_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _333_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenStmts(_326_body, selfIdent, @params, false, earlyReturn, out _out115, out _out116);
          _332_bodyString = _out115;
          _333_bodyIdents = _out116;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _333_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _328_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _332_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _334___mcc_h13 = _source15.dtor_boundName;
        DAST._IType _335___mcc_h14 = _source15.dtor_boundType;
        DAST._IExpression _336___mcc_h15 = _source15.dtor_over;
        Dafny.ISequence<DAST._IStatement> _337___mcc_h16 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _338_body = _337___mcc_h16;
        DAST._IExpression _339_over = _336___mcc_h15;
        DAST._IType _340_boundType = _335___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _341_boundName = _334___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _342_overString;
          bool _343___v24;
          bool _344_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _345_recIdents;
          Dafny.ISequence<Dafny.Rune> _out117;
          bool _out118;
          bool _out119;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out120;
          DCOMP.COMP.GenExpr(_339_over, selfIdent, @params, true, out _out117, out _out118, out _out119, out _out120);
          _342_overString = _out117;
          _343___v24 = _out118;
          _344_overErased = _out119;
          _345_recIdents = _out120;
          Dafny.ISequence<Dafny.Rune> _346_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out121;
          _out121 = DCOMP.COMP.GenType(_340_boundType, false, false);
          _346_boundTypeStr = _out121;
          readIdents = _345_recIdents;
          Dafny.ISequence<Dafny.Rune> _347_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _348_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out122;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out123;
          DCOMP.COMP.GenStmts(_338_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_341_boundName)), false, earlyReturn, out _out122, out _out123);
          _347_bodyString = _out122;
          _348_bodyIdents = _out123;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _348_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_341_boundName));
          Dafny.ISequence<Dafny.Rune> _349_unerasedIter;
          _349_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_344_overErased) {
            _349_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _346_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _349_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _342_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_341_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _349_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _347_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Call) {
        DAST._IExpression _350___mcc_h17 = _source15.dtor_on;
        Dafny.ISequence<Dafny.Rune> _351___mcc_h18 = _source15.dtor_name;
        Dafny.ISequence<DAST._IType> _352___mcc_h19 = _source15.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _353___mcc_h20 = _source15.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _354___mcc_h21 = _source15.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _355_maybeOutVars = _354___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _356_args = _353___mcc_h20;
        Dafny.ISequence<DAST._IType> _357_typeArgs = _352___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _358_name = _351___mcc_h18;
        DAST._IExpression _359_on = _350___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _360_typeArgString;
          _360_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_357_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _361_typeI;
            _361_typeI = BigInteger.Zero;
            _360_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_361_typeI) < (new BigInteger((_357_typeArgs).Count))) {
              if ((_361_typeI).Sign == 1) {
                _360_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_360_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _362_typeString;
              Dafny.ISequence<Dafny.Rune> _out124;
              _out124 = DCOMP.COMP.GenType((_357_typeArgs).Select(_361_typeI), false, false);
              _362_typeString = _out124;
              _360_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_360_typeArgString, _362_typeString);
              _361_typeI = (_361_typeI) + (BigInteger.One);
            }
            _360_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_360_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _363_argString;
          _363_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _364_i;
          _364_i = BigInteger.Zero;
          while ((_364_i) < (new BigInteger((_356_args).Count))) {
            if ((_364_i).Sign == 1) {
              _363_argString = Dafny.Sequence<Dafny.Rune>.Concat(_363_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _365_argExpr;
            bool _366_isOwned;
            bool _367_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _368_argIdents;
            Dafny.ISequence<Dafny.Rune> _out125;
            bool _out126;
            bool _out127;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out128;
            DCOMP.COMP.GenExpr((_356_args).Select(_364_i), selfIdent, @params, false, out _out125, out _out126, out _out127, out _out128);
            _365_argExpr = _out125;
            _366_isOwned = _out126;
            _367_argErased = _out127;
            _368_argIdents = _out128;
            if (_366_isOwned) {
              _365_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _365_argExpr);
            }
            _363_argString = Dafny.Sequence<Dafny.Rune>.Concat(_363_argString, _365_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _368_argIdents);
            _364_i = (_364_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _369_enclosingString;
          bool _370___v25;
          bool _371___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _372_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out129;
          bool _out130;
          bool _out131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out132;
          DCOMP.COMP.GenExpr(_359_on, selfIdent, @params, false, out _out129, out _out130, out _out131, out _out132);
          _369_enclosingString = _out129;
          _370___v25 = _out130;
          _371___v26 = _out131;
          _372_enclosingIdents = _out132;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _372_enclosingIdents);
          DAST._IExpression _source17 = _359_on;
          if (_source17.is_Literal) {
            DAST._ILiteral _373___mcc_h26 = _source17.dtor_Literal_a0;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _374___mcc_h28 = _source17.dtor_Ident_a0;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _375___mcc_h30 = _source17.dtor_Companion_a0;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_369_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source17.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _376___mcc_h32 = _source17.dtor_Tuple_a0;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _377___mcc_h34 = _source17.dtor_path;
            Dafny.ISequence<DAST._IType> _378___mcc_h35 = _source17.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _379___mcc_h36 = _source17.dtor_args;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _380___mcc_h40 = _source17.dtor_dims;
            DAST._IType _381___mcc_h41 = _source17.dtor_typ;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _382___mcc_h44 = _source17.dtor_path;
            Dafny.ISequence<DAST._IType> _383___mcc_h45 = _source17.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _384___mcc_h46 = _source17.dtor_variant;
            bool _385___mcc_h47 = _source17.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _386___mcc_h48 = _source17.dtor_contents;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Convert) {
            DAST._IExpression _387___mcc_h54 = _source17.dtor_value;
            DAST._IType _388___mcc_h55 = _source17.dtor_from;
            DAST._IType _389___mcc_h56 = _source17.dtor_typ;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqConstruct) {
            DAST._IExpression _390___mcc_h60 = _source17.dtor_length;
            DAST._IExpression _391___mcc_h61 = _source17.dtor_elem;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _392___mcc_h64 = _source17.dtor_elements;
            DAST._IType _393___mcc_h65 = _source17.dtor_typ;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _394___mcc_h68 = _source17.dtor_elements;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _395___mcc_h70 = _source17.dtor_mapElems;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_This) {
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Ite) {
            DAST._IExpression _396___mcc_h72 = _source17.dtor_cond;
            DAST._IExpression _397___mcc_h73 = _source17.dtor_thn;
            DAST._IExpression _398___mcc_h74 = _source17.dtor_els;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_UnOp) {
            DAST._IUnaryOp _399___mcc_h78 = _source17.dtor_unOp;
            DAST._IExpression _400___mcc_h79 = _source17.dtor_expr;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BinOp) {
            DAST._IBinOp _401___mcc_h82 = _source17.dtor_op;
            DAST._IExpression _402___mcc_h83 = _source17.dtor_left;
            DAST._IExpression _403___mcc_h84 = _source17.dtor_right;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_ArrayLen) {
            DAST._IExpression _404___mcc_h88 = _source17.dtor_expr;
            BigInteger _405___mcc_h89 = _source17.dtor_dim;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Select) {
            DAST._IExpression _406___mcc_h92 = _source17.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _407___mcc_h93 = _source17.dtor_field;
            bool _408___mcc_h94 = _source17.dtor_isConstant;
            bool _409___mcc_h95 = _source17.dtor_onDatatype;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SelectFn) {
            DAST._IExpression _410___mcc_h100 = _source17.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _411___mcc_h101 = _source17.dtor_field;
            bool _412___mcc_h102 = _source17.dtor_onDatatype;
            bool _413___mcc_h103 = _source17.dtor_isStatic;
            BigInteger _414___mcc_h104 = _source17.dtor_arity;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Index) {
            DAST._IExpression _415___mcc_h110 = _source17.dtor_expr;
            DAST._ICollKind _416___mcc_h111 = _source17.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _417___mcc_h112 = _source17.dtor_indices;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_IndexRange) {
            DAST._IExpression _418___mcc_h116 = _source17.dtor_expr;
            bool _419___mcc_h117 = _source17.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _420___mcc_h118 = _source17.dtor_low;
            DAST._IOptional<DAST._IExpression> _421___mcc_h119 = _source17.dtor_high;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_TupleSelect) {
            DAST._IExpression _422___mcc_h124 = _source17.dtor_expr;
            BigInteger _423___mcc_h125 = _source17.dtor_index;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Call) {
            DAST._IExpression _424___mcc_h128 = _source17.dtor_on;
            Dafny.ISequence<Dafny.Rune> _425___mcc_h129 = _source17.dtor_name;
            Dafny.ISequence<DAST._IType> _426___mcc_h130 = _source17.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _427___mcc_h131 = _source17.dtor_args;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _428___mcc_h136 = _source17.dtor_params;
            DAST._IType _429___mcc_h137 = _source17.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _430___mcc_h138 = _source17.dtor_body;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _431___mcc_h142 = _source17.dtor_values;
            DAST._IType _432___mcc_h143 = _source17.dtor_retType;
            DAST._IExpression _433___mcc_h144 = _source17.dtor_expr;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _434___mcc_h148 = _source17.dtor_name;
            DAST._IType _435___mcc_h149 = _source17.dtor_typ;
            DAST._IExpression _436___mcc_h150 = _source17.dtor_value;
            DAST._IExpression _437___mcc_h151 = _source17.dtor_iifeBody;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Apply) {
            DAST._IExpression _438___mcc_h156 = _source17.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _439___mcc_h157 = _source17.dtor_args;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_TypeTest) {
            DAST._IExpression _440___mcc_h160 = _source17.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _441___mcc_h161 = _source17.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _442___mcc_h162 = _source17.dtor_variant;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_InitializationValue) {
            DAST._IType _443___mcc_h166 = _source17.dtor_typ;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BoolBoundedPool) {
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SetBoundedPool) {
            DAST._IExpression _444___mcc_h168 = _source17.dtor_of;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqBoundedPool) {
            DAST._IExpression _445___mcc_h170 = _source17.dtor_of;
            bool _446___mcc_h171 = _source17.dtor_includeDuplicates;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _447___mcc_h174 = _source17.dtor_lo;
            DAST._IExpression _448___mcc_h175 = _source17.dtor_hi;
            {
              _369_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _369_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _449_receiver;
          _449_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source18 = _355_maybeOutVars;
          if (_source18.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _450___mcc_h178 = _source18.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _451_outVars = _450___mcc_h178;
            {
              if ((new BigInteger((_451_outVars).Count)) > (BigInteger.One)) {
                _449_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _452_outI;
              _452_outI = BigInteger.Zero;
              while ((_452_outI) < (new BigInteger((_451_outVars).Count))) {
                if ((_452_outI).Sign == 1) {
                  _449_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_449_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _453_outVar;
                _453_outVar = (_451_outVars).Select(_452_outI);
                _449_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_449_receiver, (_453_outVar));
                _452_outI = (_452_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_451_outVars).Count)) > (BigInteger.One)) {
                _449_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_449_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_449_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_449_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _369_enclosingString), DCOMP.__default.escapeIdent(_358_name)), _360_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _363_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source15.is_Return) {
        DAST._IExpression _454___mcc_h22 = _source15.dtor_expr;
        DAST._IExpression _455_expr = _454___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _456_exprString;
          bool _457___v29;
          bool _458_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _459_recIdents;
          Dafny.ISequence<Dafny.Rune> _out133;
          bool _out134;
          bool _out135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out136;
          DCOMP.COMP.GenExpr(_455_expr, selfIdent, @params, true, out _out133, out _out134, out _out135, out _out136);
          _456_exprString = _out133;
          _457___v29 = _out134;
          _458_recErased = _out135;
          _459_recIdents = _out136;
          _456_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _456_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _459_recIdents;
          if (isLast) {
            generated = _456_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _456_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source15.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _460___mcc_h23 = _source15.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _461_toLabel = _460___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source19 = _461_toLabel;
          if (_source19.is_Some) {
            Dafny.ISequence<Dafny.Rune> _462___mcc_h179 = _source19.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _463_lbl = _462___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _463_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _464___mcc_h24 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _465_body = _464___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _466_paramI;
          _466_paramI = BigInteger.Zero;
          while ((_466_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _467_param;
            _467_param = (@params).Select(_466_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_467_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_467_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _466_paramI = (_466_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _468_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _469_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out138;
          DCOMP.COMP.GenStmts(_465_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out137, out _out138);
          _468_bodyString = _out137;
          _469_bodyIdents = _out138;
          readIdents = _469_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _468_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _470___mcc_h25 = _source15.dtor_Print_a0;
        DAST._IExpression _471_e = _470___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _472_printedExpr;
          bool _473_isOwned;
          bool _474___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _475_recIdents;
          Dafny.ISequence<Dafny.Rune> _out139;
          bool _out140;
          bool _out141;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out142;
          DCOMP.COMP.GenExpr(_471_e, selfIdent, @params, false, out _out139, out _out140, out _out141, out _out142);
          _472_printedExpr = _out139;
          _473_isOwned = _out140;
          _474___v30 = _out141;
          _475_recIdents = _out142;
          if (_473_isOwned) {
            _472_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _472_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _472_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _475_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source20 = e;
      if (_source20.is_Literal) {
        DAST._ILiteral _476___mcc_h0 = _source20.dtor_Literal_a0;
        DAST._ILiteral _source21 = _476___mcc_h0;
        if (_source21.is_BoolLiteral) {
          bool _477___mcc_h1 = _source21.dtor_BoolLiteral_a0;
          if ((_477___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source21.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _478___mcc_h2 = _source21.dtor_IntLiteral_a0;
          DAST._IType _479___mcc_h3 = _source21.dtor_IntLiteral_a1;
          DAST._IType _480_t = _479___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _481_i = _478___mcc_h2;
          {
            DAST._IType _source22 = _480_t;
            if (_source22.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _482___mcc_h237 = _source22.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _483___mcc_h238 = _source22.dtor_typeArgs;
              DAST._IResolvedType _484___mcc_h239 = _source22.dtor_resolved;
              DAST._IType _485_o = _480_t;
              {
                Dafny.ISequence<Dafny.Rune> _486_genType;
                Dafny.ISequence<Dafny.Rune> _out143;
                _out143 = DCOMP.COMP.GenType(_485_o, false, false);
                _486_genType = _out143;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _486_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Nullable) {
              DAST._IType _487___mcc_h243 = _source22.dtor_Nullable_a0;
              DAST._IType _488_o = _480_t;
              {
                Dafny.ISequence<Dafny.Rune> _489_genType;
                Dafny.ISequence<Dafny.Rune> _out144;
                _out144 = DCOMP.COMP.GenType(_488_o, false, false);
                _489_genType = _out144;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _489_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Tuple) {
              Dafny.ISequence<DAST._IType> _490___mcc_h245 = _source22.dtor_Tuple_a0;
              DAST._IType _491_o = _480_t;
              {
                Dafny.ISequence<Dafny.Rune> _492_genType;
                Dafny.ISequence<Dafny.Rune> _out145;
                _out145 = DCOMP.COMP.GenType(_491_o, false, false);
                _492_genType = _out145;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _492_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Array) {
              DAST._IType _493___mcc_h247 = _source22.dtor_element;
              BigInteger _494___mcc_h248 = _source22.dtor_dims;
              DAST._IType _495_o = _480_t;
              {
                Dafny.ISequence<Dafny.Rune> _496_genType;
                Dafny.ISequence<Dafny.Rune> _out146;
                _out146 = DCOMP.COMP.GenType(_495_o, false, false);
                _496_genType = _out146;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _496_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Seq) {
              DAST._IType _497___mcc_h251 = _source22.dtor_element;
              DAST._IType _498_o = _480_t;
              {
                Dafny.ISequence<Dafny.Rune> _499_genType;
                Dafny.ISequence<Dafny.Rune> _out147;
                _out147 = DCOMP.COMP.GenType(_498_o, false, false);
                _499_genType = _out147;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _499_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Set) {
              DAST._IType _500___mcc_h253 = _source22.dtor_element;
              DAST._IType _501_o = _480_t;
              {
                Dafny.ISequence<Dafny.Rune> _502_genType;
                Dafny.ISequence<Dafny.Rune> _out148;
                _out148 = DCOMP.COMP.GenType(_501_o, false, false);
                _502_genType = _out148;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _502_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Multiset) {
              DAST._IType _503___mcc_h255 = _source22.dtor_element;
              DAST._IType _504_o = _480_t;
              {
                Dafny.ISequence<Dafny.Rune> _505_genType;
                Dafny.ISequence<Dafny.Rune> _out149;
                _out149 = DCOMP.COMP.GenType(_504_o, false, false);
                _505_genType = _out149;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _505_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Map) {
              DAST._IType _506___mcc_h257 = _source22.dtor_key;
              DAST._IType _507___mcc_h258 = _source22.dtor_value;
              DAST._IType _508_o = _480_t;
              {
                Dafny.ISequence<Dafny.Rune> _509_genType;
                Dafny.ISequence<Dafny.Rune> _out150;
                _out150 = DCOMP.COMP.GenType(_508_o, false, false);
                _509_genType = _out150;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _509_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Arrow) {
              Dafny.ISequence<DAST._IType> _510___mcc_h261 = _source22.dtor_args;
              DAST._IType _511___mcc_h262 = _source22.dtor_result;
              DAST._IType _512_o = _480_t;
              {
                Dafny.ISequence<Dafny.Rune> _513_genType;
                Dafny.ISequence<Dafny.Rune> _out151;
                _out151 = DCOMP.COMP.GenType(_512_o, false, false);
                _513_genType = _out151;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _513_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Primitive) {
              DAST._IPrimitive _514___mcc_h265 = _source22.dtor_Primitive_a0;
              DAST._IPrimitive _source23 = _514___mcc_h265;
              if (_source23.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source23.is_Real) {
                DAST._IType _515_o = _480_t;
                {
                  Dafny.ISequence<Dafny.Rune> _516_genType;
                  Dafny.ISequence<Dafny.Rune> _out152;
                  _out152 = DCOMP.COMP.GenType(_515_o, false, false);
                  _516_genType = _out152;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _516_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source23.is_String) {
                DAST._IType _517_o = _480_t;
                {
                  Dafny.ISequence<Dafny.Rune> _518_genType;
                  Dafny.ISequence<Dafny.Rune> _out153;
                  _out153 = DCOMP.COMP.GenType(_517_o, false, false);
                  _518_genType = _out153;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _518_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source23.is_Bool) {
                DAST._IType _519_o = _480_t;
                {
                  Dafny.ISequence<Dafny.Rune> _520_genType;
                  Dafny.ISequence<Dafny.Rune> _out154;
                  _out154 = DCOMP.COMP.GenType(_519_o, false, false);
                  _520_genType = _out154;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _520_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _521_o = _480_t;
                {
                  Dafny.ISequence<Dafny.Rune> _522_genType;
                  Dafny.ISequence<Dafny.Rune> _out155;
                  _out155 = DCOMP.COMP.GenType(_521_o, false, false);
                  _522_genType = _out155;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _522_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source22.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _523___mcc_h267 = _source22.dtor_Passthrough_a0;
              DAST._IType _524_o = _480_t;
              {
                Dafny.ISequence<Dafny.Rune> _525_genType;
                Dafny.ISequence<Dafny.Rune> _out156;
                _out156 = DCOMP.COMP.GenType(_524_o, false, false);
                _525_genType = _out156;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _525_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _526___mcc_h269 = _source22.dtor_TypeArg_a0;
              DAST._IType _527_o = _480_t;
              {
                Dafny.ISequence<Dafny.Rune> _528_genType;
                Dafny.ISequence<Dafny.Rune> _out157;
                _out157 = DCOMP.COMP.GenType(_527_o, false, false);
                _528_genType = _out157;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _481_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _528_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _529___mcc_h4 = _source21.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _530___mcc_h5 = _source21.dtor_DecLiteral_a1;
          DAST._IType _531___mcc_h6 = _source21.dtor_DecLiteral_a2;
          DAST._IType _532_t = _531___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _533_d = _530___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _534_n = _529___mcc_h4;
          {
            DAST._IType _source24 = _532_t;
            if (_source24.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _535___mcc_h271 = _source24.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _536___mcc_h272 = _source24.dtor_typeArgs;
              DAST._IResolvedType _537___mcc_h273 = _source24.dtor_resolved;
              DAST._IType _538_o = _532_t;
              {
                Dafny.ISequence<Dafny.Rune> _539_genType;
                Dafny.ISequence<Dafny.Rune> _out158;
                _out158 = DCOMP.COMP.GenType(_538_o, false, false);
                _539_genType = _out158;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _539_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Nullable) {
              DAST._IType _540___mcc_h277 = _source24.dtor_Nullable_a0;
              DAST._IType _541_o = _532_t;
              {
                Dafny.ISequence<Dafny.Rune> _542_genType;
                Dafny.ISequence<Dafny.Rune> _out159;
                _out159 = DCOMP.COMP.GenType(_541_o, false, false);
                _542_genType = _out159;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _542_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Tuple) {
              Dafny.ISequence<DAST._IType> _543___mcc_h279 = _source24.dtor_Tuple_a0;
              DAST._IType _544_o = _532_t;
              {
                Dafny.ISequence<Dafny.Rune> _545_genType;
                Dafny.ISequence<Dafny.Rune> _out160;
                _out160 = DCOMP.COMP.GenType(_544_o, false, false);
                _545_genType = _out160;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _545_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Array) {
              DAST._IType _546___mcc_h281 = _source24.dtor_element;
              BigInteger _547___mcc_h282 = _source24.dtor_dims;
              DAST._IType _548_o = _532_t;
              {
                Dafny.ISequence<Dafny.Rune> _549_genType;
                Dafny.ISequence<Dafny.Rune> _out161;
                _out161 = DCOMP.COMP.GenType(_548_o, false, false);
                _549_genType = _out161;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _549_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Seq) {
              DAST._IType _550___mcc_h285 = _source24.dtor_element;
              DAST._IType _551_o = _532_t;
              {
                Dafny.ISequence<Dafny.Rune> _552_genType;
                Dafny.ISequence<Dafny.Rune> _out162;
                _out162 = DCOMP.COMP.GenType(_551_o, false, false);
                _552_genType = _out162;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _552_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Set) {
              DAST._IType _553___mcc_h287 = _source24.dtor_element;
              DAST._IType _554_o = _532_t;
              {
                Dafny.ISequence<Dafny.Rune> _555_genType;
                Dafny.ISequence<Dafny.Rune> _out163;
                _out163 = DCOMP.COMP.GenType(_554_o, false, false);
                _555_genType = _out163;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _555_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Multiset) {
              DAST._IType _556___mcc_h289 = _source24.dtor_element;
              DAST._IType _557_o = _532_t;
              {
                Dafny.ISequence<Dafny.Rune> _558_genType;
                Dafny.ISequence<Dafny.Rune> _out164;
                _out164 = DCOMP.COMP.GenType(_557_o, false, false);
                _558_genType = _out164;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _558_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Map) {
              DAST._IType _559___mcc_h291 = _source24.dtor_key;
              DAST._IType _560___mcc_h292 = _source24.dtor_value;
              DAST._IType _561_o = _532_t;
              {
                Dafny.ISequence<Dafny.Rune> _562_genType;
                Dafny.ISequence<Dafny.Rune> _out165;
                _out165 = DCOMP.COMP.GenType(_561_o, false, false);
                _562_genType = _out165;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _562_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Arrow) {
              Dafny.ISequence<DAST._IType> _563___mcc_h295 = _source24.dtor_args;
              DAST._IType _564___mcc_h296 = _source24.dtor_result;
              DAST._IType _565_o = _532_t;
              {
                Dafny.ISequence<Dafny.Rune> _566_genType;
                Dafny.ISequence<Dafny.Rune> _out166;
                _out166 = DCOMP.COMP.GenType(_565_o, false, false);
                _566_genType = _out166;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _566_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Primitive) {
              DAST._IPrimitive _567___mcc_h299 = _source24.dtor_Primitive_a0;
              DAST._IPrimitive _source25 = _567___mcc_h299;
              if (_source25.is_Int) {
                DAST._IType _568_o = _532_t;
                {
                  Dafny.ISequence<Dafny.Rune> _569_genType;
                  Dafny.ISequence<Dafny.Rune> _out167;
                  _out167 = DCOMP.COMP.GenType(_568_o, false, false);
                  _569_genType = _out167;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _569_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source25.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source25.is_String) {
                DAST._IType _570_o = _532_t;
                {
                  Dafny.ISequence<Dafny.Rune> _571_genType;
                  Dafny.ISequence<Dafny.Rune> _out168;
                  _out168 = DCOMP.COMP.GenType(_570_o, false, false);
                  _571_genType = _out168;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _571_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source25.is_Bool) {
                DAST._IType _572_o = _532_t;
                {
                  Dafny.ISequence<Dafny.Rune> _573_genType;
                  Dafny.ISequence<Dafny.Rune> _out169;
                  _out169 = DCOMP.COMP.GenType(_572_o, false, false);
                  _573_genType = _out169;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _573_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _574_o = _532_t;
                {
                  Dafny.ISequence<Dafny.Rune> _575_genType;
                  Dafny.ISequence<Dafny.Rune> _out170;
                  _out170 = DCOMP.COMP.GenType(_574_o, false, false);
                  _575_genType = _out170;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _575_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source24.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _576___mcc_h301 = _source24.dtor_Passthrough_a0;
              DAST._IType _577_o = _532_t;
              {
                Dafny.ISequence<Dafny.Rune> _578_genType;
                Dafny.ISequence<Dafny.Rune> _out171;
                _out171 = DCOMP.COMP.GenType(_577_o, false, false);
                _578_genType = _out171;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _578_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _579___mcc_h303 = _source24.dtor_TypeArg_a0;
              DAST._IType _580_o = _532_t;
              {
                Dafny.ISequence<Dafny.Rune> _581_genType;
                Dafny.ISequence<Dafny.Rune> _out172;
                _out172 = DCOMP.COMP.GenType(_580_o, false, false);
                _581_genType = _out172;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _534_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _533_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _581_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _582___mcc_h7 = _source21.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _583_l = _582___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _583_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_CharLiteral) {
          Dafny.Rune _584___mcc_h8 = _source21.dtor_CharLiteral_a0;
          Dafny.Rune _585_c = _584___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_585_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _586___mcc_h9 = _source21.dtor_Null_a0;
          DAST._IType _587_tpe = _586___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _588_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out173;
            _out173 = DCOMP.COMP.GenType(_587_tpe, false, false);
            _588_tpeGen = _out173;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _588_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source20.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _589___mcc_h10 = _source20.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _590_name = _589___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_590_name);
          if (!((@params).Contains(_590_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_590_name);
        }
      } else if (_source20.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _591___mcc_h11 = _source20.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _592_path = _591___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out174;
          _out174 = DCOMP.COMP.GenPath(_592_path);
          s = _out174;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _593___mcc_h12 = _source20.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _594_values = _593___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _595_i;
          _595_i = BigInteger.Zero;
          while ((_595_i) < (new BigInteger((_594_values).Count))) {
            if ((_595_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _596_recursiveGen;
            bool _597___v31;
            bool _598_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _599_recIdents;
            Dafny.ISequence<Dafny.Rune> _out175;
            bool _out176;
            bool _out177;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out178;
            DCOMP.COMP.GenExpr((_594_values).Select(_595_i), selfIdent, @params, true, out _out175, out _out176, out _out177, out _out178);
            _596_recursiveGen = _out175;
            _597___v31 = _out176;
            _598_isErased = _out177;
            _599_recIdents = _out178;
            if (_598_isErased) {
              _596_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _596_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _596_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _599_recIdents);
            _595_i = (_595_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _600___mcc_h13 = _source20.dtor_path;
        Dafny.ISequence<DAST._IType> _601___mcc_h14 = _source20.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _602___mcc_h15 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _603_args = _602___mcc_h15;
        Dafny.ISequence<DAST._IType> _604_typeArgs = _601___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _605_path = _600___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _606_path;
          Dafny.ISequence<Dafny.Rune> _out179;
          _out179 = DCOMP.COMP.GenPath(_605_path);
          _606_path = _out179;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _606_path);
          if ((new BigInteger((_604_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _607_i;
            _607_i = BigInteger.Zero;
            while ((_607_i) < (new BigInteger((_604_typeArgs).Count))) {
              if ((_607_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _608_typeString;
              Dafny.ISequence<Dafny.Rune> _out180;
              _out180 = DCOMP.COMP.GenType((_604_typeArgs).Select(_607_i), false, false);
              _608_typeString = _out180;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _608_typeString);
              _607_i = (_607_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _609_i;
          _609_i = BigInteger.Zero;
          while ((_609_i) < (new BigInteger((_603_args).Count))) {
            if ((_609_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _610_recursiveGen;
            bool _611___v32;
            bool _612_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _613_recIdents;
            Dafny.ISequence<Dafny.Rune> _out181;
            bool _out182;
            bool _out183;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out184;
            DCOMP.COMP.GenExpr((_603_args).Select(_609_i), selfIdent, @params, true, out _out181, out _out182, out _out183, out _out184);
            _610_recursiveGen = _out181;
            _611___v32 = _out182;
            _612_isErased = _out183;
            _613_recIdents = _out184;
            if (_612_isErased) {
              _610_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _610_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _610_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _613_recIdents);
            _609_i = (_609_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source20.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _614___mcc_h16 = _source20.dtor_dims;
        DAST._IType _615___mcc_h17 = _source20.dtor_typ;
        DAST._IType _616_typ = _615___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _617_dims = _614___mcc_h16;
        {
          BigInteger _618_i;
          _618_i = (new BigInteger((_617_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _619_genTyp;
          Dafny.ISequence<Dafny.Rune> _out185;
          _out185 = DCOMP.COMP.GenType(_616_typ, false, false);
          _619_genTyp = _out185;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _619_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_618_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _620_recursiveGen;
            bool _621___v33;
            bool _622_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _623_recIdents;
            Dafny.ISequence<Dafny.Rune> _out186;
            bool _out187;
            bool _out188;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out189;
            DCOMP.COMP.GenExpr((_617_dims).Select(_618_i), selfIdent, @params, true, out _out186, out _out187, out _out188, out _out189);
            _620_recursiveGen = _out186;
            _621___v33 = _out187;
            _622_isErased = _out188;
            _623_recIdents = _out189;
            if (!(_622_isErased)) {
              _620_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _620_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _620_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _623_recIdents);
            _618_i = (_618_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _624___mcc_h18 = _source20.dtor_path;
        Dafny.ISequence<DAST._IType> _625___mcc_h19 = _source20.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _626___mcc_h20 = _source20.dtor_variant;
        bool _627___mcc_h21 = _source20.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _628___mcc_h22 = _source20.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _629_values = _628___mcc_h22;
        bool _630_isCo = _627___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _631_variant = _626___mcc_h20;
        Dafny.ISequence<DAST._IType> _632_typeArgs = _625___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _633_path = _624___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _634_path;
          Dafny.ISequence<Dafny.Rune> _out190;
          _out190 = DCOMP.COMP.GenPath(_633_path);
          _634_path = _out190;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _634_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_632_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _635_i;
            _635_i = BigInteger.Zero;
            while ((_635_i) < (new BigInteger((_632_typeArgs).Count))) {
              if ((_635_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _636_typeString;
              Dafny.ISequence<Dafny.Rune> _out191;
              _out191 = DCOMP.COMP.GenType((_632_typeArgs).Select(_635_i), false, false);
              _636_typeString = _out191;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _636_typeString);
              _635_i = (_635_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_631_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _637_i;
          _637_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_637_i) < (new BigInteger((_629_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs0 = (_629_values).Select(_637_i);
            Dafny.ISequence<Dafny.Rune> _638_name = _let_tmp_rhs0.dtor__0;
            DAST._IExpression _639_value = _let_tmp_rhs0.dtor__1;
            if ((_637_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_630_isCo) {
              Dafny.ISequence<Dafny.Rune> _640_recursiveGen;
              bool _641___v34;
              bool _642_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _643_recIdents;
              Dafny.ISequence<Dafny.Rune> _out192;
              bool _out193;
              bool _out194;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out195;
              DCOMP.COMP.GenExpr(_639_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out192, out _out193, out _out194, out _out195);
              _640_recursiveGen = _out192;
              _641___v34 = _out193;
              _642_isErased = _out194;
              _643_recIdents = _out195;
              if (!(_642_isErased)) {
                _640_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _640_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _640_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _640_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _643_recIdents);
              Dafny.ISequence<Dafny.Rune> _644_allReadCloned;
              _644_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_643_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _645_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_643_recIdents).Elements) {
                  _645_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_643_recIdents).Contains(_645_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_0:;
                _644_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_644_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_645_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_645_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _643_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_643_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_645_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_638_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _644_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _640_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _646_recursiveGen;
              bool _647___v35;
              bool _648_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _649_recIdents;
              Dafny.ISequence<Dafny.Rune> _out196;
              bool _out197;
              bool _out198;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
              DCOMP.COMP.GenExpr(_639_value, selfIdent, @params, true, out _out196, out _out197, out _out198, out _out199);
              _646_recursiveGen = _out196;
              _647___v35 = _out197;
              _648_isErased = _out198;
              _649_recIdents = _out199;
              if (!(_648_isErased)) {
                _646_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _646_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_638_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _649_recIdents);
            }
            _637_i = (_637_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_Convert) {
        DAST._IExpression _650___mcc_h23 = _source20.dtor_value;
        DAST._IType _651___mcc_h24 = _source20.dtor_from;
        DAST._IType _652___mcc_h25 = _source20.dtor_typ;
        DAST._IType _653_toTpe = _652___mcc_h25;
        DAST._IType _654_fromTpe = _651___mcc_h24;
        DAST._IExpression _655_expr = _650___mcc_h23;
        {
          if (object.Equals(_654_fromTpe, _653_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _656_recursiveGen;
            bool _657_recOwned;
            bool _658_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _659_recIdents;
            Dafny.ISequence<Dafny.Rune> _out200;
            bool _out201;
            bool _out202;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out203;
            DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out200, out _out201, out _out202, out _out203);
            _656_recursiveGen = _out200;
            _657_recOwned = _out201;
            _658_recErased = _out202;
            _659_recIdents = _out203;
            s = _656_recursiveGen;
            isOwned = _657_recOwned;
            isErased = _658_recErased;
            readIdents = _659_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source26 = _System.Tuple2<DAST._IType, DAST._IType>.create(_654_fromTpe, _653_toTpe);
            DAST._IType _660___mcc_h305 = _source26.dtor__0;
            DAST._IType _661___mcc_h306 = _source26.dtor__1;
            DAST._IType _source27 = _660___mcc_h305;
            if (_source27.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _662___mcc_h309 = _source27.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _663___mcc_h310 = _source27.dtor_typeArgs;
              DAST._IResolvedType _664___mcc_h311 = _source27.dtor_resolved;
              DAST._IResolvedType _source28 = _664___mcc_h311;
              if (_source28.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _665___mcc_h321 = _source28.dtor_path;
                DAST._IType _source29 = _661___mcc_h306;
                if (_source29.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _666___mcc_h325 = _source29.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _667___mcc_h326 = _source29.dtor_typeArgs;
                  DAST._IResolvedType _668___mcc_h327 = _source29.dtor_resolved;
                  DAST._IResolvedType _source30 = _668___mcc_h327;
                  if (_source30.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _669___mcc_h331 = _source30.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _670_recursiveGen;
                      bool _671_recOwned;
                      bool _672_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _673_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out204;
                      bool _out205;
                      bool _out206;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out207;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out204, out _out205, out _out206, out _out207);
                      _670_recursiveGen = _out204;
                      _671_recOwned = _out205;
                      _672_recErased = _out206;
                      _673_recIdents = _out207;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _670_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _671_recOwned;
                      isErased = _672_recErased;
                      readIdents = _673_recIdents;
                    }
                  } else if (_source30.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _674___mcc_h333 = _source30.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _675_recursiveGen;
                      bool _676_recOwned;
                      bool _677_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _678_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out208;
                      bool _out209;
                      bool _out210;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out211;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out208, out _out209, out _out210, out _out211);
                      _675_recursiveGen = _out208;
                      _676_recOwned = _out209;
                      _677_recErased = _out210;
                      _678_recIdents = _out211;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _675_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _676_recOwned;
                      isErased = _677_recErased;
                      readIdents = _678_recIdents;
                    }
                  } else {
                    DAST._IType _679___mcc_h335 = _source30.dtor_Newtype_a0;
                    DAST._IType _680_b = _679___mcc_h335;
                    {
                      if (object.Equals(_654_fromTpe, _680_b)) {
                        Dafny.ISequence<Dafny.Rune> _681_recursiveGen;
                        bool _682_recOwned;
                        bool _683_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _684_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out212;
                        bool _out213;
                        bool _out214;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out215;
                        DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out212, out _out213, out _out214, out _out215);
                        _681_recursiveGen = _out212;
                        _682_recOwned = _out213;
                        _683_recErased = _out214;
                        _684_recIdents = _out215;
                        Dafny.ISequence<Dafny.Rune> _685_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out216;
                        _out216 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                        _685_rhsType = _out216;
                        Dafny.ISequence<Dafny.Rune> _686_uneraseFn;
                        _686_uneraseFn = ((_682_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _685_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _686_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _681_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _682_recOwned;
                        isErased = false;
                        readIdents = _684_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out217;
                        bool _out218;
                        bool _out219;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out220;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _680_b), _680_b, _653_toTpe), selfIdent, @params, mustOwn, out _out217, out _out218, out _out219, out _out220);
                        s = _out217;
                        isOwned = _out218;
                        isErased = _out219;
                        readIdents = _out220;
                      }
                    }
                  }
                } else if (_source29.is_Nullable) {
                  DAST._IType _687___mcc_h337 = _source29.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _688_recursiveGen;
                    bool _689_recOwned;
                    bool _690_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _691_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out221;
                    bool _out222;
                    bool _out223;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out224;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out221, out _out222, out _out223, out _out224);
                    _688_recursiveGen = _out221;
                    _689_recOwned = _out222;
                    _690_recErased = _out223;
                    _691_recIdents = _out224;
                    if (!(_689_recOwned)) {
                      _688_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_688_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _688_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _690_recErased;
                    readIdents = _691_recIdents;
                  }
                } else if (_source29.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _692___mcc_h339 = _source29.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _693_recursiveGen;
                    bool _694_recOwned;
                    bool _695_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _696_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out225;
                    bool _out226;
                    bool _out227;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out228;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out225, out _out226, out _out227, out _out228);
                    _693_recursiveGen = _out225;
                    _694_recOwned = _out226;
                    _695_recErased = _out227;
                    _696_recIdents = _out228;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _693_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _694_recOwned;
                    isErased = _695_recErased;
                    readIdents = _696_recIdents;
                  }
                } else if (_source29.is_Array) {
                  DAST._IType _697___mcc_h341 = _source29.dtor_element;
                  BigInteger _698___mcc_h342 = _source29.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _699_recursiveGen;
                    bool _700_recOwned;
                    bool _701_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _702_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out229;
                    bool _out230;
                    bool _out231;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out232;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out229, out _out230, out _out231, out _out232);
                    _699_recursiveGen = _out229;
                    _700_recOwned = _out230;
                    _701_recErased = _out231;
                    _702_recIdents = _out232;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _699_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _700_recOwned;
                    isErased = _701_recErased;
                    readIdents = _702_recIdents;
                  }
                } else if (_source29.is_Seq) {
                  DAST._IType _703___mcc_h345 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _704_recursiveGen;
                    bool _705_recOwned;
                    bool _706_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _707_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out233;
                    bool _out234;
                    bool _out235;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out236;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out233, out _out234, out _out235, out _out236);
                    _704_recursiveGen = _out233;
                    _705_recOwned = _out234;
                    _706_recErased = _out235;
                    _707_recIdents = _out236;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _704_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _705_recOwned;
                    isErased = _706_recErased;
                    readIdents = _707_recIdents;
                  }
                } else if (_source29.is_Set) {
                  DAST._IType _708___mcc_h347 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _709_recursiveGen;
                    bool _710_recOwned;
                    bool _711_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _712_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out237;
                    bool _out238;
                    bool _out239;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out240;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out237, out _out238, out _out239, out _out240);
                    _709_recursiveGen = _out237;
                    _710_recOwned = _out238;
                    _711_recErased = _out239;
                    _712_recIdents = _out240;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _709_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _710_recOwned;
                    isErased = _711_recErased;
                    readIdents = _712_recIdents;
                  }
                } else if (_source29.is_Multiset) {
                  DAST._IType _713___mcc_h349 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _714_recursiveGen;
                    bool _715_recOwned;
                    bool _716_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _717_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out241;
                    bool _out242;
                    bool _out243;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out244;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out241, out _out242, out _out243, out _out244);
                    _714_recursiveGen = _out241;
                    _715_recOwned = _out242;
                    _716_recErased = _out243;
                    _717_recIdents = _out244;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _714_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _715_recOwned;
                    isErased = _716_recErased;
                    readIdents = _717_recIdents;
                  }
                } else if (_source29.is_Map) {
                  DAST._IType _718___mcc_h351 = _source29.dtor_key;
                  DAST._IType _719___mcc_h352 = _source29.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _720_recursiveGen;
                    bool _721_recOwned;
                    bool _722_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _723_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out245;
                    bool _out246;
                    bool _out247;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out248;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out245, out _out246, out _out247, out _out248);
                    _720_recursiveGen = _out245;
                    _721_recOwned = _out246;
                    _722_recErased = _out247;
                    _723_recIdents = _out248;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _720_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _721_recOwned;
                    isErased = _722_recErased;
                    readIdents = _723_recIdents;
                  }
                } else if (_source29.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _724___mcc_h355 = _source29.dtor_args;
                  DAST._IType _725___mcc_h356 = _source29.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _726_recursiveGen;
                    bool _727_recOwned;
                    bool _728_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _729_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out249;
                    bool _out250;
                    bool _out251;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out252;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out249, out _out250, out _out251, out _out252);
                    _726_recursiveGen = _out249;
                    _727_recOwned = _out250;
                    _728_recErased = _out251;
                    _729_recIdents = _out252;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _726_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _727_recOwned;
                    isErased = _728_recErased;
                    readIdents = _729_recIdents;
                  }
                } else if (_source29.is_Primitive) {
                  DAST._IPrimitive _730___mcc_h359 = _source29.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _731_recursiveGen;
                    bool _732_recOwned;
                    bool _733_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _734_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out253;
                    bool _out254;
                    bool _out255;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out256;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out253, out _out254, out _out255, out _out256);
                    _731_recursiveGen = _out253;
                    _732_recOwned = _out254;
                    _733_recErased = _out255;
                    _734_recIdents = _out256;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _732_recOwned;
                    isErased = _733_recErased;
                    readIdents = _734_recIdents;
                  }
                } else if (_source29.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _735___mcc_h361 = _source29.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _736_recursiveGen;
                    bool _737_recOwned;
                    bool _738_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _739_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out257;
                    bool _out258;
                    bool _out259;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out260;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out257, out _out258, out _out259, out _out260);
                    _736_recursiveGen = _out257;
                    _737_recOwned = _out258;
                    _738_recErased = _out259;
                    _739_recIdents = _out260;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _736_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _737_recOwned;
                    isErased = _738_recErased;
                    readIdents = _739_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _740___mcc_h363 = _source29.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _741_recursiveGen;
                    bool _742_recOwned;
                    bool _743_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _744_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out261;
                    bool _out262;
                    bool _out263;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out264;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out261, out _out262, out _out263, out _out264);
                    _741_recursiveGen = _out261;
                    _742_recOwned = _out262;
                    _743_recErased = _out263;
                    _744_recIdents = _out264;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _741_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _742_recOwned;
                    isErased = _743_recErased;
                    readIdents = _744_recIdents;
                  }
                }
              } else if (_source28.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _745___mcc_h365 = _source28.dtor_path;
                DAST._IType _source31 = _661___mcc_h306;
                if (_source31.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _746___mcc_h369 = _source31.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _747___mcc_h370 = _source31.dtor_typeArgs;
                  DAST._IResolvedType _748___mcc_h371 = _source31.dtor_resolved;
                  DAST._IResolvedType _source32 = _748___mcc_h371;
                  if (_source32.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _749___mcc_h375 = _source32.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _750_recursiveGen;
                      bool _751_recOwned;
                      bool _752_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _753_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out265;
                      bool _out266;
                      bool _out267;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out268;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out265, out _out266, out _out267, out _out268);
                      _750_recursiveGen = _out265;
                      _751_recOwned = _out266;
                      _752_recErased = _out267;
                      _753_recIdents = _out268;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _750_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _751_recOwned;
                      isErased = _752_recErased;
                      readIdents = _753_recIdents;
                    }
                  } else if (_source32.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _754___mcc_h377 = _source32.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _755_recursiveGen;
                      bool _756_recOwned;
                      bool _757_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _758_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out269;
                      bool _out270;
                      bool _out271;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out272;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out269, out _out270, out _out271, out _out272);
                      _755_recursiveGen = _out269;
                      _756_recOwned = _out270;
                      _757_recErased = _out271;
                      _758_recIdents = _out272;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _755_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _756_recOwned;
                      isErased = _757_recErased;
                      readIdents = _758_recIdents;
                    }
                  } else {
                    DAST._IType _759___mcc_h379 = _source32.dtor_Newtype_a0;
                    DAST._IType _760_b = _759___mcc_h379;
                    {
                      if (object.Equals(_654_fromTpe, _760_b)) {
                        Dafny.ISequence<Dafny.Rune> _761_recursiveGen;
                        bool _762_recOwned;
                        bool _763_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _764_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out273;
                        bool _out274;
                        bool _out275;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out276;
                        DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out273, out _out274, out _out275, out _out276);
                        _761_recursiveGen = _out273;
                        _762_recOwned = _out274;
                        _763_recErased = _out275;
                        _764_recIdents = _out276;
                        Dafny.ISequence<Dafny.Rune> _765_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out277;
                        _out277 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                        _765_rhsType = _out277;
                        Dafny.ISequence<Dafny.Rune> _766_uneraseFn;
                        _766_uneraseFn = ((_762_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _765_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _766_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _761_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _762_recOwned;
                        isErased = false;
                        readIdents = _764_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out278;
                        bool _out279;
                        bool _out280;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out281;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _760_b), _760_b, _653_toTpe), selfIdent, @params, mustOwn, out _out278, out _out279, out _out280, out _out281);
                        s = _out278;
                        isOwned = _out279;
                        isErased = _out280;
                        readIdents = _out281;
                      }
                    }
                  }
                } else if (_source31.is_Nullable) {
                  DAST._IType _767___mcc_h381 = _source31.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _768_recursiveGen;
                    bool _769_recOwned;
                    bool _770_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _771_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out282;
                    bool _out283;
                    bool _out284;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out285;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out282, out _out283, out _out284, out _out285);
                    _768_recursiveGen = _out282;
                    _769_recOwned = _out283;
                    _770_recErased = _out284;
                    _771_recIdents = _out285;
                    if (!(_769_recOwned)) {
                      _768_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_768_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _768_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _770_recErased;
                    readIdents = _771_recIdents;
                  }
                } else if (_source31.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _772___mcc_h383 = _source31.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _773_recursiveGen;
                    bool _774_recOwned;
                    bool _775_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _776_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out286;
                    bool _out287;
                    bool _out288;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out289;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out286, out _out287, out _out288, out _out289);
                    _773_recursiveGen = _out286;
                    _774_recOwned = _out287;
                    _775_recErased = _out288;
                    _776_recIdents = _out289;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _773_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _774_recOwned;
                    isErased = _775_recErased;
                    readIdents = _776_recIdents;
                  }
                } else if (_source31.is_Array) {
                  DAST._IType _777___mcc_h385 = _source31.dtor_element;
                  BigInteger _778___mcc_h386 = _source31.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _779_recursiveGen;
                    bool _780_recOwned;
                    bool _781_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _782_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out290;
                    bool _out291;
                    bool _out292;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out293;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out290, out _out291, out _out292, out _out293);
                    _779_recursiveGen = _out290;
                    _780_recOwned = _out291;
                    _781_recErased = _out292;
                    _782_recIdents = _out293;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _779_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _780_recOwned;
                    isErased = _781_recErased;
                    readIdents = _782_recIdents;
                  }
                } else if (_source31.is_Seq) {
                  DAST._IType _783___mcc_h389 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _784_recursiveGen;
                    bool _785_recOwned;
                    bool _786_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _787_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out294;
                    bool _out295;
                    bool _out296;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out297;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out294, out _out295, out _out296, out _out297);
                    _784_recursiveGen = _out294;
                    _785_recOwned = _out295;
                    _786_recErased = _out296;
                    _787_recIdents = _out297;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _784_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _785_recOwned;
                    isErased = _786_recErased;
                    readIdents = _787_recIdents;
                  }
                } else if (_source31.is_Set) {
                  DAST._IType _788___mcc_h391 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _789_recursiveGen;
                    bool _790_recOwned;
                    bool _791_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _792_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out298;
                    bool _out299;
                    bool _out300;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out301;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out298, out _out299, out _out300, out _out301);
                    _789_recursiveGen = _out298;
                    _790_recOwned = _out299;
                    _791_recErased = _out300;
                    _792_recIdents = _out301;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _789_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _790_recOwned;
                    isErased = _791_recErased;
                    readIdents = _792_recIdents;
                  }
                } else if (_source31.is_Multiset) {
                  DAST._IType _793___mcc_h393 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _794_recursiveGen;
                    bool _795_recOwned;
                    bool _796_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _797_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out302;
                    bool _out303;
                    bool _out304;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out305;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out302, out _out303, out _out304, out _out305);
                    _794_recursiveGen = _out302;
                    _795_recOwned = _out303;
                    _796_recErased = _out304;
                    _797_recIdents = _out305;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _794_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _795_recOwned;
                    isErased = _796_recErased;
                    readIdents = _797_recIdents;
                  }
                } else if (_source31.is_Map) {
                  DAST._IType _798___mcc_h395 = _source31.dtor_key;
                  DAST._IType _799___mcc_h396 = _source31.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _800_recursiveGen;
                    bool _801_recOwned;
                    bool _802_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _803_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out306;
                    bool _out307;
                    bool _out308;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out309;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out306, out _out307, out _out308, out _out309);
                    _800_recursiveGen = _out306;
                    _801_recOwned = _out307;
                    _802_recErased = _out308;
                    _803_recIdents = _out309;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _800_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _801_recOwned;
                    isErased = _802_recErased;
                    readIdents = _803_recIdents;
                  }
                } else if (_source31.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _804___mcc_h399 = _source31.dtor_args;
                  DAST._IType _805___mcc_h400 = _source31.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _806_recursiveGen;
                    bool _807_recOwned;
                    bool _808_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _809_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out310;
                    bool _out311;
                    bool _out312;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out313;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out310, out _out311, out _out312, out _out313);
                    _806_recursiveGen = _out310;
                    _807_recOwned = _out311;
                    _808_recErased = _out312;
                    _809_recIdents = _out313;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _806_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _807_recOwned;
                    isErased = _808_recErased;
                    readIdents = _809_recIdents;
                  }
                } else if (_source31.is_Primitive) {
                  DAST._IPrimitive _810___mcc_h403 = _source31.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _811_recursiveGen;
                    bool _812_recOwned;
                    bool _813_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _814_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out314;
                    bool _out315;
                    bool _out316;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out317;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out314, out _out315, out _out316, out _out317);
                    _811_recursiveGen = _out314;
                    _812_recOwned = _out315;
                    _813_recErased = _out316;
                    _814_recIdents = _out317;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _811_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _812_recOwned;
                    isErased = _813_recErased;
                    readIdents = _814_recIdents;
                  }
                } else if (_source31.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _815___mcc_h405 = _source31.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _816_recursiveGen;
                    bool _817_recOwned;
                    bool _818_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _819_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out318;
                    bool _out319;
                    bool _out320;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out321;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out318, out _out319, out _out320, out _out321);
                    _816_recursiveGen = _out318;
                    _817_recOwned = _out319;
                    _818_recErased = _out320;
                    _819_recIdents = _out321;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _816_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _817_recOwned;
                    isErased = _818_recErased;
                    readIdents = _819_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _820___mcc_h407 = _source31.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _821_recursiveGen;
                    bool _822_recOwned;
                    bool _823_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _824_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out322;
                    bool _out323;
                    bool _out324;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out325;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out322, out _out323, out _out324, out _out325);
                    _821_recursiveGen = _out322;
                    _822_recOwned = _out323;
                    _823_recErased = _out324;
                    _824_recIdents = _out325;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _821_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _822_recOwned;
                    isErased = _823_recErased;
                    readIdents = _824_recIdents;
                  }
                }
              } else {
                DAST._IType _825___mcc_h409 = _source28.dtor_Newtype_a0;
                DAST._IType _source33 = _661___mcc_h306;
                if (_source33.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _826___mcc_h413 = _source33.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _827___mcc_h414 = _source33.dtor_typeArgs;
                  DAST._IResolvedType _828___mcc_h415 = _source33.dtor_resolved;
                  DAST._IResolvedType _source34 = _828___mcc_h415;
                  if (_source34.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _829___mcc_h422 = _source34.dtor_path;
                    DAST._IType _830_b = _825___mcc_h409;
                    {
                      if (object.Equals(_830_b, _653_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _831_recursiveGen;
                        bool _832_recOwned;
                        bool _833_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _834_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out326;
                        bool _out327;
                        bool _out328;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out329;
                        DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out326, out _out327, out _out328, out _out329);
                        _831_recursiveGen = _out326;
                        _832_recOwned = _out327;
                        _833_recErased = _out328;
                        _834_recIdents = _out329;
                        Dafny.ISequence<Dafny.Rune> _835_uneraseFn;
                        _835_uneraseFn = ((_832_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _835_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _831_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _832_recOwned;
                        isErased = true;
                        readIdents = _834_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out330;
                        bool _out331;
                        bool _out332;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out333;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _830_b), _830_b, _653_toTpe), selfIdent, @params, mustOwn, out _out330, out _out331, out _out332, out _out333);
                        s = _out330;
                        isOwned = _out331;
                        isErased = _out332;
                        readIdents = _out333;
                      }
                    }
                  } else if (_source34.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _836___mcc_h425 = _source34.dtor_path;
                    DAST._IType _837_b = _825___mcc_h409;
                    {
                      if (object.Equals(_837_b, _653_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _838_recursiveGen;
                        bool _839_recOwned;
                        bool _840_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _841_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out334;
                        bool _out335;
                        bool _out336;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out337;
                        DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out334, out _out335, out _out336, out _out337);
                        _838_recursiveGen = _out334;
                        _839_recOwned = _out335;
                        _840_recErased = _out336;
                        _841_recIdents = _out337;
                        Dafny.ISequence<Dafny.Rune> _842_uneraseFn;
                        _842_uneraseFn = ((_839_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _842_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _838_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _839_recOwned;
                        isErased = true;
                        readIdents = _841_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out338;
                        bool _out339;
                        bool _out340;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out341;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _837_b), _837_b, _653_toTpe), selfIdent, @params, mustOwn, out _out338, out _out339, out _out340, out _out341);
                        s = _out338;
                        isOwned = _out339;
                        isErased = _out340;
                        readIdents = _out341;
                      }
                    }
                  } else {
                    DAST._IType _843___mcc_h428 = _source34.dtor_Newtype_a0;
                    DAST._IType _844_b = _843___mcc_h428;
                    {
                      if (object.Equals(_654_fromTpe, _844_b)) {
                        Dafny.ISequence<Dafny.Rune> _845_recursiveGen;
                        bool _846_recOwned;
                        bool _847_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _848_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out342;
                        bool _out343;
                        bool _out344;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out345;
                        DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out342, out _out343, out _out344, out _out345);
                        _845_recursiveGen = _out342;
                        _846_recOwned = _out343;
                        _847_recErased = _out344;
                        _848_recIdents = _out345;
                        Dafny.ISequence<Dafny.Rune> _849_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out346;
                        _out346 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                        _849_rhsType = _out346;
                        Dafny.ISequence<Dafny.Rune> _850_uneraseFn;
                        _850_uneraseFn = ((_846_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _849_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _850_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _845_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _846_recOwned;
                        isErased = false;
                        readIdents = _848_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out347;
                        bool _out348;
                        bool _out349;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out350;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _844_b), _844_b, _653_toTpe), selfIdent, @params, mustOwn, out _out347, out _out348, out _out349, out _out350);
                        s = _out347;
                        isOwned = _out348;
                        isErased = _out349;
                        readIdents = _out350;
                      }
                    }
                  }
                } else if (_source33.is_Nullable) {
                  DAST._IType _851___mcc_h431 = _source33.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _852_recursiveGen;
                    bool _853_recOwned;
                    bool _854_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _855_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out351;
                    bool _out352;
                    bool _out353;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out354;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out351, out _out352, out _out353, out _out354);
                    _852_recursiveGen = _out351;
                    _853_recOwned = _out352;
                    _854_recErased = _out353;
                    _855_recIdents = _out354;
                    if (!(_853_recOwned)) {
                      _852_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_852_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _852_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _854_recErased;
                    readIdents = _855_recIdents;
                  }
                } else if (_source33.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _856___mcc_h434 = _source33.dtor_Tuple_a0;
                  DAST._IType _857_b = _825___mcc_h409;
                  {
                    if (object.Equals(_857_b, _653_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _858_recursiveGen;
                      bool _859_recOwned;
                      bool _860_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _861_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out355;
                      bool _out356;
                      bool _out357;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out358;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out355, out _out356, out _out357, out _out358);
                      _858_recursiveGen = _out355;
                      _859_recOwned = _out356;
                      _860_recErased = _out357;
                      _861_recIdents = _out358;
                      Dafny.ISequence<Dafny.Rune> _862_uneraseFn;
                      _862_uneraseFn = ((_859_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _862_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _858_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _859_recOwned;
                      isErased = true;
                      readIdents = _861_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out359;
                      bool _out360;
                      bool _out361;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out362;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _857_b), _857_b, _653_toTpe), selfIdent, @params, mustOwn, out _out359, out _out360, out _out361, out _out362);
                      s = _out359;
                      isOwned = _out360;
                      isErased = _out361;
                      readIdents = _out362;
                    }
                  }
                } else if (_source33.is_Array) {
                  DAST._IType _863___mcc_h437 = _source33.dtor_element;
                  BigInteger _864___mcc_h438 = _source33.dtor_dims;
                  DAST._IType _865_b = _825___mcc_h409;
                  {
                    if (object.Equals(_865_b, _653_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _866_recursiveGen;
                      bool _867_recOwned;
                      bool _868_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _869_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out363;
                      bool _out364;
                      bool _out365;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out366;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out363, out _out364, out _out365, out _out366);
                      _866_recursiveGen = _out363;
                      _867_recOwned = _out364;
                      _868_recErased = _out365;
                      _869_recIdents = _out366;
                      Dafny.ISequence<Dafny.Rune> _870_uneraseFn;
                      _870_uneraseFn = ((_867_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _870_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _866_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _867_recOwned;
                      isErased = true;
                      readIdents = _869_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out367;
                      bool _out368;
                      bool _out369;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out370;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _865_b), _865_b, _653_toTpe), selfIdent, @params, mustOwn, out _out367, out _out368, out _out369, out _out370);
                      s = _out367;
                      isOwned = _out368;
                      isErased = _out369;
                      readIdents = _out370;
                    }
                  }
                } else if (_source33.is_Seq) {
                  DAST._IType _871___mcc_h443 = _source33.dtor_element;
                  DAST._IType _872_b = _825___mcc_h409;
                  {
                    if (object.Equals(_872_b, _653_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _873_recursiveGen;
                      bool _874_recOwned;
                      bool _875_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _876_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out371;
                      bool _out372;
                      bool _out373;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out374;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out371, out _out372, out _out373, out _out374);
                      _873_recursiveGen = _out371;
                      _874_recOwned = _out372;
                      _875_recErased = _out373;
                      _876_recIdents = _out374;
                      Dafny.ISequence<Dafny.Rune> _877_uneraseFn;
                      _877_uneraseFn = ((_874_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _877_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _873_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _874_recOwned;
                      isErased = true;
                      readIdents = _876_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out375;
                      bool _out376;
                      bool _out377;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out378;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _872_b), _872_b, _653_toTpe), selfIdent, @params, mustOwn, out _out375, out _out376, out _out377, out _out378);
                      s = _out375;
                      isOwned = _out376;
                      isErased = _out377;
                      readIdents = _out378;
                    }
                  }
                } else if (_source33.is_Set) {
                  DAST._IType _878___mcc_h446 = _source33.dtor_element;
                  DAST._IType _879_b = _825___mcc_h409;
                  {
                    if (object.Equals(_879_b, _653_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _880_recursiveGen;
                      bool _881_recOwned;
                      bool _882_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _883_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out379;
                      bool _out380;
                      bool _out381;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out382;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out379, out _out380, out _out381, out _out382);
                      _880_recursiveGen = _out379;
                      _881_recOwned = _out380;
                      _882_recErased = _out381;
                      _883_recIdents = _out382;
                      Dafny.ISequence<Dafny.Rune> _884_uneraseFn;
                      _884_uneraseFn = ((_881_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _884_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _880_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _881_recOwned;
                      isErased = true;
                      readIdents = _883_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out383;
                      bool _out384;
                      bool _out385;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out386;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _879_b), _879_b, _653_toTpe), selfIdent, @params, mustOwn, out _out383, out _out384, out _out385, out _out386);
                      s = _out383;
                      isOwned = _out384;
                      isErased = _out385;
                      readIdents = _out386;
                    }
                  }
                } else if (_source33.is_Multiset) {
                  DAST._IType _885___mcc_h449 = _source33.dtor_element;
                  DAST._IType _886_b = _825___mcc_h409;
                  {
                    if (object.Equals(_886_b, _653_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _887_recursiveGen;
                      bool _888_recOwned;
                      bool _889_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _890_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out387;
                      bool _out388;
                      bool _out389;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out390;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out387, out _out388, out _out389, out _out390);
                      _887_recursiveGen = _out387;
                      _888_recOwned = _out388;
                      _889_recErased = _out389;
                      _890_recIdents = _out390;
                      Dafny.ISequence<Dafny.Rune> _891_uneraseFn;
                      _891_uneraseFn = ((_888_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _891_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _887_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _888_recOwned;
                      isErased = true;
                      readIdents = _890_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out391;
                      bool _out392;
                      bool _out393;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out394;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _886_b), _886_b, _653_toTpe), selfIdent, @params, mustOwn, out _out391, out _out392, out _out393, out _out394);
                      s = _out391;
                      isOwned = _out392;
                      isErased = _out393;
                      readIdents = _out394;
                    }
                  }
                } else if (_source33.is_Map) {
                  DAST._IType _892___mcc_h452 = _source33.dtor_key;
                  DAST._IType _893___mcc_h453 = _source33.dtor_value;
                  DAST._IType _894_b = _825___mcc_h409;
                  {
                    if (object.Equals(_894_b, _653_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _895_recursiveGen;
                      bool _896_recOwned;
                      bool _897_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _898_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out395;
                      bool _out396;
                      bool _out397;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out398;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out395, out _out396, out _out397, out _out398);
                      _895_recursiveGen = _out395;
                      _896_recOwned = _out396;
                      _897_recErased = _out397;
                      _898_recIdents = _out398;
                      Dafny.ISequence<Dafny.Rune> _899_uneraseFn;
                      _899_uneraseFn = ((_896_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _899_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _895_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _896_recOwned;
                      isErased = true;
                      readIdents = _898_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out399;
                      bool _out400;
                      bool _out401;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out402;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _894_b), _894_b, _653_toTpe), selfIdent, @params, mustOwn, out _out399, out _out400, out _out401, out _out402);
                      s = _out399;
                      isOwned = _out400;
                      isErased = _out401;
                      readIdents = _out402;
                    }
                  }
                } else if (_source33.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _900___mcc_h458 = _source33.dtor_args;
                  DAST._IType _901___mcc_h459 = _source33.dtor_result;
                  DAST._IType _902_b = _825___mcc_h409;
                  {
                    if (object.Equals(_902_b, _653_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _903_recursiveGen;
                      bool _904_recOwned;
                      bool _905_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _906_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out403;
                      bool _out404;
                      bool _out405;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out406;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out403, out _out404, out _out405, out _out406);
                      _903_recursiveGen = _out403;
                      _904_recOwned = _out404;
                      _905_recErased = _out405;
                      _906_recIdents = _out406;
                      Dafny.ISequence<Dafny.Rune> _907_uneraseFn;
                      _907_uneraseFn = ((_904_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _907_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _903_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _904_recOwned;
                      isErased = true;
                      readIdents = _906_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out407;
                      bool _out408;
                      bool _out409;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out410;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _902_b), _902_b, _653_toTpe), selfIdent, @params, mustOwn, out _out407, out _out408, out _out409, out _out410);
                      s = _out407;
                      isOwned = _out408;
                      isErased = _out409;
                      readIdents = _out410;
                    }
                  }
                } else if (_source33.is_Primitive) {
                  DAST._IPrimitive _908___mcc_h464 = _source33.dtor_Primitive_a0;
                  DAST._IType _909_b = _825___mcc_h409;
                  {
                    if (object.Equals(_909_b, _653_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _910_recursiveGen;
                      bool _911_recOwned;
                      bool _912_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _913_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out411;
                      bool _out412;
                      bool _out413;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out414;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out411, out _out412, out _out413, out _out414);
                      _910_recursiveGen = _out411;
                      _911_recOwned = _out412;
                      _912_recErased = _out413;
                      _913_recIdents = _out414;
                      Dafny.ISequence<Dafny.Rune> _914_uneraseFn;
                      _914_uneraseFn = ((_911_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _914_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _910_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _911_recOwned;
                      isErased = true;
                      readIdents = _913_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out415;
                      bool _out416;
                      bool _out417;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out418;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _909_b), _909_b, _653_toTpe), selfIdent, @params, mustOwn, out _out415, out _out416, out _out417, out _out418);
                      s = _out415;
                      isOwned = _out416;
                      isErased = _out417;
                      readIdents = _out418;
                    }
                  }
                } else if (_source33.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _915___mcc_h467 = _source33.dtor_Passthrough_a0;
                  DAST._IType _916_b = _825___mcc_h409;
                  {
                    if (object.Equals(_916_b, _653_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _917_recursiveGen;
                      bool _918_recOwned;
                      bool _919_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _920_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out419;
                      bool _out420;
                      bool _out421;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out422;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out419, out _out420, out _out421, out _out422);
                      _917_recursiveGen = _out419;
                      _918_recOwned = _out420;
                      _919_recErased = _out421;
                      _920_recIdents = _out422;
                      Dafny.ISequence<Dafny.Rune> _921_uneraseFn;
                      _921_uneraseFn = ((_918_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _921_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _917_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _918_recOwned;
                      isErased = true;
                      readIdents = _920_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out423;
                      bool _out424;
                      bool _out425;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out426;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _916_b), _916_b, _653_toTpe), selfIdent, @params, mustOwn, out _out423, out _out424, out _out425, out _out426);
                      s = _out423;
                      isOwned = _out424;
                      isErased = _out425;
                      readIdents = _out426;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _922___mcc_h470 = _source33.dtor_TypeArg_a0;
                  DAST._IType _923_b = _825___mcc_h409;
                  {
                    if (object.Equals(_923_b, _653_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _924_recursiveGen;
                      bool _925_recOwned;
                      bool _926_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _927_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out427;
                      bool _out428;
                      bool _out429;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out430;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out427, out _out428, out _out429, out _out430);
                      _924_recursiveGen = _out427;
                      _925_recOwned = _out428;
                      _926_recErased = _out429;
                      _927_recIdents = _out430;
                      Dafny.ISequence<Dafny.Rune> _928_uneraseFn;
                      _928_uneraseFn = ((_925_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _928_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _924_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _925_recOwned;
                      isErased = true;
                      readIdents = _927_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out431;
                      bool _out432;
                      bool _out433;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out434;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _923_b), _923_b, _653_toTpe), selfIdent, @params, mustOwn, out _out431, out _out432, out _out433, out _out434);
                      s = _out431;
                      isOwned = _out432;
                      isErased = _out433;
                      readIdents = _out434;
                    }
                  }
                }
              }
            } else if (_source27.is_Nullable) {
              DAST._IType _929___mcc_h473 = _source27.dtor_Nullable_a0;
              DAST._IType _source35 = _661___mcc_h306;
              if (_source35.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _930___mcc_h477 = _source35.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _931___mcc_h478 = _source35.dtor_typeArgs;
                DAST._IResolvedType _932___mcc_h479 = _source35.dtor_resolved;
                DAST._IResolvedType _source36 = _932___mcc_h479;
                if (_source36.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _933___mcc_h486 = _source36.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _934_recursiveGen;
                    bool _935_recOwned;
                    bool _936_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _937_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out435;
                    bool _out436;
                    bool _out437;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out438;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out435, out _out436, out _out437, out _out438);
                    _934_recursiveGen = _out435;
                    _935_recOwned = _out436;
                    _936_recErased = _out437;
                    _937_recIdents = _out438;
                    if (!(_935_recOwned)) {
                      _934_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_934_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_934_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _935_recOwned;
                    isErased = _936_recErased;
                    readIdents = _937_recIdents;
                  }
                } else if (_source36.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _938___mcc_h489 = _source36.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _939_recursiveGen;
                    bool _940_recOwned;
                    bool _941_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _942_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out439;
                    bool _out440;
                    bool _out441;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out442;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out439, out _out440, out _out441, out _out442);
                    _939_recursiveGen = _out439;
                    _940_recOwned = _out440;
                    _941_recErased = _out441;
                    _942_recIdents = _out442;
                    if (!(_940_recOwned)) {
                      _939_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_939_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_939_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _940_recOwned;
                    isErased = _941_recErased;
                    readIdents = _942_recIdents;
                  }
                } else {
                  DAST._IType _943___mcc_h492 = _source36.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _944_recursiveGen;
                    bool _945_recOwned;
                    bool _946_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _947_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out443;
                    bool _out444;
                    bool _out445;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out446;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out443, out _out444, out _out445, out _out446);
                    _944_recursiveGen = _out443;
                    _945_recOwned = _out444;
                    _946_recErased = _out445;
                    _947_recIdents = _out446;
                    if (!(_945_recOwned)) {
                      _944_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_944_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_944_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _945_recOwned;
                    isErased = _946_recErased;
                    readIdents = _947_recIdents;
                  }
                }
              } else if (_source35.is_Nullable) {
                DAST._IType _948___mcc_h495 = _source35.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _949_recursiveGen;
                  bool _950_recOwned;
                  bool _951_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _952_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out447;
                  bool _out448;
                  bool _out449;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out450;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out447, out _out448, out _out449, out _out450);
                  _949_recursiveGen = _out447;
                  _950_recOwned = _out448;
                  _951_recErased = _out449;
                  _952_recIdents = _out450;
                  if (!(_950_recOwned)) {
                    _949_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_949_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_949_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _950_recOwned;
                  isErased = _951_recErased;
                  readIdents = _952_recIdents;
                }
              } else if (_source35.is_Tuple) {
                Dafny.ISequence<DAST._IType> _953___mcc_h498 = _source35.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _954_recursiveGen;
                  bool _955_recOwned;
                  bool _956_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _957_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out451;
                  bool _out452;
                  bool _out453;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out454;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out451, out _out452, out _out453, out _out454);
                  _954_recursiveGen = _out451;
                  _955_recOwned = _out452;
                  _956_recErased = _out453;
                  _957_recIdents = _out454;
                  if (!(_955_recOwned)) {
                    _954_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_954_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_954_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _955_recOwned;
                  isErased = _956_recErased;
                  readIdents = _957_recIdents;
                }
              } else if (_source35.is_Array) {
                DAST._IType _958___mcc_h501 = _source35.dtor_element;
                BigInteger _959___mcc_h502 = _source35.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _960_recursiveGen;
                  bool _961_recOwned;
                  bool _962_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _963_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out455;
                  bool _out456;
                  bool _out457;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out458;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out455, out _out456, out _out457, out _out458);
                  _960_recursiveGen = _out455;
                  _961_recOwned = _out456;
                  _962_recErased = _out457;
                  _963_recIdents = _out458;
                  if (!(_961_recOwned)) {
                    _960_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_960_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_960_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _961_recOwned;
                  isErased = _962_recErased;
                  readIdents = _963_recIdents;
                }
              } else if (_source35.is_Seq) {
                DAST._IType _964___mcc_h507 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _965_recursiveGen;
                  bool _966_recOwned;
                  bool _967_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _968_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out459;
                  bool _out460;
                  bool _out461;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out462;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out459, out _out460, out _out461, out _out462);
                  _965_recursiveGen = _out459;
                  _966_recOwned = _out460;
                  _967_recErased = _out461;
                  _968_recIdents = _out462;
                  if (!(_966_recOwned)) {
                    _965_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_965_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_965_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _966_recOwned;
                  isErased = _967_recErased;
                  readIdents = _968_recIdents;
                }
              } else if (_source35.is_Set) {
                DAST._IType _969___mcc_h510 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _970_recursiveGen;
                  bool _971_recOwned;
                  bool _972_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _973_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out463;
                  bool _out464;
                  bool _out465;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out466;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out463, out _out464, out _out465, out _out466);
                  _970_recursiveGen = _out463;
                  _971_recOwned = _out464;
                  _972_recErased = _out465;
                  _973_recIdents = _out466;
                  if (!(_971_recOwned)) {
                    _970_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_970_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_970_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _971_recOwned;
                  isErased = _972_recErased;
                  readIdents = _973_recIdents;
                }
              } else if (_source35.is_Multiset) {
                DAST._IType _974___mcc_h513 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _975_recursiveGen;
                  bool _976_recOwned;
                  bool _977_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _978_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out467;
                  bool _out468;
                  bool _out469;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out470;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out467, out _out468, out _out469, out _out470);
                  _975_recursiveGen = _out467;
                  _976_recOwned = _out468;
                  _977_recErased = _out469;
                  _978_recIdents = _out470;
                  if (!(_976_recOwned)) {
                    _975_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_975_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_975_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _976_recOwned;
                  isErased = _977_recErased;
                  readIdents = _978_recIdents;
                }
              } else if (_source35.is_Map) {
                DAST._IType _979___mcc_h516 = _source35.dtor_key;
                DAST._IType _980___mcc_h517 = _source35.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _981_recursiveGen;
                  bool _982_recOwned;
                  bool _983_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _984_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out471;
                  bool _out472;
                  bool _out473;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out474;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out471, out _out472, out _out473, out _out474);
                  _981_recursiveGen = _out471;
                  _982_recOwned = _out472;
                  _983_recErased = _out473;
                  _984_recIdents = _out474;
                  if (!(_982_recOwned)) {
                    _981_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_981_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_981_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _982_recOwned;
                  isErased = _983_recErased;
                  readIdents = _984_recIdents;
                }
              } else if (_source35.is_Arrow) {
                Dafny.ISequence<DAST._IType> _985___mcc_h522 = _source35.dtor_args;
                DAST._IType _986___mcc_h523 = _source35.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _987_recursiveGen;
                  bool _988_recOwned;
                  bool _989_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _990_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out475;
                  bool _out476;
                  bool _out477;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out478;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out475, out _out476, out _out477, out _out478);
                  _987_recursiveGen = _out475;
                  _988_recOwned = _out476;
                  _989_recErased = _out477;
                  _990_recIdents = _out478;
                  if (!(_988_recOwned)) {
                    _987_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_987_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_987_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _988_recOwned;
                  isErased = _989_recErased;
                  readIdents = _990_recIdents;
                }
              } else if (_source35.is_Primitive) {
                DAST._IPrimitive _991___mcc_h528 = _source35.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _992_recursiveGen;
                  bool _993_recOwned;
                  bool _994_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _995_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out479;
                  bool _out480;
                  bool _out481;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out482;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out479, out _out480, out _out481, out _out482);
                  _992_recursiveGen = _out479;
                  _993_recOwned = _out480;
                  _994_recErased = _out481;
                  _995_recIdents = _out482;
                  if (!(_993_recOwned)) {
                    _992_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_992_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_992_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _993_recOwned;
                  isErased = _994_recErased;
                  readIdents = _995_recIdents;
                }
              } else if (_source35.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _996___mcc_h531 = _source35.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _997_recursiveGen;
                  bool _998_recOwned;
                  bool _999_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1000_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out483;
                  bool _out484;
                  bool _out485;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out486;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out483, out _out484, out _out485, out _out486);
                  _997_recursiveGen = _out483;
                  _998_recOwned = _out484;
                  _999_recErased = _out485;
                  _1000_recIdents = _out486;
                  if (!(_998_recOwned)) {
                    _997_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_997_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_997_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _998_recOwned;
                  isErased = _999_recErased;
                  readIdents = _1000_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1001___mcc_h534 = _source35.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1002_recursiveGen;
                  bool _1003_recOwned;
                  bool _1004_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1005_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out487;
                  bool _out488;
                  bool _out489;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out490;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out487, out _out488, out _out489, out _out490);
                  _1002_recursiveGen = _out487;
                  _1003_recOwned = _out488;
                  _1004_recErased = _out489;
                  _1005_recIdents = _out490;
                  if (!(_1003_recOwned)) {
                    _1002_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1002_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1002_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1003_recOwned;
                  isErased = _1004_recErased;
                  readIdents = _1005_recIdents;
                }
              }
            } else if (_source27.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1006___mcc_h537 = _source27.dtor_Tuple_a0;
              DAST._IType _source37 = _661___mcc_h306;
              if (_source37.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1007___mcc_h541 = _source37.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1008___mcc_h542 = _source37.dtor_typeArgs;
                DAST._IResolvedType _1009___mcc_h543 = _source37.dtor_resolved;
                DAST._IResolvedType _source38 = _1009___mcc_h543;
                if (_source38.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1010___mcc_h547 = _source38.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1011_recursiveGen;
                    bool _1012_recOwned;
                    bool _1013_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1014_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out491;
                    bool _out492;
                    bool _out493;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out494;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out491, out _out492, out _out493, out _out494);
                    _1011_recursiveGen = _out491;
                    _1012_recOwned = _out492;
                    _1013_recErased = _out493;
                    _1014_recIdents = _out494;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1011_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1012_recOwned;
                    isErased = _1013_recErased;
                    readIdents = _1014_recIdents;
                  }
                } else if (_source38.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1015___mcc_h549 = _source38.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1016_recursiveGen;
                    bool _1017_recOwned;
                    bool _1018_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1019_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out495;
                    bool _out496;
                    bool _out497;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out498;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out495, out _out496, out _out497, out _out498);
                    _1016_recursiveGen = _out495;
                    _1017_recOwned = _out496;
                    _1018_recErased = _out497;
                    _1019_recIdents = _out498;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1016_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1017_recOwned;
                    isErased = _1018_recErased;
                    readIdents = _1019_recIdents;
                  }
                } else {
                  DAST._IType _1020___mcc_h551 = _source38.dtor_Newtype_a0;
                  DAST._IType _1021_b = _1020___mcc_h551;
                  {
                    if (object.Equals(_654_fromTpe, _1021_b)) {
                      Dafny.ISequence<Dafny.Rune> _1022_recursiveGen;
                      bool _1023_recOwned;
                      bool _1024_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1025_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out499;
                      bool _out500;
                      bool _out501;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out502;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out499, out _out500, out _out501, out _out502);
                      _1022_recursiveGen = _out499;
                      _1023_recOwned = _out500;
                      _1024_recErased = _out501;
                      _1025_recIdents = _out502;
                      Dafny.ISequence<Dafny.Rune> _1026_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out503;
                      _out503 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                      _1026_rhsType = _out503;
                      Dafny.ISequence<Dafny.Rune> _1027_uneraseFn;
                      _1027_uneraseFn = ((_1023_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1026_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1027_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1022_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1023_recOwned;
                      isErased = false;
                      readIdents = _1025_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out504;
                      bool _out505;
                      bool _out506;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out507;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1021_b), _1021_b, _653_toTpe), selfIdent, @params, mustOwn, out _out504, out _out505, out _out506, out _out507);
                      s = _out504;
                      isOwned = _out505;
                      isErased = _out506;
                      readIdents = _out507;
                    }
                  }
                }
              } else if (_source37.is_Nullable) {
                DAST._IType _1028___mcc_h553 = _source37.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1029_recursiveGen;
                  bool _1030_recOwned;
                  bool _1031_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1032_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out508;
                  bool _out509;
                  bool _out510;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out511;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out508, out _out509, out _out510, out _out511);
                  _1029_recursiveGen = _out508;
                  _1030_recOwned = _out509;
                  _1031_recErased = _out510;
                  _1032_recIdents = _out511;
                  if (!(_1030_recOwned)) {
                    _1029_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1029_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1029_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1031_recErased;
                  readIdents = _1032_recIdents;
                }
              } else if (_source37.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1033___mcc_h555 = _source37.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1034_recursiveGen;
                  bool _1035_recOwned;
                  bool _1036_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1037_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out512;
                  bool _out513;
                  bool _out514;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out515;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out512, out _out513, out _out514, out _out515);
                  _1034_recursiveGen = _out512;
                  _1035_recOwned = _out513;
                  _1036_recErased = _out514;
                  _1037_recIdents = _out515;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1034_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1035_recOwned;
                  isErased = _1036_recErased;
                  readIdents = _1037_recIdents;
                }
              } else if (_source37.is_Array) {
                DAST._IType _1038___mcc_h557 = _source37.dtor_element;
                BigInteger _1039___mcc_h558 = _source37.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1040_recursiveGen;
                  bool _1041_recOwned;
                  bool _1042_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1043_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out516;
                  bool _out517;
                  bool _out518;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out519;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out516, out _out517, out _out518, out _out519);
                  _1040_recursiveGen = _out516;
                  _1041_recOwned = _out517;
                  _1042_recErased = _out518;
                  _1043_recIdents = _out519;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1040_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1041_recOwned;
                  isErased = _1042_recErased;
                  readIdents = _1043_recIdents;
                }
              } else if (_source37.is_Seq) {
                DAST._IType _1044___mcc_h561 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1045_recursiveGen;
                  bool _1046_recOwned;
                  bool _1047_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1048_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out520;
                  bool _out521;
                  bool _out522;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out523;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out520, out _out521, out _out522, out _out523);
                  _1045_recursiveGen = _out520;
                  _1046_recOwned = _out521;
                  _1047_recErased = _out522;
                  _1048_recIdents = _out523;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1045_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1046_recOwned;
                  isErased = _1047_recErased;
                  readIdents = _1048_recIdents;
                }
              } else if (_source37.is_Set) {
                DAST._IType _1049___mcc_h563 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1050_recursiveGen;
                  bool _1051_recOwned;
                  bool _1052_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1053_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out524;
                  bool _out525;
                  bool _out526;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out527;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out524, out _out525, out _out526, out _out527);
                  _1050_recursiveGen = _out524;
                  _1051_recOwned = _out525;
                  _1052_recErased = _out526;
                  _1053_recIdents = _out527;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1050_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1051_recOwned;
                  isErased = _1052_recErased;
                  readIdents = _1053_recIdents;
                }
              } else if (_source37.is_Multiset) {
                DAST._IType _1054___mcc_h565 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1055_recursiveGen;
                  bool _1056_recOwned;
                  bool _1057_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1058_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out528;
                  bool _out529;
                  bool _out530;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out531;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out528, out _out529, out _out530, out _out531);
                  _1055_recursiveGen = _out528;
                  _1056_recOwned = _out529;
                  _1057_recErased = _out530;
                  _1058_recIdents = _out531;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1055_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1056_recOwned;
                  isErased = _1057_recErased;
                  readIdents = _1058_recIdents;
                }
              } else if (_source37.is_Map) {
                DAST._IType _1059___mcc_h567 = _source37.dtor_key;
                DAST._IType _1060___mcc_h568 = _source37.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1061_recursiveGen;
                  bool _1062_recOwned;
                  bool _1063_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1064_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out532;
                  bool _out533;
                  bool _out534;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out535;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out532, out _out533, out _out534, out _out535);
                  _1061_recursiveGen = _out532;
                  _1062_recOwned = _out533;
                  _1063_recErased = _out534;
                  _1064_recIdents = _out535;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1061_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1062_recOwned;
                  isErased = _1063_recErased;
                  readIdents = _1064_recIdents;
                }
              } else if (_source37.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1065___mcc_h571 = _source37.dtor_args;
                DAST._IType _1066___mcc_h572 = _source37.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1067_recursiveGen;
                  bool _1068_recOwned;
                  bool _1069_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1070_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out536;
                  bool _out537;
                  bool _out538;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out539;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out536, out _out537, out _out538, out _out539);
                  _1067_recursiveGen = _out536;
                  _1068_recOwned = _out537;
                  _1069_recErased = _out538;
                  _1070_recIdents = _out539;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1067_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1068_recOwned;
                  isErased = _1069_recErased;
                  readIdents = _1070_recIdents;
                }
              } else if (_source37.is_Primitive) {
                DAST._IPrimitive _1071___mcc_h575 = _source37.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1072_recursiveGen;
                  bool _1073_recOwned;
                  bool _1074_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1075_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out540;
                  bool _out541;
                  bool _out542;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out543;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out540, out _out541, out _out542, out _out543);
                  _1072_recursiveGen = _out540;
                  _1073_recOwned = _out541;
                  _1074_recErased = _out542;
                  _1075_recIdents = _out543;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1072_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1073_recOwned;
                  isErased = _1074_recErased;
                  readIdents = _1075_recIdents;
                }
              } else if (_source37.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1076___mcc_h577 = _source37.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1077_recursiveGen;
                  bool _1078_recOwned;
                  bool _1079_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1080_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out544;
                  bool _out545;
                  bool _out546;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out547;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out544, out _out545, out _out546, out _out547);
                  _1077_recursiveGen = _out544;
                  _1078_recOwned = _out545;
                  _1079_recErased = _out546;
                  _1080_recIdents = _out547;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1077_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1078_recOwned;
                  isErased = _1079_recErased;
                  readIdents = _1080_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1081___mcc_h579 = _source37.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1082_recursiveGen;
                  bool _1083_recOwned;
                  bool _1084_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1085_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out548;
                  bool _out549;
                  bool _out550;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out551;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out548, out _out549, out _out550, out _out551);
                  _1082_recursiveGen = _out548;
                  _1083_recOwned = _out549;
                  _1084_recErased = _out550;
                  _1085_recIdents = _out551;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1083_recOwned;
                  isErased = _1084_recErased;
                  readIdents = _1085_recIdents;
                }
              }
            } else if (_source27.is_Array) {
              DAST._IType _1086___mcc_h581 = _source27.dtor_element;
              BigInteger _1087___mcc_h582 = _source27.dtor_dims;
              DAST._IType _source39 = _661___mcc_h306;
              if (_source39.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1088___mcc_h589 = _source39.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1089___mcc_h590 = _source39.dtor_typeArgs;
                DAST._IResolvedType _1090___mcc_h591 = _source39.dtor_resolved;
                DAST._IResolvedType _source40 = _1090___mcc_h591;
                if (_source40.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1091___mcc_h595 = _source40.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1092_recursiveGen;
                    bool _1093_recOwned;
                    bool _1094_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1095_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out552;
                    bool _out553;
                    bool _out554;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out555;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out552, out _out553, out _out554, out _out555);
                    _1092_recursiveGen = _out552;
                    _1093_recOwned = _out553;
                    _1094_recErased = _out554;
                    _1095_recIdents = _out555;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1093_recOwned;
                    isErased = _1094_recErased;
                    readIdents = _1095_recIdents;
                  }
                } else if (_source40.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1096___mcc_h597 = _source40.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1097_recursiveGen;
                    bool _1098_recOwned;
                    bool _1099_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1100_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out556;
                    bool _out557;
                    bool _out558;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out559;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out556, out _out557, out _out558, out _out559);
                    _1097_recursiveGen = _out556;
                    _1098_recOwned = _out557;
                    _1099_recErased = _out558;
                    _1100_recIdents = _out559;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1097_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1098_recOwned;
                    isErased = _1099_recErased;
                    readIdents = _1100_recIdents;
                  }
                } else {
                  DAST._IType _1101___mcc_h599 = _source40.dtor_Newtype_a0;
                  DAST._IType _1102_b = _1101___mcc_h599;
                  {
                    if (object.Equals(_654_fromTpe, _1102_b)) {
                      Dafny.ISequence<Dafny.Rune> _1103_recursiveGen;
                      bool _1104_recOwned;
                      bool _1105_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1106_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out560;
                      bool _out561;
                      bool _out562;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out563;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out560, out _out561, out _out562, out _out563);
                      _1103_recursiveGen = _out560;
                      _1104_recOwned = _out561;
                      _1105_recErased = _out562;
                      _1106_recIdents = _out563;
                      Dafny.ISequence<Dafny.Rune> _1107_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out564;
                      _out564 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                      _1107_rhsType = _out564;
                      Dafny.ISequence<Dafny.Rune> _1108_uneraseFn;
                      _1108_uneraseFn = ((_1104_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1107_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1108_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1103_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1104_recOwned;
                      isErased = false;
                      readIdents = _1106_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out565;
                      bool _out566;
                      bool _out567;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out568;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1102_b), _1102_b, _653_toTpe), selfIdent, @params, mustOwn, out _out565, out _out566, out _out567, out _out568);
                      s = _out565;
                      isOwned = _out566;
                      isErased = _out567;
                      readIdents = _out568;
                    }
                  }
                }
              } else if (_source39.is_Nullable) {
                DAST._IType _1109___mcc_h601 = _source39.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1110_recursiveGen;
                  bool _1111_recOwned;
                  bool _1112_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1113_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out569;
                  bool _out570;
                  bool _out571;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out572;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out569, out _out570, out _out571, out _out572);
                  _1110_recursiveGen = _out569;
                  _1111_recOwned = _out570;
                  _1112_recErased = _out571;
                  _1113_recIdents = _out572;
                  if (!(_1111_recOwned)) {
                    _1110_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1110_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1110_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1112_recErased;
                  readIdents = _1113_recIdents;
                }
              } else if (_source39.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1114___mcc_h603 = _source39.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1115_recursiveGen;
                  bool _1116_recOwned;
                  bool _1117_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1118_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out573;
                  bool _out574;
                  bool _out575;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out576;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out573, out _out574, out _out575, out _out576);
                  _1115_recursiveGen = _out573;
                  _1116_recOwned = _out574;
                  _1117_recErased = _out575;
                  _1118_recIdents = _out576;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1115_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1116_recOwned;
                  isErased = _1117_recErased;
                  readIdents = _1118_recIdents;
                }
              } else if (_source39.is_Array) {
                DAST._IType _1119___mcc_h605 = _source39.dtor_element;
                BigInteger _1120___mcc_h606 = _source39.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1121_recursiveGen;
                  bool _1122_recOwned;
                  bool _1123_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1124_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out577;
                  bool _out578;
                  bool _out579;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out580;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out577, out _out578, out _out579, out _out580);
                  _1121_recursiveGen = _out577;
                  _1122_recOwned = _out578;
                  _1123_recErased = _out579;
                  _1124_recIdents = _out580;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1121_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1122_recOwned;
                  isErased = _1123_recErased;
                  readIdents = _1124_recIdents;
                }
              } else if (_source39.is_Seq) {
                DAST._IType _1125___mcc_h609 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1126_recursiveGen;
                  bool _1127_recOwned;
                  bool _1128_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1129_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out581;
                  bool _out582;
                  bool _out583;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out584;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out581, out _out582, out _out583, out _out584);
                  _1126_recursiveGen = _out581;
                  _1127_recOwned = _out582;
                  _1128_recErased = _out583;
                  _1129_recIdents = _out584;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1126_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1127_recOwned;
                  isErased = _1128_recErased;
                  readIdents = _1129_recIdents;
                }
              } else if (_source39.is_Set) {
                DAST._IType _1130___mcc_h611 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1131_recursiveGen;
                  bool _1132_recOwned;
                  bool _1133_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1134_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out585;
                  bool _out586;
                  bool _out587;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out588;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out585, out _out586, out _out587, out _out588);
                  _1131_recursiveGen = _out585;
                  _1132_recOwned = _out586;
                  _1133_recErased = _out587;
                  _1134_recIdents = _out588;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1132_recOwned;
                  isErased = _1133_recErased;
                  readIdents = _1134_recIdents;
                }
              } else if (_source39.is_Multiset) {
                DAST._IType _1135___mcc_h613 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1136_recursiveGen;
                  bool _1137_recOwned;
                  bool _1138_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1139_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out589;
                  bool _out590;
                  bool _out591;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out592;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out589, out _out590, out _out591, out _out592);
                  _1136_recursiveGen = _out589;
                  _1137_recOwned = _out590;
                  _1138_recErased = _out591;
                  _1139_recIdents = _out592;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1136_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1137_recOwned;
                  isErased = _1138_recErased;
                  readIdents = _1139_recIdents;
                }
              } else if (_source39.is_Map) {
                DAST._IType _1140___mcc_h615 = _source39.dtor_key;
                DAST._IType _1141___mcc_h616 = _source39.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1142_recursiveGen;
                  bool _1143_recOwned;
                  bool _1144_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1145_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out593;
                  bool _out594;
                  bool _out595;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out596;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out593, out _out594, out _out595, out _out596);
                  _1142_recursiveGen = _out593;
                  _1143_recOwned = _out594;
                  _1144_recErased = _out595;
                  _1145_recIdents = _out596;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1142_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1143_recOwned;
                  isErased = _1144_recErased;
                  readIdents = _1145_recIdents;
                }
              } else if (_source39.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1146___mcc_h619 = _source39.dtor_args;
                DAST._IType _1147___mcc_h620 = _source39.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1148_recursiveGen;
                  bool _1149_recOwned;
                  bool _1150_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1151_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out597;
                  bool _out598;
                  bool _out599;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out600;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out597, out _out598, out _out599, out _out600);
                  _1148_recursiveGen = _out597;
                  _1149_recOwned = _out598;
                  _1150_recErased = _out599;
                  _1151_recIdents = _out600;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1148_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1149_recOwned;
                  isErased = _1150_recErased;
                  readIdents = _1151_recIdents;
                }
              } else if (_source39.is_Primitive) {
                DAST._IPrimitive _1152___mcc_h623 = _source39.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1153_recursiveGen;
                  bool _1154_recOwned;
                  bool _1155_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1156_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out601;
                  bool _out602;
                  bool _out603;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out604;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out601, out _out602, out _out603, out _out604);
                  _1153_recursiveGen = _out601;
                  _1154_recOwned = _out602;
                  _1155_recErased = _out603;
                  _1156_recIdents = _out604;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1153_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1154_recOwned;
                  isErased = _1155_recErased;
                  readIdents = _1156_recIdents;
                }
              } else if (_source39.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1157___mcc_h625 = _source39.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1158_recursiveGen;
                  bool _1159_recOwned;
                  bool _1160_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1161_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out605;
                  bool _out606;
                  bool _out607;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out608;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out605, out _out606, out _out607, out _out608);
                  _1158_recursiveGen = _out605;
                  _1159_recOwned = _out606;
                  _1160_recErased = _out607;
                  _1161_recIdents = _out608;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1158_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1159_recOwned;
                  isErased = _1160_recErased;
                  readIdents = _1161_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1162___mcc_h627 = _source39.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1163_recursiveGen;
                  bool _1164_recOwned;
                  bool _1165_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1166_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out609;
                  bool _out610;
                  bool _out611;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out612;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out609, out _out610, out _out611, out _out612);
                  _1163_recursiveGen = _out609;
                  _1164_recOwned = _out610;
                  _1165_recErased = _out611;
                  _1166_recIdents = _out612;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1163_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1164_recOwned;
                  isErased = _1165_recErased;
                  readIdents = _1166_recIdents;
                }
              }
            } else if (_source27.is_Seq) {
              DAST._IType _1167___mcc_h629 = _source27.dtor_element;
              DAST._IType _source41 = _661___mcc_h306;
              if (_source41.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1168___mcc_h633 = _source41.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1169___mcc_h634 = _source41.dtor_typeArgs;
                DAST._IResolvedType _1170___mcc_h635 = _source41.dtor_resolved;
                DAST._IResolvedType _source42 = _1170___mcc_h635;
                if (_source42.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1171___mcc_h639 = _source42.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1172_recursiveGen;
                    bool _1173_recOwned;
                    bool _1174_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1175_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out613;
                    bool _out614;
                    bool _out615;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out616;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out613, out _out614, out _out615, out _out616);
                    _1172_recursiveGen = _out613;
                    _1173_recOwned = _out614;
                    _1174_recErased = _out615;
                    _1175_recIdents = _out616;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1172_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1173_recOwned;
                    isErased = _1174_recErased;
                    readIdents = _1175_recIdents;
                  }
                } else if (_source42.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1176___mcc_h641 = _source42.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1177_recursiveGen;
                    bool _1178_recOwned;
                    bool _1179_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1180_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out617;
                    bool _out618;
                    bool _out619;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out620;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out617, out _out618, out _out619, out _out620);
                    _1177_recursiveGen = _out617;
                    _1178_recOwned = _out618;
                    _1179_recErased = _out619;
                    _1180_recIdents = _out620;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1177_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1178_recOwned;
                    isErased = _1179_recErased;
                    readIdents = _1180_recIdents;
                  }
                } else {
                  DAST._IType _1181___mcc_h643 = _source42.dtor_Newtype_a0;
                  DAST._IType _1182_b = _1181___mcc_h643;
                  {
                    if (object.Equals(_654_fromTpe, _1182_b)) {
                      Dafny.ISequence<Dafny.Rune> _1183_recursiveGen;
                      bool _1184_recOwned;
                      bool _1185_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1186_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out621;
                      bool _out622;
                      bool _out623;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out624;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out621, out _out622, out _out623, out _out624);
                      _1183_recursiveGen = _out621;
                      _1184_recOwned = _out622;
                      _1185_recErased = _out623;
                      _1186_recIdents = _out624;
                      Dafny.ISequence<Dafny.Rune> _1187_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out625;
                      _out625 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                      _1187_rhsType = _out625;
                      Dafny.ISequence<Dafny.Rune> _1188_uneraseFn;
                      _1188_uneraseFn = ((_1184_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1187_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1188_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1183_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1184_recOwned;
                      isErased = false;
                      readIdents = _1186_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out626;
                      bool _out627;
                      bool _out628;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out629;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1182_b), _1182_b, _653_toTpe), selfIdent, @params, mustOwn, out _out626, out _out627, out _out628, out _out629);
                      s = _out626;
                      isOwned = _out627;
                      isErased = _out628;
                      readIdents = _out629;
                    }
                  }
                }
              } else if (_source41.is_Nullable) {
                DAST._IType _1189___mcc_h645 = _source41.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1190_recursiveGen;
                  bool _1191_recOwned;
                  bool _1192_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1193_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out630;
                  bool _out631;
                  bool _out632;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out633;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out630, out _out631, out _out632, out _out633);
                  _1190_recursiveGen = _out630;
                  _1191_recOwned = _out631;
                  _1192_recErased = _out632;
                  _1193_recIdents = _out633;
                  if (!(_1191_recOwned)) {
                    _1190_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1190_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1190_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1192_recErased;
                  readIdents = _1193_recIdents;
                }
              } else if (_source41.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1194___mcc_h647 = _source41.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1195_recursiveGen;
                  bool _1196_recOwned;
                  bool _1197_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1198_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out634;
                  bool _out635;
                  bool _out636;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out637;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out634, out _out635, out _out636, out _out637);
                  _1195_recursiveGen = _out634;
                  _1196_recOwned = _out635;
                  _1197_recErased = _out636;
                  _1198_recIdents = _out637;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1195_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1196_recOwned;
                  isErased = _1197_recErased;
                  readIdents = _1198_recIdents;
                }
              } else if (_source41.is_Array) {
                DAST._IType _1199___mcc_h649 = _source41.dtor_element;
                BigInteger _1200___mcc_h650 = _source41.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1201_recursiveGen;
                  bool _1202_recOwned;
                  bool _1203_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1204_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out638;
                  bool _out639;
                  bool _out640;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out641;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out638, out _out639, out _out640, out _out641);
                  _1201_recursiveGen = _out638;
                  _1202_recOwned = _out639;
                  _1203_recErased = _out640;
                  _1204_recIdents = _out641;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1201_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1202_recOwned;
                  isErased = _1203_recErased;
                  readIdents = _1204_recIdents;
                }
              } else if (_source41.is_Seq) {
                DAST._IType _1205___mcc_h653 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1206_recursiveGen;
                  bool _1207_recOwned;
                  bool _1208_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1209_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out642;
                  bool _out643;
                  bool _out644;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out645;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out642, out _out643, out _out644, out _out645);
                  _1206_recursiveGen = _out642;
                  _1207_recOwned = _out643;
                  _1208_recErased = _out644;
                  _1209_recIdents = _out645;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1206_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1207_recOwned;
                  isErased = _1208_recErased;
                  readIdents = _1209_recIdents;
                }
              } else if (_source41.is_Set) {
                DAST._IType _1210___mcc_h655 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1211_recursiveGen;
                  bool _1212_recOwned;
                  bool _1213_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1214_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out646;
                  bool _out647;
                  bool _out648;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out649;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out646, out _out647, out _out648, out _out649);
                  _1211_recursiveGen = _out646;
                  _1212_recOwned = _out647;
                  _1213_recErased = _out648;
                  _1214_recIdents = _out649;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1211_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1212_recOwned;
                  isErased = _1213_recErased;
                  readIdents = _1214_recIdents;
                }
              } else if (_source41.is_Multiset) {
                DAST._IType _1215___mcc_h657 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1216_recursiveGen;
                  bool _1217_recOwned;
                  bool _1218_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1219_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out650;
                  bool _out651;
                  bool _out652;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out653;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out650, out _out651, out _out652, out _out653);
                  _1216_recursiveGen = _out650;
                  _1217_recOwned = _out651;
                  _1218_recErased = _out652;
                  _1219_recIdents = _out653;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1216_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1217_recOwned;
                  isErased = _1218_recErased;
                  readIdents = _1219_recIdents;
                }
              } else if (_source41.is_Map) {
                DAST._IType _1220___mcc_h659 = _source41.dtor_key;
                DAST._IType _1221___mcc_h660 = _source41.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1222_recursiveGen;
                  bool _1223_recOwned;
                  bool _1224_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1225_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out654;
                  bool _out655;
                  bool _out656;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out657;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out654, out _out655, out _out656, out _out657);
                  _1222_recursiveGen = _out654;
                  _1223_recOwned = _out655;
                  _1224_recErased = _out656;
                  _1225_recIdents = _out657;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1222_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1223_recOwned;
                  isErased = _1224_recErased;
                  readIdents = _1225_recIdents;
                }
              } else if (_source41.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1226___mcc_h663 = _source41.dtor_args;
                DAST._IType _1227___mcc_h664 = _source41.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1228_recursiveGen;
                  bool _1229_recOwned;
                  bool _1230_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1231_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out658;
                  bool _out659;
                  bool _out660;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out661;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out658, out _out659, out _out660, out _out661);
                  _1228_recursiveGen = _out658;
                  _1229_recOwned = _out659;
                  _1230_recErased = _out660;
                  _1231_recIdents = _out661;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1228_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1229_recOwned;
                  isErased = _1230_recErased;
                  readIdents = _1231_recIdents;
                }
              } else if (_source41.is_Primitive) {
                DAST._IPrimitive _1232___mcc_h667 = _source41.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1233_recursiveGen;
                  bool _1234_recOwned;
                  bool _1235_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1236_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out662;
                  bool _out663;
                  bool _out664;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out665;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out662, out _out663, out _out664, out _out665);
                  _1233_recursiveGen = _out662;
                  _1234_recOwned = _out663;
                  _1235_recErased = _out664;
                  _1236_recIdents = _out665;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1233_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1234_recOwned;
                  isErased = _1235_recErased;
                  readIdents = _1236_recIdents;
                }
              } else if (_source41.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1237___mcc_h669 = _source41.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1238_recursiveGen;
                  bool _1239_recOwned;
                  bool _1240_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1241_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out666;
                  bool _out667;
                  bool _out668;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out669;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out666, out _out667, out _out668, out _out669);
                  _1238_recursiveGen = _out666;
                  _1239_recOwned = _out667;
                  _1240_recErased = _out668;
                  _1241_recIdents = _out669;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1238_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1239_recOwned;
                  isErased = _1240_recErased;
                  readIdents = _1241_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1242___mcc_h671 = _source41.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1243_recursiveGen;
                  bool _1244_recOwned;
                  bool _1245_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1246_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out670;
                  bool _out671;
                  bool _out672;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out673;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out670, out _out671, out _out672, out _out673);
                  _1243_recursiveGen = _out670;
                  _1244_recOwned = _out671;
                  _1245_recErased = _out672;
                  _1246_recIdents = _out673;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1244_recOwned;
                  isErased = _1245_recErased;
                  readIdents = _1246_recIdents;
                }
              }
            } else if (_source27.is_Set) {
              DAST._IType _1247___mcc_h673 = _source27.dtor_element;
              DAST._IType _source43 = _661___mcc_h306;
              if (_source43.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1248___mcc_h677 = _source43.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1249___mcc_h678 = _source43.dtor_typeArgs;
                DAST._IResolvedType _1250___mcc_h679 = _source43.dtor_resolved;
                DAST._IResolvedType _source44 = _1250___mcc_h679;
                if (_source44.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1251___mcc_h683 = _source44.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1252_recursiveGen;
                    bool _1253_recOwned;
                    bool _1254_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1255_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out674;
                    bool _out675;
                    bool _out676;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out677;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out674, out _out675, out _out676, out _out677);
                    _1252_recursiveGen = _out674;
                    _1253_recOwned = _out675;
                    _1254_recErased = _out676;
                    _1255_recIdents = _out677;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1252_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1253_recOwned;
                    isErased = _1254_recErased;
                    readIdents = _1255_recIdents;
                  }
                } else if (_source44.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1256___mcc_h685 = _source44.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1257_recursiveGen;
                    bool _1258_recOwned;
                    bool _1259_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1260_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out678;
                    bool _out679;
                    bool _out680;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out681;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out678, out _out679, out _out680, out _out681);
                    _1257_recursiveGen = _out678;
                    _1258_recOwned = _out679;
                    _1259_recErased = _out680;
                    _1260_recIdents = _out681;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1257_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1258_recOwned;
                    isErased = _1259_recErased;
                    readIdents = _1260_recIdents;
                  }
                } else {
                  DAST._IType _1261___mcc_h687 = _source44.dtor_Newtype_a0;
                  DAST._IType _1262_b = _1261___mcc_h687;
                  {
                    if (object.Equals(_654_fromTpe, _1262_b)) {
                      Dafny.ISequence<Dafny.Rune> _1263_recursiveGen;
                      bool _1264_recOwned;
                      bool _1265_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1266_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out682;
                      bool _out683;
                      bool _out684;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out685;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out682, out _out683, out _out684, out _out685);
                      _1263_recursiveGen = _out682;
                      _1264_recOwned = _out683;
                      _1265_recErased = _out684;
                      _1266_recIdents = _out685;
                      Dafny.ISequence<Dafny.Rune> _1267_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out686;
                      _out686 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                      _1267_rhsType = _out686;
                      Dafny.ISequence<Dafny.Rune> _1268_uneraseFn;
                      _1268_uneraseFn = ((_1264_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1267_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1268_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1263_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1264_recOwned;
                      isErased = false;
                      readIdents = _1266_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out687;
                      bool _out688;
                      bool _out689;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out690;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1262_b), _1262_b, _653_toTpe), selfIdent, @params, mustOwn, out _out687, out _out688, out _out689, out _out690);
                      s = _out687;
                      isOwned = _out688;
                      isErased = _out689;
                      readIdents = _out690;
                    }
                  }
                }
              } else if (_source43.is_Nullable) {
                DAST._IType _1269___mcc_h689 = _source43.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1270_recursiveGen;
                  bool _1271_recOwned;
                  bool _1272_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1273_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out691;
                  bool _out692;
                  bool _out693;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out694;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out691, out _out692, out _out693, out _out694);
                  _1270_recursiveGen = _out691;
                  _1271_recOwned = _out692;
                  _1272_recErased = _out693;
                  _1273_recIdents = _out694;
                  if (!(_1271_recOwned)) {
                    _1270_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1270_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1270_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1272_recErased;
                  readIdents = _1273_recIdents;
                }
              } else if (_source43.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1274___mcc_h691 = _source43.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1275_recursiveGen;
                  bool _1276_recOwned;
                  bool _1277_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1278_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out695;
                  bool _out696;
                  bool _out697;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out698;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out695, out _out696, out _out697, out _out698);
                  _1275_recursiveGen = _out695;
                  _1276_recOwned = _out696;
                  _1277_recErased = _out697;
                  _1278_recIdents = _out698;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1275_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1276_recOwned;
                  isErased = _1277_recErased;
                  readIdents = _1278_recIdents;
                }
              } else if (_source43.is_Array) {
                DAST._IType _1279___mcc_h693 = _source43.dtor_element;
                BigInteger _1280___mcc_h694 = _source43.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1281_recursiveGen;
                  bool _1282_recOwned;
                  bool _1283_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1284_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out699;
                  bool _out700;
                  bool _out701;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out702;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out699, out _out700, out _out701, out _out702);
                  _1281_recursiveGen = _out699;
                  _1282_recOwned = _out700;
                  _1283_recErased = _out701;
                  _1284_recIdents = _out702;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1281_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1282_recOwned;
                  isErased = _1283_recErased;
                  readIdents = _1284_recIdents;
                }
              } else if (_source43.is_Seq) {
                DAST._IType _1285___mcc_h697 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1286_recursiveGen;
                  bool _1287_recOwned;
                  bool _1288_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1289_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out703;
                  bool _out704;
                  bool _out705;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out706;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out703, out _out704, out _out705, out _out706);
                  _1286_recursiveGen = _out703;
                  _1287_recOwned = _out704;
                  _1288_recErased = _out705;
                  _1289_recIdents = _out706;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1286_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1287_recOwned;
                  isErased = _1288_recErased;
                  readIdents = _1289_recIdents;
                }
              } else if (_source43.is_Set) {
                DAST._IType _1290___mcc_h699 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1291_recursiveGen;
                  bool _1292_recOwned;
                  bool _1293_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1294_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out707;
                  bool _out708;
                  bool _out709;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out710;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out707, out _out708, out _out709, out _out710);
                  _1291_recursiveGen = _out707;
                  _1292_recOwned = _out708;
                  _1293_recErased = _out709;
                  _1294_recIdents = _out710;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1291_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1292_recOwned;
                  isErased = _1293_recErased;
                  readIdents = _1294_recIdents;
                }
              } else if (_source43.is_Multiset) {
                DAST._IType _1295___mcc_h701 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1296_recursiveGen;
                  bool _1297_recOwned;
                  bool _1298_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1299_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out711;
                  bool _out712;
                  bool _out713;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out714;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out711, out _out712, out _out713, out _out714);
                  _1296_recursiveGen = _out711;
                  _1297_recOwned = _out712;
                  _1298_recErased = _out713;
                  _1299_recIdents = _out714;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1296_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1297_recOwned;
                  isErased = _1298_recErased;
                  readIdents = _1299_recIdents;
                }
              } else if (_source43.is_Map) {
                DAST._IType _1300___mcc_h703 = _source43.dtor_key;
                DAST._IType _1301___mcc_h704 = _source43.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1302_recursiveGen;
                  bool _1303_recOwned;
                  bool _1304_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1305_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out715;
                  bool _out716;
                  bool _out717;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out718;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out715, out _out716, out _out717, out _out718);
                  _1302_recursiveGen = _out715;
                  _1303_recOwned = _out716;
                  _1304_recErased = _out717;
                  _1305_recIdents = _out718;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1302_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1303_recOwned;
                  isErased = _1304_recErased;
                  readIdents = _1305_recIdents;
                }
              } else if (_source43.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1306___mcc_h707 = _source43.dtor_args;
                DAST._IType _1307___mcc_h708 = _source43.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1308_recursiveGen;
                  bool _1309_recOwned;
                  bool _1310_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1311_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out719;
                  bool _out720;
                  bool _out721;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out722;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out719, out _out720, out _out721, out _out722);
                  _1308_recursiveGen = _out719;
                  _1309_recOwned = _out720;
                  _1310_recErased = _out721;
                  _1311_recIdents = _out722;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1308_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1309_recOwned;
                  isErased = _1310_recErased;
                  readIdents = _1311_recIdents;
                }
              } else if (_source43.is_Primitive) {
                DAST._IPrimitive _1312___mcc_h711 = _source43.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1313_recursiveGen;
                  bool _1314_recOwned;
                  bool _1315_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1316_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out723;
                  bool _out724;
                  bool _out725;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out726;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out723, out _out724, out _out725, out _out726);
                  _1313_recursiveGen = _out723;
                  _1314_recOwned = _out724;
                  _1315_recErased = _out725;
                  _1316_recIdents = _out726;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1313_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1314_recOwned;
                  isErased = _1315_recErased;
                  readIdents = _1316_recIdents;
                }
              } else if (_source43.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1317___mcc_h713 = _source43.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1318_recursiveGen;
                  bool _1319_recOwned;
                  bool _1320_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1321_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out727;
                  bool _out728;
                  bool _out729;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out730;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out727, out _out728, out _out729, out _out730);
                  _1318_recursiveGen = _out727;
                  _1319_recOwned = _out728;
                  _1320_recErased = _out729;
                  _1321_recIdents = _out730;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1318_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1319_recOwned;
                  isErased = _1320_recErased;
                  readIdents = _1321_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1322___mcc_h715 = _source43.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1323_recursiveGen;
                  bool _1324_recOwned;
                  bool _1325_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1326_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out731;
                  bool _out732;
                  bool _out733;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out734;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out731, out _out732, out _out733, out _out734);
                  _1323_recursiveGen = _out731;
                  _1324_recOwned = _out732;
                  _1325_recErased = _out733;
                  _1326_recIdents = _out734;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1323_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1324_recOwned;
                  isErased = _1325_recErased;
                  readIdents = _1326_recIdents;
                }
              }
            } else if (_source27.is_Multiset) {
              DAST._IType _1327___mcc_h717 = _source27.dtor_element;
              DAST._IType _source45 = _661___mcc_h306;
              if (_source45.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1328___mcc_h721 = _source45.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1329___mcc_h722 = _source45.dtor_typeArgs;
                DAST._IResolvedType _1330___mcc_h723 = _source45.dtor_resolved;
                DAST._IResolvedType _source46 = _1330___mcc_h723;
                if (_source46.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1331___mcc_h727 = _source46.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1332_recursiveGen;
                    bool _1333_recOwned;
                    bool _1334_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1335_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out735;
                    bool _out736;
                    bool _out737;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out738;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out735, out _out736, out _out737, out _out738);
                    _1332_recursiveGen = _out735;
                    _1333_recOwned = _out736;
                    _1334_recErased = _out737;
                    _1335_recIdents = _out738;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1332_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1333_recOwned;
                    isErased = _1334_recErased;
                    readIdents = _1335_recIdents;
                  }
                } else if (_source46.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1336___mcc_h729 = _source46.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1337_recursiveGen;
                    bool _1338_recOwned;
                    bool _1339_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1340_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out739;
                    bool _out740;
                    bool _out741;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out742;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out739, out _out740, out _out741, out _out742);
                    _1337_recursiveGen = _out739;
                    _1338_recOwned = _out740;
                    _1339_recErased = _out741;
                    _1340_recIdents = _out742;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1337_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1338_recOwned;
                    isErased = _1339_recErased;
                    readIdents = _1340_recIdents;
                  }
                } else {
                  DAST._IType _1341___mcc_h731 = _source46.dtor_Newtype_a0;
                  DAST._IType _1342_b = _1341___mcc_h731;
                  {
                    if (object.Equals(_654_fromTpe, _1342_b)) {
                      Dafny.ISequence<Dafny.Rune> _1343_recursiveGen;
                      bool _1344_recOwned;
                      bool _1345_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1346_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out743;
                      bool _out744;
                      bool _out745;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out746;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out743, out _out744, out _out745, out _out746);
                      _1343_recursiveGen = _out743;
                      _1344_recOwned = _out744;
                      _1345_recErased = _out745;
                      _1346_recIdents = _out746;
                      Dafny.ISequence<Dafny.Rune> _1347_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out747;
                      _out747 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                      _1347_rhsType = _out747;
                      Dafny.ISequence<Dafny.Rune> _1348_uneraseFn;
                      _1348_uneraseFn = ((_1344_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1347_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1348_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1343_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1344_recOwned;
                      isErased = false;
                      readIdents = _1346_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out748;
                      bool _out749;
                      bool _out750;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out751;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1342_b), _1342_b, _653_toTpe), selfIdent, @params, mustOwn, out _out748, out _out749, out _out750, out _out751);
                      s = _out748;
                      isOwned = _out749;
                      isErased = _out750;
                      readIdents = _out751;
                    }
                  }
                }
              } else if (_source45.is_Nullable) {
                DAST._IType _1349___mcc_h733 = _source45.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1350_recursiveGen;
                  bool _1351_recOwned;
                  bool _1352_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1353_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out752;
                  bool _out753;
                  bool _out754;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out755;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out752, out _out753, out _out754, out _out755);
                  _1350_recursiveGen = _out752;
                  _1351_recOwned = _out753;
                  _1352_recErased = _out754;
                  _1353_recIdents = _out755;
                  if (!(_1351_recOwned)) {
                    _1350_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1350_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1350_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1352_recErased;
                  readIdents = _1353_recIdents;
                }
              } else if (_source45.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1354___mcc_h735 = _source45.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1355_recursiveGen;
                  bool _1356_recOwned;
                  bool _1357_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1358_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out756;
                  bool _out757;
                  bool _out758;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out759;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out756, out _out757, out _out758, out _out759);
                  _1355_recursiveGen = _out756;
                  _1356_recOwned = _out757;
                  _1357_recErased = _out758;
                  _1358_recIdents = _out759;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1356_recOwned;
                  isErased = _1357_recErased;
                  readIdents = _1358_recIdents;
                }
              } else if (_source45.is_Array) {
                DAST._IType _1359___mcc_h737 = _source45.dtor_element;
                BigInteger _1360___mcc_h738 = _source45.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1361_recursiveGen;
                  bool _1362_recOwned;
                  bool _1363_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1364_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out760;
                  bool _out761;
                  bool _out762;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out763;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out760, out _out761, out _out762, out _out763);
                  _1361_recursiveGen = _out760;
                  _1362_recOwned = _out761;
                  _1363_recErased = _out762;
                  _1364_recIdents = _out763;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1361_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1362_recOwned;
                  isErased = _1363_recErased;
                  readIdents = _1364_recIdents;
                }
              } else if (_source45.is_Seq) {
                DAST._IType _1365___mcc_h741 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1366_recursiveGen;
                  bool _1367_recOwned;
                  bool _1368_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1369_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out764;
                  bool _out765;
                  bool _out766;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out767;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out764, out _out765, out _out766, out _out767);
                  _1366_recursiveGen = _out764;
                  _1367_recOwned = _out765;
                  _1368_recErased = _out766;
                  _1369_recIdents = _out767;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1366_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1367_recOwned;
                  isErased = _1368_recErased;
                  readIdents = _1369_recIdents;
                }
              } else if (_source45.is_Set) {
                DAST._IType _1370___mcc_h743 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1371_recursiveGen;
                  bool _1372_recOwned;
                  bool _1373_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1374_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out768;
                  bool _out769;
                  bool _out770;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out771;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out768, out _out769, out _out770, out _out771);
                  _1371_recursiveGen = _out768;
                  _1372_recOwned = _out769;
                  _1373_recErased = _out770;
                  _1374_recIdents = _out771;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1371_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1372_recOwned;
                  isErased = _1373_recErased;
                  readIdents = _1374_recIdents;
                }
              } else if (_source45.is_Multiset) {
                DAST._IType _1375___mcc_h745 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1376_recursiveGen;
                  bool _1377_recOwned;
                  bool _1378_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1379_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out772;
                  bool _out773;
                  bool _out774;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out775;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out772, out _out773, out _out774, out _out775);
                  _1376_recursiveGen = _out772;
                  _1377_recOwned = _out773;
                  _1378_recErased = _out774;
                  _1379_recIdents = _out775;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1376_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1377_recOwned;
                  isErased = _1378_recErased;
                  readIdents = _1379_recIdents;
                }
              } else if (_source45.is_Map) {
                DAST._IType _1380___mcc_h747 = _source45.dtor_key;
                DAST._IType _1381___mcc_h748 = _source45.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1382_recursiveGen;
                  bool _1383_recOwned;
                  bool _1384_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1385_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out776;
                  bool _out777;
                  bool _out778;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out779;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out776, out _out777, out _out778, out _out779);
                  _1382_recursiveGen = _out776;
                  _1383_recOwned = _out777;
                  _1384_recErased = _out778;
                  _1385_recIdents = _out779;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1382_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1383_recOwned;
                  isErased = _1384_recErased;
                  readIdents = _1385_recIdents;
                }
              } else if (_source45.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1386___mcc_h751 = _source45.dtor_args;
                DAST._IType _1387___mcc_h752 = _source45.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1388_recursiveGen;
                  bool _1389_recOwned;
                  bool _1390_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1391_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out780;
                  bool _out781;
                  bool _out782;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out783;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out780, out _out781, out _out782, out _out783);
                  _1388_recursiveGen = _out780;
                  _1389_recOwned = _out781;
                  _1390_recErased = _out782;
                  _1391_recIdents = _out783;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1388_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1389_recOwned;
                  isErased = _1390_recErased;
                  readIdents = _1391_recIdents;
                }
              } else if (_source45.is_Primitive) {
                DAST._IPrimitive _1392___mcc_h755 = _source45.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1393_recursiveGen;
                  bool _1394_recOwned;
                  bool _1395_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1396_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out784;
                  bool _out785;
                  bool _out786;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out787;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out784, out _out785, out _out786, out _out787);
                  _1393_recursiveGen = _out784;
                  _1394_recOwned = _out785;
                  _1395_recErased = _out786;
                  _1396_recIdents = _out787;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1393_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1394_recOwned;
                  isErased = _1395_recErased;
                  readIdents = _1396_recIdents;
                }
              } else if (_source45.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1397___mcc_h757 = _source45.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1398_recursiveGen;
                  bool _1399_recOwned;
                  bool _1400_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1401_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out788;
                  bool _out789;
                  bool _out790;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out791;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out788, out _out789, out _out790, out _out791);
                  _1398_recursiveGen = _out788;
                  _1399_recOwned = _out789;
                  _1400_recErased = _out790;
                  _1401_recIdents = _out791;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1398_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1399_recOwned;
                  isErased = _1400_recErased;
                  readIdents = _1401_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1402___mcc_h759 = _source45.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1403_recursiveGen;
                  bool _1404_recOwned;
                  bool _1405_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1406_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out792;
                  bool _out793;
                  bool _out794;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out795;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out792, out _out793, out _out794, out _out795);
                  _1403_recursiveGen = _out792;
                  _1404_recOwned = _out793;
                  _1405_recErased = _out794;
                  _1406_recIdents = _out795;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1403_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1404_recOwned;
                  isErased = _1405_recErased;
                  readIdents = _1406_recIdents;
                }
              }
            } else if (_source27.is_Map) {
              DAST._IType _1407___mcc_h761 = _source27.dtor_key;
              DAST._IType _1408___mcc_h762 = _source27.dtor_value;
              DAST._IType _source47 = _661___mcc_h306;
              if (_source47.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1409___mcc_h769 = _source47.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1410___mcc_h770 = _source47.dtor_typeArgs;
                DAST._IResolvedType _1411___mcc_h771 = _source47.dtor_resolved;
                DAST._IResolvedType _source48 = _1411___mcc_h771;
                if (_source48.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1412___mcc_h775 = _source48.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1413_recursiveGen;
                    bool _1414_recOwned;
                    bool _1415_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1416_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out796;
                    bool _out797;
                    bool _out798;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out799;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out796, out _out797, out _out798, out _out799);
                    _1413_recursiveGen = _out796;
                    _1414_recOwned = _out797;
                    _1415_recErased = _out798;
                    _1416_recIdents = _out799;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1413_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1414_recOwned;
                    isErased = _1415_recErased;
                    readIdents = _1416_recIdents;
                  }
                } else if (_source48.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1417___mcc_h777 = _source48.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1418_recursiveGen;
                    bool _1419_recOwned;
                    bool _1420_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1421_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out800;
                    bool _out801;
                    bool _out802;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out803;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out800, out _out801, out _out802, out _out803);
                    _1418_recursiveGen = _out800;
                    _1419_recOwned = _out801;
                    _1420_recErased = _out802;
                    _1421_recIdents = _out803;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1418_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1419_recOwned;
                    isErased = _1420_recErased;
                    readIdents = _1421_recIdents;
                  }
                } else {
                  DAST._IType _1422___mcc_h779 = _source48.dtor_Newtype_a0;
                  DAST._IType _1423_b = _1422___mcc_h779;
                  {
                    if (object.Equals(_654_fromTpe, _1423_b)) {
                      Dafny.ISequence<Dafny.Rune> _1424_recursiveGen;
                      bool _1425_recOwned;
                      bool _1426_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1427_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out804;
                      bool _out805;
                      bool _out806;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out807;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out804, out _out805, out _out806, out _out807);
                      _1424_recursiveGen = _out804;
                      _1425_recOwned = _out805;
                      _1426_recErased = _out806;
                      _1427_recIdents = _out807;
                      Dafny.ISequence<Dafny.Rune> _1428_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out808;
                      _out808 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                      _1428_rhsType = _out808;
                      Dafny.ISequence<Dafny.Rune> _1429_uneraseFn;
                      _1429_uneraseFn = ((_1425_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1428_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1429_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1424_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1425_recOwned;
                      isErased = false;
                      readIdents = _1427_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out809;
                      bool _out810;
                      bool _out811;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out812;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1423_b), _1423_b, _653_toTpe), selfIdent, @params, mustOwn, out _out809, out _out810, out _out811, out _out812);
                      s = _out809;
                      isOwned = _out810;
                      isErased = _out811;
                      readIdents = _out812;
                    }
                  }
                }
              } else if (_source47.is_Nullable) {
                DAST._IType _1430___mcc_h781 = _source47.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1431_recursiveGen;
                  bool _1432_recOwned;
                  bool _1433_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1434_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out813;
                  bool _out814;
                  bool _out815;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out816;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out813, out _out814, out _out815, out _out816);
                  _1431_recursiveGen = _out813;
                  _1432_recOwned = _out814;
                  _1433_recErased = _out815;
                  _1434_recIdents = _out816;
                  if (!(_1432_recOwned)) {
                    _1431_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1431_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1431_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1433_recErased;
                  readIdents = _1434_recIdents;
                }
              } else if (_source47.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1435___mcc_h783 = _source47.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1436_recursiveGen;
                  bool _1437_recOwned;
                  bool _1438_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1439_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out817;
                  bool _out818;
                  bool _out819;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out820;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out817, out _out818, out _out819, out _out820);
                  _1436_recursiveGen = _out817;
                  _1437_recOwned = _out818;
                  _1438_recErased = _out819;
                  _1439_recIdents = _out820;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1436_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1437_recOwned;
                  isErased = _1438_recErased;
                  readIdents = _1439_recIdents;
                }
              } else if (_source47.is_Array) {
                DAST._IType _1440___mcc_h785 = _source47.dtor_element;
                BigInteger _1441___mcc_h786 = _source47.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1442_recursiveGen;
                  bool _1443_recOwned;
                  bool _1444_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1445_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out821;
                  bool _out822;
                  bool _out823;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out824;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out821, out _out822, out _out823, out _out824);
                  _1442_recursiveGen = _out821;
                  _1443_recOwned = _out822;
                  _1444_recErased = _out823;
                  _1445_recIdents = _out824;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1442_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1443_recOwned;
                  isErased = _1444_recErased;
                  readIdents = _1445_recIdents;
                }
              } else if (_source47.is_Seq) {
                DAST._IType _1446___mcc_h789 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1447_recursiveGen;
                  bool _1448_recOwned;
                  bool _1449_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1450_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out825;
                  bool _out826;
                  bool _out827;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out828;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out825, out _out826, out _out827, out _out828);
                  _1447_recursiveGen = _out825;
                  _1448_recOwned = _out826;
                  _1449_recErased = _out827;
                  _1450_recIdents = _out828;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1447_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1448_recOwned;
                  isErased = _1449_recErased;
                  readIdents = _1450_recIdents;
                }
              } else if (_source47.is_Set) {
                DAST._IType _1451___mcc_h791 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1452_recursiveGen;
                  bool _1453_recOwned;
                  bool _1454_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1455_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out829;
                  bool _out830;
                  bool _out831;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out832;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out829, out _out830, out _out831, out _out832);
                  _1452_recursiveGen = _out829;
                  _1453_recOwned = _out830;
                  _1454_recErased = _out831;
                  _1455_recIdents = _out832;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1452_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1453_recOwned;
                  isErased = _1454_recErased;
                  readIdents = _1455_recIdents;
                }
              } else if (_source47.is_Multiset) {
                DAST._IType _1456___mcc_h793 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1457_recursiveGen;
                  bool _1458_recOwned;
                  bool _1459_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1460_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out833;
                  bool _out834;
                  bool _out835;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out836;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out833, out _out834, out _out835, out _out836);
                  _1457_recursiveGen = _out833;
                  _1458_recOwned = _out834;
                  _1459_recErased = _out835;
                  _1460_recIdents = _out836;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1457_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1458_recOwned;
                  isErased = _1459_recErased;
                  readIdents = _1460_recIdents;
                }
              } else if (_source47.is_Map) {
                DAST._IType _1461___mcc_h795 = _source47.dtor_key;
                DAST._IType _1462___mcc_h796 = _source47.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1463_recursiveGen;
                  bool _1464_recOwned;
                  bool _1465_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1466_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out837;
                  bool _out838;
                  bool _out839;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out840;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out837, out _out838, out _out839, out _out840);
                  _1463_recursiveGen = _out837;
                  _1464_recOwned = _out838;
                  _1465_recErased = _out839;
                  _1466_recIdents = _out840;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1463_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1464_recOwned;
                  isErased = _1465_recErased;
                  readIdents = _1466_recIdents;
                }
              } else if (_source47.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1467___mcc_h799 = _source47.dtor_args;
                DAST._IType _1468___mcc_h800 = _source47.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1469_recursiveGen;
                  bool _1470_recOwned;
                  bool _1471_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1472_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out841;
                  bool _out842;
                  bool _out843;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out844;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out841, out _out842, out _out843, out _out844);
                  _1469_recursiveGen = _out841;
                  _1470_recOwned = _out842;
                  _1471_recErased = _out843;
                  _1472_recIdents = _out844;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1469_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1470_recOwned;
                  isErased = _1471_recErased;
                  readIdents = _1472_recIdents;
                }
              } else if (_source47.is_Primitive) {
                DAST._IPrimitive _1473___mcc_h803 = _source47.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1474_recursiveGen;
                  bool _1475_recOwned;
                  bool _1476_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1477_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out845;
                  bool _out846;
                  bool _out847;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out848;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out845, out _out846, out _out847, out _out848);
                  _1474_recursiveGen = _out845;
                  _1475_recOwned = _out846;
                  _1476_recErased = _out847;
                  _1477_recIdents = _out848;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1474_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1475_recOwned;
                  isErased = _1476_recErased;
                  readIdents = _1477_recIdents;
                }
              } else if (_source47.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1478___mcc_h805 = _source47.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1479_recursiveGen;
                  bool _1480_recOwned;
                  bool _1481_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1482_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out849;
                  bool _out850;
                  bool _out851;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out852;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out849, out _out850, out _out851, out _out852);
                  _1479_recursiveGen = _out849;
                  _1480_recOwned = _out850;
                  _1481_recErased = _out851;
                  _1482_recIdents = _out852;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1479_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1480_recOwned;
                  isErased = _1481_recErased;
                  readIdents = _1482_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1483___mcc_h807 = _source47.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1484_recursiveGen;
                  bool _1485_recOwned;
                  bool _1486_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1487_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out853;
                  bool _out854;
                  bool _out855;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out856;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out853, out _out854, out _out855, out _out856);
                  _1484_recursiveGen = _out853;
                  _1485_recOwned = _out854;
                  _1486_recErased = _out855;
                  _1487_recIdents = _out856;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1484_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1485_recOwned;
                  isErased = _1486_recErased;
                  readIdents = _1487_recIdents;
                }
              }
            } else if (_source27.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1488___mcc_h809 = _source27.dtor_args;
              DAST._IType _1489___mcc_h810 = _source27.dtor_result;
              DAST._IType _source49 = _661___mcc_h306;
              if (_source49.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1490___mcc_h817 = _source49.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1491___mcc_h818 = _source49.dtor_typeArgs;
                DAST._IResolvedType _1492___mcc_h819 = _source49.dtor_resolved;
                DAST._IResolvedType _source50 = _1492___mcc_h819;
                if (_source50.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1493___mcc_h823 = _source50.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1494_recursiveGen;
                    bool _1495_recOwned;
                    bool _1496_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1497_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out857;
                    bool _out858;
                    bool _out859;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out860;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out857, out _out858, out _out859, out _out860);
                    _1494_recursiveGen = _out857;
                    _1495_recOwned = _out858;
                    _1496_recErased = _out859;
                    _1497_recIdents = _out860;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1494_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1495_recOwned;
                    isErased = _1496_recErased;
                    readIdents = _1497_recIdents;
                  }
                } else if (_source50.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1498___mcc_h825 = _source50.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1499_recursiveGen;
                    bool _1500_recOwned;
                    bool _1501_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1502_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out861;
                    bool _out862;
                    bool _out863;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out864;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out861, out _out862, out _out863, out _out864);
                    _1499_recursiveGen = _out861;
                    _1500_recOwned = _out862;
                    _1501_recErased = _out863;
                    _1502_recIdents = _out864;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1499_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1500_recOwned;
                    isErased = _1501_recErased;
                    readIdents = _1502_recIdents;
                  }
                } else {
                  DAST._IType _1503___mcc_h827 = _source50.dtor_Newtype_a0;
                  DAST._IType _1504_b = _1503___mcc_h827;
                  {
                    if (object.Equals(_654_fromTpe, _1504_b)) {
                      Dafny.ISequence<Dafny.Rune> _1505_recursiveGen;
                      bool _1506_recOwned;
                      bool _1507_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1508_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out865;
                      bool _out866;
                      bool _out867;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out868;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out865, out _out866, out _out867, out _out868);
                      _1505_recursiveGen = _out865;
                      _1506_recOwned = _out866;
                      _1507_recErased = _out867;
                      _1508_recIdents = _out868;
                      Dafny.ISequence<Dafny.Rune> _1509_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out869;
                      _out869 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                      _1509_rhsType = _out869;
                      Dafny.ISequence<Dafny.Rune> _1510_uneraseFn;
                      _1510_uneraseFn = ((_1506_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1509_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1510_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1505_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1506_recOwned;
                      isErased = false;
                      readIdents = _1508_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out870;
                      bool _out871;
                      bool _out872;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out873;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1504_b), _1504_b, _653_toTpe), selfIdent, @params, mustOwn, out _out870, out _out871, out _out872, out _out873);
                      s = _out870;
                      isOwned = _out871;
                      isErased = _out872;
                      readIdents = _out873;
                    }
                  }
                }
              } else if (_source49.is_Nullable) {
                DAST._IType _1511___mcc_h829 = _source49.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1512_recursiveGen;
                  bool _1513_recOwned;
                  bool _1514_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1515_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out874;
                  bool _out875;
                  bool _out876;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out877;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out874, out _out875, out _out876, out _out877);
                  _1512_recursiveGen = _out874;
                  _1513_recOwned = _out875;
                  _1514_recErased = _out876;
                  _1515_recIdents = _out877;
                  if (!(_1513_recOwned)) {
                    _1512_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1512_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1512_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1514_recErased;
                  readIdents = _1515_recIdents;
                }
              } else if (_source49.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1516___mcc_h831 = _source49.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1517_recursiveGen;
                  bool _1518_recOwned;
                  bool _1519_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1520_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out878;
                  bool _out879;
                  bool _out880;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out881;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out878, out _out879, out _out880, out _out881);
                  _1517_recursiveGen = _out878;
                  _1518_recOwned = _out879;
                  _1519_recErased = _out880;
                  _1520_recIdents = _out881;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1517_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1518_recOwned;
                  isErased = _1519_recErased;
                  readIdents = _1520_recIdents;
                }
              } else if (_source49.is_Array) {
                DAST._IType _1521___mcc_h833 = _source49.dtor_element;
                BigInteger _1522___mcc_h834 = _source49.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1523_recursiveGen;
                  bool _1524_recOwned;
                  bool _1525_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1526_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out882;
                  bool _out883;
                  bool _out884;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out885;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out882, out _out883, out _out884, out _out885);
                  _1523_recursiveGen = _out882;
                  _1524_recOwned = _out883;
                  _1525_recErased = _out884;
                  _1526_recIdents = _out885;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1523_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1524_recOwned;
                  isErased = _1525_recErased;
                  readIdents = _1526_recIdents;
                }
              } else if (_source49.is_Seq) {
                DAST._IType _1527___mcc_h837 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1528_recursiveGen;
                  bool _1529_recOwned;
                  bool _1530_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1531_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out886;
                  bool _out887;
                  bool _out888;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out889;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out886, out _out887, out _out888, out _out889);
                  _1528_recursiveGen = _out886;
                  _1529_recOwned = _out887;
                  _1530_recErased = _out888;
                  _1531_recIdents = _out889;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1528_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1529_recOwned;
                  isErased = _1530_recErased;
                  readIdents = _1531_recIdents;
                }
              } else if (_source49.is_Set) {
                DAST._IType _1532___mcc_h839 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1533_recursiveGen;
                  bool _1534_recOwned;
                  bool _1535_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1536_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out890;
                  bool _out891;
                  bool _out892;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out893;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out890, out _out891, out _out892, out _out893);
                  _1533_recursiveGen = _out890;
                  _1534_recOwned = _out891;
                  _1535_recErased = _out892;
                  _1536_recIdents = _out893;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1533_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1534_recOwned;
                  isErased = _1535_recErased;
                  readIdents = _1536_recIdents;
                }
              } else if (_source49.is_Multiset) {
                DAST._IType _1537___mcc_h841 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1538_recursiveGen;
                  bool _1539_recOwned;
                  bool _1540_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1541_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out894;
                  bool _out895;
                  bool _out896;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out897;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out894, out _out895, out _out896, out _out897);
                  _1538_recursiveGen = _out894;
                  _1539_recOwned = _out895;
                  _1540_recErased = _out896;
                  _1541_recIdents = _out897;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1538_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1539_recOwned;
                  isErased = _1540_recErased;
                  readIdents = _1541_recIdents;
                }
              } else if (_source49.is_Map) {
                DAST._IType _1542___mcc_h843 = _source49.dtor_key;
                DAST._IType _1543___mcc_h844 = _source49.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1544_recursiveGen;
                  bool _1545_recOwned;
                  bool _1546_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1547_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out898;
                  bool _out899;
                  bool _out900;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out901;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out898, out _out899, out _out900, out _out901);
                  _1544_recursiveGen = _out898;
                  _1545_recOwned = _out899;
                  _1546_recErased = _out900;
                  _1547_recIdents = _out901;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1544_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1545_recOwned;
                  isErased = _1546_recErased;
                  readIdents = _1547_recIdents;
                }
              } else if (_source49.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1548___mcc_h847 = _source49.dtor_args;
                DAST._IType _1549___mcc_h848 = _source49.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1550_recursiveGen;
                  bool _1551_recOwned;
                  bool _1552_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1553_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out902;
                  bool _out903;
                  bool _out904;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out905;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out902, out _out903, out _out904, out _out905);
                  _1550_recursiveGen = _out902;
                  _1551_recOwned = _out903;
                  _1552_recErased = _out904;
                  _1553_recIdents = _out905;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1550_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1551_recOwned;
                  isErased = _1552_recErased;
                  readIdents = _1553_recIdents;
                }
              } else if (_source49.is_Primitive) {
                DAST._IPrimitive _1554___mcc_h851 = _source49.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1555_recursiveGen;
                  bool _1556_recOwned;
                  bool _1557_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1558_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out906;
                  bool _out907;
                  bool _out908;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out909;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out906, out _out907, out _out908, out _out909);
                  _1555_recursiveGen = _out906;
                  _1556_recOwned = _out907;
                  _1557_recErased = _out908;
                  _1558_recIdents = _out909;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1555_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1556_recOwned;
                  isErased = _1557_recErased;
                  readIdents = _1558_recIdents;
                }
              } else if (_source49.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1559___mcc_h853 = _source49.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1560_recursiveGen;
                  bool _1561_recOwned;
                  bool _1562_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1563_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out910;
                  bool _out911;
                  bool _out912;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out913;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out910, out _out911, out _out912, out _out913);
                  _1560_recursiveGen = _out910;
                  _1561_recOwned = _out911;
                  _1562_recErased = _out912;
                  _1563_recIdents = _out913;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1560_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1561_recOwned;
                  isErased = _1562_recErased;
                  readIdents = _1563_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1564___mcc_h855 = _source49.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1565_recursiveGen;
                  bool _1566_recOwned;
                  bool _1567_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1568_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out914;
                  bool _out915;
                  bool _out916;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out917;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out914, out _out915, out _out916, out _out917);
                  _1565_recursiveGen = _out914;
                  _1566_recOwned = _out915;
                  _1567_recErased = _out916;
                  _1568_recIdents = _out917;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1565_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1566_recOwned;
                  isErased = _1567_recErased;
                  readIdents = _1568_recIdents;
                }
              }
            } else if (_source27.is_Primitive) {
              DAST._IPrimitive _1569___mcc_h857 = _source27.dtor_Primitive_a0;
              DAST._IPrimitive _source51 = _1569___mcc_h857;
              if (_source51.is_Int) {
                DAST._IType _source52 = _661___mcc_h306;
                if (_source52.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1570___mcc_h861 = _source52.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1571___mcc_h862 = _source52.dtor_typeArgs;
                  DAST._IResolvedType _1572___mcc_h863 = _source52.dtor_resolved;
                  DAST._IResolvedType _source53 = _1572___mcc_h863;
                  if (_source53.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1573___mcc_h867 = _source53.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1574_recursiveGen;
                      bool _1575_recOwned;
                      bool _1576_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1577_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out918;
                      bool _out919;
                      bool _out920;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out921;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out918, out _out919, out _out920, out _out921);
                      _1574_recursiveGen = _out918;
                      _1575_recOwned = _out919;
                      _1576_recErased = _out920;
                      _1577_recIdents = _out921;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1574_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1575_recOwned;
                      isErased = _1576_recErased;
                      readIdents = _1577_recIdents;
                    }
                  } else if (_source53.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1578___mcc_h869 = _source53.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1579_recursiveGen;
                      bool _1580_recOwned;
                      bool _1581_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1582_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out922;
                      bool _out923;
                      bool _out924;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out925;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out922, out _out923, out _out924, out _out925);
                      _1579_recursiveGen = _out922;
                      _1580_recOwned = _out923;
                      _1581_recErased = _out924;
                      _1582_recIdents = _out925;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1579_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1580_recOwned;
                      isErased = _1581_recErased;
                      readIdents = _1582_recIdents;
                    }
                  } else {
                    DAST._IType _1583___mcc_h871 = _source53.dtor_Newtype_a0;
                    DAST._IType _1584_b = _1583___mcc_h871;
                    {
                      if (object.Equals(_654_fromTpe, _1584_b)) {
                        Dafny.ISequence<Dafny.Rune> _1585_recursiveGen;
                        bool _1586_recOwned;
                        bool _1587_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1588_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out926;
                        bool _out927;
                        bool _out928;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out929;
                        DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out926, out _out927, out _out928, out _out929);
                        _1585_recursiveGen = _out926;
                        _1586_recOwned = _out927;
                        _1587_recErased = _out928;
                        _1588_recIdents = _out929;
                        Dafny.ISequence<Dafny.Rune> _1589_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out930;
                        _out930 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                        _1589_rhsType = _out930;
                        Dafny.ISequence<Dafny.Rune> _1590_uneraseFn;
                        _1590_uneraseFn = ((_1586_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1589_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1590_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1585_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1586_recOwned;
                        isErased = false;
                        readIdents = _1588_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out931;
                        bool _out932;
                        bool _out933;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out934;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1584_b), _1584_b, _653_toTpe), selfIdent, @params, mustOwn, out _out931, out _out932, out _out933, out _out934);
                        s = _out931;
                        isOwned = _out932;
                        isErased = _out933;
                        readIdents = _out934;
                      }
                    }
                  }
                } else if (_source52.is_Nullable) {
                  DAST._IType _1591___mcc_h873 = _source52.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1592_recursiveGen;
                    bool _1593_recOwned;
                    bool _1594_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1595_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out935;
                    bool _out936;
                    bool _out937;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out938;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out935, out _out936, out _out937, out _out938);
                    _1592_recursiveGen = _out935;
                    _1593_recOwned = _out936;
                    _1594_recErased = _out937;
                    _1595_recIdents = _out938;
                    if (!(_1593_recOwned)) {
                      _1592_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1592_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1592_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1594_recErased;
                    readIdents = _1595_recIdents;
                  }
                } else if (_source52.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1596___mcc_h875 = _source52.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1597_recursiveGen;
                    bool _1598_recOwned;
                    bool _1599_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1600_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out939;
                    bool _out940;
                    bool _out941;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out942;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out939, out _out940, out _out941, out _out942);
                    _1597_recursiveGen = _out939;
                    _1598_recOwned = _out940;
                    _1599_recErased = _out941;
                    _1600_recIdents = _out942;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1597_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1598_recOwned;
                    isErased = _1599_recErased;
                    readIdents = _1600_recIdents;
                  }
                } else if (_source52.is_Array) {
                  DAST._IType _1601___mcc_h877 = _source52.dtor_element;
                  BigInteger _1602___mcc_h878 = _source52.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1603_recursiveGen;
                    bool _1604_recOwned;
                    bool _1605_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1606_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out943;
                    bool _out944;
                    bool _out945;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out946;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out943, out _out944, out _out945, out _out946);
                    _1603_recursiveGen = _out943;
                    _1604_recOwned = _out944;
                    _1605_recErased = _out945;
                    _1606_recIdents = _out946;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1603_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1604_recOwned;
                    isErased = _1605_recErased;
                    readIdents = _1606_recIdents;
                  }
                } else if (_source52.is_Seq) {
                  DAST._IType _1607___mcc_h881 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1608_recursiveGen;
                    bool _1609_recOwned;
                    bool _1610_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1611_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out947;
                    bool _out948;
                    bool _out949;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out950;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out947, out _out948, out _out949, out _out950);
                    _1608_recursiveGen = _out947;
                    _1609_recOwned = _out948;
                    _1610_recErased = _out949;
                    _1611_recIdents = _out950;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1608_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1609_recOwned;
                    isErased = _1610_recErased;
                    readIdents = _1611_recIdents;
                  }
                } else if (_source52.is_Set) {
                  DAST._IType _1612___mcc_h883 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1613_recursiveGen;
                    bool _1614_recOwned;
                    bool _1615_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1616_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out951;
                    bool _out952;
                    bool _out953;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out954;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out951, out _out952, out _out953, out _out954);
                    _1613_recursiveGen = _out951;
                    _1614_recOwned = _out952;
                    _1615_recErased = _out953;
                    _1616_recIdents = _out954;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1613_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1614_recOwned;
                    isErased = _1615_recErased;
                    readIdents = _1616_recIdents;
                  }
                } else if (_source52.is_Multiset) {
                  DAST._IType _1617___mcc_h885 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1618_recursiveGen;
                    bool _1619_recOwned;
                    bool _1620_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1621_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out955;
                    bool _out956;
                    bool _out957;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out958;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out955, out _out956, out _out957, out _out958);
                    _1618_recursiveGen = _out955;
                    _1619_recOwned = _out956;
                    _1620_recErased = _out957;
                    _1621_recIdents = _out958;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1618_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1619_recOwned;
                    isErased = _1620_recErased;
                    readIdents = _1621_recIdents;
                  }
                } else if (_source52.is_Map) {
                  DAST._IType _1622___mcc_h887 = _source52.dtor_key;
                  DAST._IType _1623___mcc_h888 = _source52.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1624_recursiveGen;
                    bool _1625_recOwned;
                    bool _1626_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1627_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out959;
                    bool _out960;
                    bool _out961;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out962;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out959, out _out960, out _out961, out _out962);
                    _1624_recursiveGen = _out959;
                    _1625_recOwned = _out960;
                    _1626_recErased = _out961;
                    _1627_recIdents = _out962;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1624_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1625_recOwned;
                    isErased = _1626_recErased;
                    readIdents = _1627_recIdents;
                  }
                } else if (_source52.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1628___mcc_h891 = _source52.dtor_args;
                  DAST._IType _1629___mcc_h892 = _source52.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1630_recursiveGen;
                    bool _1631_recOwned;
                    bool _1632_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1633_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out963;
                    bool _out964;
                    bool _out965;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out966;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out963, out _out964, out _out965, out _out966);
                    _1630_recursiveGen = _out963;
                    _1631_recOwned = _out964;
                    _1632_recErased = _out965;
                    _1633_recIdents = _out966;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1630_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1631_recOwned;
                    isErased = _1632_recErased;
                    readIdents = _1633_recIdents;
                  }
                } else if (_source52.is_Primitive) {
                  DAST._IPrimitive _1634___mcc_h895 = _source52.dtor_Primitive_a0;
                  DAST._IPrimitive _source54 = _1634___mcc_h895;
                  if (_source54.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1635_recursiveGen;
                      bool _1636_recOwned;
                      bool _1637_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1638_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out967;
                      bool _out968;
                      bool _out969;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out970;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out967, out _out968, out _out969, out _out970);
                      _1635_recursiveGen = _out967;
                      _1636_recOwned = _out968;
                      _1637_recErased = _out969;
                      _1638_recIdents = _out970;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1635_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1636_recOwned;
                      isErased = _1637_recErased;
                      readIdents = _1638_recIdents;
                    }
                  } else if (_source54.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1639_recursiveGen;
                      bool _1640___v46;
                      bool _1641___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1642_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out971;
                      bool _out972;
                      bool _out973;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out974;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, true, out _out971, out _out972, out _out973, out _out974);
                      _1639_recursiveGen = _out971;
                      _1640___v46 = _out972;
                      _1641___v47 = _out973;
                      _1642_recIdents = _out974;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _1639_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1642_recIdents;
                    }
                  } else if (_source54.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1643_recursiveGen;
                      bool _1644_recOwned;
                      bool _1645_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1646_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out975;
                      bool _out976;
                      bool _out977;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out978;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out975, out _out976, out _out977, out _out978);
                      _1643_recursiveGen = _out975;
                      _1644_recOwned = _out976;
                      _1645_recErased = _out977;
                      _1646_recIdents = _out978;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1643_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1644_recOwned;
                      isErased = _1645_recErased;
                      readIdents = _1646_recIdents;
                    }
                  } else if (_source54.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1647_recursiveGen;
                      bool _1648_recOwned;
                      bool _1649_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1650_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out979;
                      bool _out980;
                      bool _out981;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out982;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out979, out _out980, out _out981, out _out982);
                      _1647_recursiveGen = _out979;
                      _1648_recOwned = _out980;
                      _1649_recErased = _out981;
                      _1650_recIdents = _out982;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1647_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1648_recOwned;
                      isErased = _1649_recErased;
                      readIdents = _1650_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1651_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out983;
                      _out983 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                      _1651_rhsType = _out983;
                      Dafny.ISequence<Dafny.Rune> _1652_recursiveGen;
                      bool _1653___v56;
                      bool _1654___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1655_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out984;
                      bool _out985;
                      bool _out986;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out987;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, true, out _out984, out _out985, out _out986, out _out987);
                      _1652_recursiveGen = _out984;
                      _1653___v56 = _out985;
                      _1654___v57 = _out986;
                      _1655_recIdents = _out987;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _1652_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1655_recIdents;
                    }
                  }
                } else if (_source52.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1656___mcc_h897 = _source52.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1657_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out988;
                    _out988 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                    _1657_rhsType = _out988;
                    Dafny.ISequence<Dafny.Rune> _1658_recursiveGen;
                    bool _1659___v51;
                    bool _1660___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1661_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out989;
                    bool _out990;
                    bool _out991;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out992;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, true, out _out989, out _out990, out _out991, out _out992);
                    _1658_recursiveGen = _out989;
                    _1659___v51 = _out990;
                    _1660___v52 = _out991;
                    _1661_recIdents = _out992;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1657_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _1658_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _1661_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1662___mcc_h899 = _source52.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1663_recursiveGen;
                    bool _1664_recOwned;
                    bool _1665_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1666_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out993;
                    bool _out994;
                    bool _out995;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out996;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out993, out _out994, out _out995, out _out996);
                    _1663_recursiveGen = _out993;
                    _1664_recOwned = _out994;
                    _1665_recErased = _out995;
                    _1666_recIdents = _out996;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1663_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1664_recOwned;
                    isErased = _1665_recErased;
                    readIdents = _1666_recIdents;
                  }
                }
              } else if (_source51.is_Real) {
                DAST._IType _source55 = _661___mcc_h306;
                if (_source55.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1667___mcc_h901 = _source55.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1668___mcc_h902 = _source55.dtor_typeArgs;
                  DAST._IResolvedType _1669___mcc_h903 = _source55.dtor_resolved;
                  DAST._IResolvedType _source56 = _1669___mcc_h903;
                  if (_source56.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1670___mcc_h907 = _source56.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1671_recursiveGen;
                      bool _1672_recOwned;
                      bool _1673_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1674_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out997;
                      bool _out998;
                      bool _out999;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1000;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out997, out _out998, out _out999, out _out1000);
                      _1671_recursiveGen = _out997;
                      _1672_recOwned = _out998;
                      _1673_recErased = _out999;
                      _1674_recIdents = _out1000;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1671_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1672_recOwned;
                      isErased = _1673_recErased;
                      readIdents = _1674_recIdents;
                    }
                  } else if (_source56.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1675___mcc_h909 = _source56.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1676_recursiveGen;
                      bool _1677_recOwned;
                      bool _1678_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1679_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1001;
                      bool _out1002;
                      bool _out1003;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1001, out _out1002, out _out1003, out _out1004);
                      _1676_recursiveGen = _out1001;
                      _1677_recOwned = _out1002;
                      _1678_recErased = _out1003;
                      _1679_recIdents = _out1004;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1676_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1677_recOwned;
                      isErased = _1678_recErased;
                      readIdents = _1679_recIdents;
                    }
                  } else {
                    DAST._IType _1680___mcc_h911 = _source56.dtor_Newtype_a0;
                    DAST._IType _1681_b = _1680___mcc_h911;
                    {
                      if (object.Equals(_654_fromTpe, _1681_b)) {
                        Dafny.ISequence<Dafny.Rune> _1682_recursiveGen;
                        bool _1683_recOwned;
                        bool _1684_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1685_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1005;
                        bool _out1006;
                        bool _out1007;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1008;
                        DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1005, out _out1006, out _out1007, out _out1008);
                        _1682_recursiveGen = _out1005;
                        _1683_recOwned = _out1006;
                        _1684_recErased = _out1007;
                        _1685_recIdents = _out1008;
                        Dafny.ISequence<Dafny.Rune> _1686_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1009;
                        _out1009 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                        _1686_rhsType = _out1009;
                        Dafny.ISequence<Dafny.Rune> _1687_uneraseFn;
                        _1687_uneraseFn = ((_1683_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1686_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1687_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1682_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1683_recOwned;
                        isErased = false;
                        readIdents = _1685_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1010;
                        bool _out1011;
                        bool _out1012;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1013;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1681_b), _1681_b, _653_toTpe), selfIdent, @params, mustOwn, out _out1010, out _out1011, out _out1012, out _out1013);
                        s = _out1010;
                        isOwned = _out1011;
                        isErased = _out1012;
                        readIdents = _out1013;
                      }
                    }
                  }
                } else if (_source55.is_Nullable) {
                  DAST._IType _1688___mcc_h913 = _source55.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1689_recursiveGen;
                    bool _1690_recOwned;
                    bool _1691_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1692_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1014;
                    bool _out1015;
                    bool _out1016;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1017;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1014, out _out1015, out _out1016, out _out1017);
                    _1689_recursiveGen = _out1014;
                    _1690_recOwned = _out1015;
                    _1691_recErased = _out1016;
                    _1692_recIdents = _out1017;
                    if (!(_1690_recOwned)) {
                      _1689_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1689_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1689_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1691_recErased;
                    readIdents = _1692_recIdents;
                  }
                } else if (_source55.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1693___mcc_h915 = _source55.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1694_recursiveGen;
                    bool _1695_recOwned;
                    bool _1696_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1697_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1018;
                    bool _out1019;
                    bool _out1020;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1021;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1018, out _out1019, out _out1020, out _out1021);
                    _1694_recursiveGen = _out1018;
                    _1695_recOwned = _out1019;
                    _1696_recErased = _out1020;
                    _1697_recIdents = _out1021;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1694_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1695_recOwned;
                    isErased = _1696_recErased;
                    readIdents = _1697_recIdents;
                  }
                } else if (_source55.is_Array) {
                  DAST._IType _1698___mcc_h917 = _source55.dtor_element;
                  BigInteger _1699___mcc_h918 = _source55.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1700_recursiveGen;
                    bool _1701_recOwned;
                    bool _1702_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1703_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1022;
                    bool _out1023;
                    bool _out1024;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1025;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1022, out _out1023, out _out1024, out _out1025);
                    _1700_recursiveGen = _out1022;
                    _1701_recOwned = _out1023;
                    _1702_recErased = _out1024;
                    _1703_recIdents = _out1025;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1700_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1701_recOwned;
                    isErased = _1702_recErased;
                    readIdents = _1703_recIdents;
                  }
                } else if (_source55.is_Seq) {
                  DAST._IType _1704___mcc_h921 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1705_recursiveGen;
                    bool _1706_recOwned;
                    bool _1707_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1708_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1026;
                    bool _out1027;
                    bool _out1028;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1029;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1026, out _out1027, out _out1028, out _out1029);
                    _1705_recursiveGen = _out1026;
                    _1706_recOwned = _out1027;
                    _1707_recErased = _out1028;
                    _1708_recIdents = _out1029;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1705_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1706_recOwned;
                    isErased = _1707_recErased;
                    readIdents = _1708_recIdents;
                  }
                } else if (_source55.is_Set) {
                  DAST._IType _1709___mcc_h923 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1710_recursiveGen;
                    bool _1711_recOwned;
                    bool _1712_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1713_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1030;
                    bool _out1031;
                    bool _out1032;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1033;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1030, out _out1031, out _out1032, out _out1033);
                    _1710_recursiveGen = _out1030;
                    _1711_recOwned = _out1031;
                    _1712_recErased = _out1032;
                    _1713_recIdents = _out1033;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1710_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1711_recOwned;
                    isErased = _1712_recErased;
                    readIdents = _1713_recIdents;
                  }
                } else if (_source55.is_Multiset) {
                  DAST._IType _1714___mcc_h925 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1715_recursiveGen;
                    bool _1716_recOwned;
                    bool _1717_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1718_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1034;
                    bool _out1035;
                    bool _out1036;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1037;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1034, out _out1035, out _out1036, out _out1037);
                    _1715_recursiveGen = _out1034;
                    _1716_recOwned = _out1035;
                    _1717_recErased = _out1036;
                    _1718_recIdents = _out1037;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1715_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1716_recOwned;
                    isErased = _1717_recErased;
                    readIdents = _1718_recIdents;
                  }
                } else if (_source55.is_Map) {
                  DAST._IType _1719___mcc_h927 = _source55.dtor_key;
                  DAST._IType _1720___mcc_h928 = _source55.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1721_recursiveGen;
                    bool _1722_recOwned;
                    bool _1723_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1724_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1038;
                    bool _out1039;
                    bool _out1040;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1041;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1038, out _out1039, out _out1040, out _out1041);
                    _1721_recursiveGen = _out1038;
                    _1722_recOwned = _out1039;
                    _1723_recErased = _out1040;
                    _1724_recIdents = _out1041;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1721_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1722_recOwned;
                    isErased = _1723_recErased;
                    readIdents = _1724_recIdents;
                  }
                } else if (_source55.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1725___mcc_h931 = _source55.dtor_args;
                  DAST._IType _1726___mcc_h932 = _source55.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1727_recursiveGen;
                    bool _1728_recOwned;
                    bool _1729_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1730_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1042;
                    bool _out1043;
                    bool _out1044;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1045;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1042, out _out1043, out _out1044, out _out1045);
                    _1727_recursiveGen = _out1042;
                    _1728_recOwned = _out1043;
                    _1729_recErased = _out1044;
                    _1730_recIdents = _out1045;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1727_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1728_recOwned;
                    isErased = _1729_recErased;
                    readIdents = _1730_recIdents;
                  }
                } else if (_source55.is_Primitive) {
                  DAST._IPrimitive _1731___mcc_h935 = _source55.dtor_Primitive_a0;
                  DAST._IPrimitive _source57 = _1731___mcc_h935;
                  if (_source57.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1732_recursiveGen;
                      bool _1733___v48;
                      bool _1734___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1735_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1046;
                      bool _out1047;
                      bool _out1048;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1049;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, false, out _out1046, out _out1047, out _out1048, out _out1049);
                      _1732_recursiveGen = _out1046;
                      _1733___v48 = _out1047;
                      _1734___v49 = _out1048;
                      _1735_recIdents = _out1049;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _1732_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1735_recIdents;
                    }
                  } else if (_source57.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1736_recursiveGen;
                      bool _1737_recOwned;
                      bool _1738_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1739_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1050;
                      bool _out1051;
                      bool _out1052;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1053;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1050, out _out1051, out _out1052, out _out1053);
                      _1736_recursiveGen = _out1050;
                      _1737_recOwned = _out1051;
                      _1738_recErased = _out1052;
                      _1739_recIdents = _out1053;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1736_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1737_recOwned;
                      isErased = _1738_recErased;
                      readIdents = _1739_recIdents;
                    }
                  } else if (_source57.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1740_recursiveGen;
                      bool _1741_recOwned;
                      bool _1742_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1743_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1054;
                      bool _out1055;
                      bool _out1056;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1057;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1054, out _out1055, out _out1056, out _out1057);
                      _1740_recursiveGen = _out1054;
                      _1741_recOwned = _out1055;
                      _1742_recErased = _out1056;
                      _1743_recIdents = _out1057;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1740_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1741_recOwned;
                      isErased = _1742_recErased;
                      readIdents = _1743_recIdents;
                    }
                  } else if (_source57.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1744_recursiveGen;
                      bool _1745_recOwned;
                      bool _1746_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1747_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1058;
                      bool _out1059;
                      bool _out1060;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1061;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1058, out _out1059, out _out1060, out _out1061);
                      _1744_recursiveGen = _out1058;
                      _1745_recOwned = _out1059;
                      _1746_recErased = _out1060;
                      _1747_recIdents = _out1061;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1744_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1745_recOwned;
                      isErased = _1746_recErased;
                      readIdents = _1747_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1748_recursiveGen;
                      bool _1749_recOwned;
                      bool _1750_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1751_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1062;
                      bool _out1063;
                      bool _out1064;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1065;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1062, out _out1063, out _out1064, out _out1065);
                      _1748_recursiveGen = _out1062;
                      _1749_recOwned = _out1063;
                      _1750_recErased = _out1064;
                      _1751_recIdents = _out1065;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1748_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1749_recOwned;
                      isErased = _1750_recErased;
                      readIdents = _1751_recIdents;
                    }
                  }
                } else if (_source55.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1752___mcc_h937 = _source55.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1753_recursiveGen;
                    bool _1754_recOwned;
                    bool _1755_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1756_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1066;
                    bool _out1067;
                    bool _out1068;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1069;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1066, out _out1067, out _out1068, out _out1069);
                    _1753_recursiveGen = _out1066;
                    _1754_recOwned = _out1067;
                    _1755_recErased = _out1068;
                    _1756_recIdents = _out1069;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1753_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1754_recOwned;
                    isErased = _1755_recErased;
                    readIdents = _1756_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1757___mcc_h939 = _source55.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1758_recursiveGen;
                    bool _1759_recOwned;
                    bool _1760_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1761_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1070;
                    bool _out1071;
                    bool _out1072;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1073;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1070, out _out1071, out _out1072, out _out1073);
                    _1758_recursiveGen = _out1070;
                    _1759_recOwned = _out1071;
                    _1760_recErased = _out1072;
                    _1761_recIdents = _out1073;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1758_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1759_recOwned;
                    isErased = _1760_recErased;
                    readIdents = _1761_recIdents;
                  }
                }
              } else if (_source51.is_String) {
                DAST._IType _source58 = _661___mcc_h306;
                if (_source58.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1762___mcc_h941 = _source58.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1763___mcc_h942 = _source58.dtor_typeArgs;
                  DAST._IResolvedType _1764___mcc_h943 = _source58.dtor_resolved;
                  DAST._IResolvedType _source59 = _1764___mcc_h943;
                  if (_source59.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1765___mcc_h947 = _source59.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1766_recursiveGen;
                      bool _1767_recOwned;
                      bool _1768_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1769_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1074;
                      bool _out1075;
                      bool _out1076;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1077;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1074, out _out1075, out _out1076, out _out1077);
                      _1766_recursiveGen = _out1074;
                      _1767_recOwned = _out1075;
                      _1768_recErased = _out1076;
                      _1769_recIdents = _out1077;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1766_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1767_recOwned;
                      isErased = _1768_recErased;
                      readIdents = _1769_recIdents;
                    }
                  } else if (_source59.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1770___mcc_h949 = _source59.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1771_recursiveGen;
                      bool _1772_recOwned;
                      bool _1773_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1774_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1078;
                      bool _out1079;
                      bool _out1080;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1081;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1078, out _out1079, out _out1080, out _out1081);
                      _1771_recursiveGen = _out1078;
                      _1772_recOwned = _out1079;
                      _1773_recErased = _out1080;
                      _1774_recIdents = _out1081;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1771_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1772_recOwned;
                      isErased = _1773_recErased;
                      readIdents = _1774_recIdents;
                    }
                  } else {
                    DAST._IType _1775___mcc_h951 = _source59.dtor_Newtype_a0;
                    DAST._IType _1776_b = _1775___mcc_h951;
                    {
                      if (object.Equals(_654_fromTpe, _1776_b)) {
                        Dafny.ISequence<Dafny.Rune> _1777_recursiveGen;
                        bool _1778_recOwned;
                        bool _1779_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1780_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1082;
                        bool _out1083;
                        bool _out1084;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1085;
                        DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1082, out _out1083, out _out1084, out _out1085);
                        _1777_recursiveGen = _out1082;
                        _1778_recOwned = _out1083;
                        _1779_recErased = _out1084;
                        _1780_recIdents = _out1085;
                        Dafny.ISequence<Dafny.Rune> _1781_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1086;
                        _out1086 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                        _1781_rhsType = _out1086;
                        Dafny.ISequence<Dafny.Rune> _1782_uneraseFn;
                        _1782_uneraseFn = ((_1778_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1781_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1782_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1777_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1778_recOwned;
                        isErased = false;
                        readIdents = _1780_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1087;
                        bool _out1088;
                        bool _out1089;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1090;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1776_b), _1776_b, _653_toTpe), selfIdent, @params, mustOwn, out _out1087, out _out1088, out _out1089, out _out1090);
                        s = _out1087;
                        isOwned = _out1088;
                        isErased = _out1089;
                        readIdents = _out1090;
                      }
                    }
                  }
                } else if (_source58.is_Nullable) {
                  DAST._IType _1783___mcc_h953 = _source58.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1784_recursiveGen;
                    bool _1785_recOwned;
                    bool _1786_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1787_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1091;
                    bool _out1092;
                    bool _out1093;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1094;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1091, out _out1092, out _out1093, out _out1094);
                    _1784_recursiveGen = _out1091;
                    _1785_recOwned = _out1092;
                    _1786_recErased = _out1093;
                    _1787_recIdents = _out1094;
                    if (!(_1785_recOwned)) {
                      _1784_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1784_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1784_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1786_recErased;
                    readIdents = _1787_recIdents;
                  }
                } else if (_source58.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1788___mcc_h955 = _source58.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1789_recursiveGen;
                    bool _1790_recOwned;
                    bool _1791_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1792_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1095;
                    bool _out1096;
                    bool _out1097;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1098;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1095, out _out1096, out _out1097, out _out1098);
                    _1789_recursiveGen = _out1095;
                    _1790_recOwned = _out1096;
                    _1791_recErased = _out1097;
                    _1792_recIdents = _out1098;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1789_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1790_recOwned;
                    isErased = _1791_recErased;
                    readIdents = _1792_recIdents;
                  }
                } else if (_source58.is_Array) {
                  DAST._IType _1793___mcc_h957 = _source58.dtor_element;
                  BigInteger _1794___mcc_h958 = _source58.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1795_recursiveGen;
                    bool _1796_recOwned;
                    bool _1797_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1798_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1099;
                    bool _out1100;
                    bool _out1101;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1102;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1099, out _out1100, out _out1101, out _out1102);
                    _1795_recursiveGen = _out1099;
                    _1796_recOwned = _out1100;
                    _1797_recErased = _out1101;
                    _1798_recIdents = _out1102;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1795_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1796_recOwned;
                    isErased = _1797_recErased;
                    readIdents = _1798_recIdents;
                  }
                } else if (_source58.is_Seq) {
                  DAST._IType _1799___mcc_h961 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1800_recursiveGen;
                    bool _1801_recOwned;
                    bool _1802_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1803_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1103;
                    bool _out1104;
                    bool _out1105;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1106;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1103, out _out1104, out _out1105, out _out1106);
                    _1800_recursiveGen = _out1103;
                    _1801_recOwned = _out1104;
                    _1802_recErased = _out1105;
                    _1803_recIdents = _out1106;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1800_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1801_recOwned;
                    isErased = _1802_recErased;
                    readIdents = _1803_recIdents;
                  }
                } else if (_source58.is_Set) {
                  DAST._IType _1804___mcc_h963 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1805_recursiveGen;
                    bool _1806_recOwned;
                    bool _1807_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1808_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1107;
                    bool _out1108;
                    bool _out1109;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1110;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1107, out _out1108, out _out1109, out _out1110);
                    _1805_recursiveGen = _out1107;
                    _1806_recOwned = _out1108;
                    _1807_recErased = _out1109;
                    _1808_recIdents = _out1110;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1805_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1806_recOwned;
                    isErased = _1807_recErased;
                    readIdents = _1808_recIdents;
                  }
                } else if (_source58.is_Multiset) {
                  DAST._IType _1809___mcc_h965 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1810_recursiveGen;
                    bool _1811_recOwned;
                    bool _1812_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1813_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1111;
                    bool _out1112;
                    bool _out1113;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1114;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1111, out _out1112, out _out1113, out _out1114);
                    _1810_recursiveGen = _out1111;
                    _1811_recOwned = _out1112;
                    _1812_recErased = _out1113;
                    _1813_recIdents = _out1114;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1810_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1811_recOwned;
                    isErased = _1812_recErased;
                    readIdents = _1813_recIdents;
                  }
                } else if (_source58.is_Map) {
                  DAST._IType _1814___mcc_h967 = _source58.dtor_key;
                  DAST._IType _1815___mcc_h968 = _source58.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1816_recursiveGen;
                    bool _1817_recOwned;
                    bool _1818_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1819_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1115;
                    bool _out1116;
                    bool _out1117;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1118;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1115, out _out1116, out _out1117, out _out1118);
                    _1816_recursiveGen = _out1115;
                    _1817_recOwned = _out1116;
                    _1818_recErased = _out1117;
                    _1819_recIdents = _out1118;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1816_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1817_recOwned;
                    isErased = _1818_recErased;
                    readIdents = _1819_recIdents;
                  }
                } else if (_source58.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1820___mcc_h971 = _source58.dtor_args;
                  DAST._IType _1821___mcc_h972 = _source58.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1822_recursiveGen;
                    bool _1823_recOwned;
                    bool _1824_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1825_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1119;
                    bool _out1120;
                    bool _out1121;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1122;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1119, out _out1120, out _out1121, out _out1122);
                    _1822_recursiveGen = _out1119;
                    _1823_recOwned = _out1120;
                    _1824_recErased = _out1121;
                    _1825_recIdents = _out1122;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1822_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1823_recOwned;
                    isErased = _1824_recErased;
                    readIdents = _1825_recIdents;
                  }
                } else if (_source58.is_Primitive) {
                  DAST._IPrimitive _1826___mcc_h975 = _source58.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1827_recursiveGen;
                    bool _1828_recOwned;
                    bool _1829_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1830_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1123;
                    bool _out1124;
                    bool _out1125;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1126;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1123, out _out1124, out _out1125, out _out1126);
                    _1827_recursiveGen = _out1123;
                    _1828_recOwned = _out1124;
                    _1829_recErased = _out1125;
                    _1830_recIdents = _out1126;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1827_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1828_recOwned;
                    isErased = _1829_recErased;
                    readIdents = _1830_recIdents;
                  }
                } else if (_source58.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1831___mcc_h977 = _source58.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1832_recursiveGen;
                    bool _1833_recOwned;
                    bool _1834_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1835_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1127;
                    bool _out1128;
                    bool _out1129;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1130;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1127, out _out1128, out _out1129, out _out1130);
                    _1832_recursiveGen = _out1127;
                    _1833_recOwned = _out1128;
                    _1834_recErased = _out1129;
                    _1835_recIdents = _out1130;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1832_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1833_recOwned;
                    isErased = _1834_recErased;
                    readIdents = _1835_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1836___mcc_h979 = _source58.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1837_recursiveGen;
                    bool _1838_recOwned;
                    bool _1839_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1840_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1131;
                    bool _out1132;
                    bool _out1133;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1134;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1131, out _out1132, out _out1133, out _out1134);
                    _1837_recursiveGen = _out1131;
                    _1838_recOwned = _out1132;
                    _1839_recErased = _out1133;
                    _1840_recIdents = _out1134;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1837_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1838_recOwned;
                    isErased = _1839_recErased;
                    readIdents = _1840_recIdents;
                  }
                }
              } else if (_source51.is_Bool) {
                DAST._IType _source60 = _661___mcc_h306;
                if (_source60.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1841___mcc_h981 = _source60.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1842___mcc_h982 = _source60.dtor_typeArgs;
                  DAST._IResolvedType _1843___mcc_h983 = _source60.dtor_resolved;
                  DAST._IResolvedType _source61 = _1843___mcc_h983;
                  if (_source61.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1844___mcc_h987 = _source61.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1845_recursiveGen;
                      bool _1846_recOwned;
                      bool _1847_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1848_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1135;
                      bool _out1136;
                      bool _out1137;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1138;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1135, out _out1136, out _out1137, out _out1138);
                      _1845_recursiveGen = _out1135;
                      _1846_recOwned = _out1136;
                      _1847_recErased = _out1137;
                      _1848_recIdents = _out1138;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1845_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1846_recOwned;
                      isErased = _1847_recErased;
                      readIdents = _1848_recIdents;
                    }
                  } else if (_source61.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1849___mcc_h989 = _source61.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1850_recursiveGen;
                      bool _1851_recOwned;
                      bool _1852_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1853_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1139;
                      bool _out1140;
                      bool _out1141;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1142;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1139, out _out1140, out _out1141, out _out1142);
                      _1850_recursiveGen = _out1139;
                      _1851_recOwned = _out1140;
                      _1852_recErased = _out1141;
                      _1853_recIdents = _out1142;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1850_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1851_recOwned;
                      isErased = _1852_recErased;
                      readIdents = _1853_recIdents;
                    }
                  } else {
                    DAST._IType _1854___mcc_h991 = _source61.dtor_Newtype_a0;
                    DAST._IType _1855_b = _1854___mcc_h991;
                    {
                      if (object.Equals(_654_fromTpe, _1855_b)) {
                        Dafny.ISequence<Dafny.Rune> _1856_recursiveGen;
                        bool _1857_recOwned;
                        bool _1858_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1859_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1143;
                        bool _out1144;
                        bool _out1145;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1146;
                        DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1143, out _out1144, out _out1145, out _out1146);
                        _1856_recursiveGen = _out1143;
                        _1857_recOwned = _out1144;
                        _1858_recErased = _out1145;
                        _1859_recIdents = _out1146;
                        Dafny.ISequence<Dafny.Rune> _1860_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1147;
                        _out1147 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                        _1860_rhsType = _out1147;
                        Dafny.ISequence<Dafny.Rune> _1861_uneraseFn;
                        _1861_uneraseFn = ((_1857_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1860_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1861_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1856_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1857_recOwned;
                        isErased = false;
                        readIdents = _1859_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1148;
                        bool _out1149;
                        bool _out1150;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1151;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1855_b), _1855_b, _653_toTpe), selfIdent, @params, mustOwn, out _out1148, out _out1149, out _out1150, out _out1151);
                        s = _out1148;
                        isOwned = _out1149;
                        isErased = _out1150;
                        readIdents = _out1151;
                      }
                    }
                  }
                } else if (_source60.is_Nullable) {
                  DAST._IType _1862___mcc_h993 = _source60.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1863_recursiveGen;
                    bool _1864_recOwned;
                    bool _1865_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1866_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1152;
                    bool _out1153;
                    bool _out1154;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1155;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1152, out _out1153, out _out1154, out _out1155);
                    _1863_recursiveGen = _out1152;
                    _1864_recOwned = _out1153;
                    _1865_recErased = _out1154;
                    _1866_recIdents = _out1155;
                    if (!(_1864_recOwned)) {
                      _1863_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1863_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1863_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1865_recErased;
                    readIdents = _1866_recIdents;
                  }
                } else if (_source60.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1867___mcc_h995 = _source60.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1868_recursiveGen;
                    bool _1869_recOwned;
                    bool _1870_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1871_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1156;
                    bool _out1157;
                    bool _out1158;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1159;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1156, out _out1157, out _out1158, out _out1159);
                    _1868_recursiveGen = _out1156;
                    _1869_recOwned = _out1157;
                    _1870_recErased = _out1158;
                    _1871_recIdents = _out1159;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1868_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1869_recOwned;
                    isErased = _1870_recErased;
                    readIdents = _1871_recIdents;
                  }
                } else if (_source60.is_Array) {
                  DAST._IType _1872___mcc_h997 = _source60.dtor_element;
                  BigInteger _1873___mcc_h998 = _source60.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1874_recursiveGen;
                    bool _1875_recOwned;
                    bool _1876_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1877_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1160;
                    bool _out1161;
                    bool _out1162;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1163;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1160, out _out1161, out _out1162, out _out1163);
                    _1874_recursiveGen = _out1160;
                    _1875_recOwned = _out1161;
                    _1876_recErased = _out1162;
                    _1877_recIdents = _out1163;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1874_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1875_recOwned;
                    isErased = _1876_recErased;
                    readIdents = _1877_recIdents;
                  }
                } else if (_source60.is_Seq) {
                  DAST._IType _1878___mcc_h1001 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1879_recursiveGen;
                    bool _1880_recOwned;
                    bool _1881_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1882_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1164;
                    bool _out1165;
                    bool _out1166;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1167;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1164, out _out1165, out _out1166, out _out1167);
                    _1879_recursiveGen = _out1164;
                    _1880_recOwned = _out1165;
                    _1881_recErased = _out1166;
                    _1882_recIdents = _out1167;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1879_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1880_recOwned;
                    isErased = _1881_recErased;
                    readIdents = _1882_recIdents;
                  }
                } else if (_source60.is_Set) {
                  DAST._IType _1883___mcc_h1003 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1884_recursiveGen;
                    bool _1885_recOwned;
                    bool _1886_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1887_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1168;
                    bool _out1169;
                    bool _out1170;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1171;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1168, out _out1169, out _out1170, out _out1171);
                    _1884_recursiveGen = _out1168;
                    _1885_recOwned = _out1169;
                    _1886_recErased = _out1170;
                    _1887_recIdents = _out1171;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1884_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1885_recOwned;
                    isErased = _1886_recErased;
                    readIdents = _1887_recIdents;
                  }
                } else if (_source60.is_Multiset) {
                  DAST._IType _1888___mcc_h1005 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1889_recursiveGen;
                    bool _1890_recOwned;
                    bool _1891_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1892_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1172;
                    bool _out1173;
                    bool _out1174;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1175;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1172, out _out1173, out _out1174, out _out1175);
                    _1889_recursiveGen = _out1172;
                    _1890_recOwned = _out1173;
                    _1891_recErased = _out1174;
                    _1892_recIdents = _out1175;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1889_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1890_recOwned;
                    isErased = _1891_recErased;
                    readIdents = _1892_recIdents;
                  }
                } else if (_source60.is_Map) {
                  DAST._IType _1893___mcc_h1007 = _source60.dtor_key;
                  DAST._IType _1894___mcc_h1008 = _source60.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1895_recursiveGen;
                    bool _1896_recOwned;
                    bool _1897_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1898_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1176;
                    bool _out1177;
                    bool _out1178;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1179;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1176, out _out1177, out _out1178, out _out1179);
                    _1895_recursiveGen = _out1176;
                    _1896_recOwned = _out1177;
                    _1897_recErased = _out1178;
                    _1898_recIdents = _out1179;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1895_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1896_recOwned;
                    isErased = _1897_recErased;
                    readIdents = _1898_recIdents;
                  }
                } else if (_source60.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1899___mcc_h1011 = _source60.dtor_args;
                  DAST._IType _1900___mcc_h1012 = _source60.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1901_recursiveGen;
                    bool _1902_recOwned;
                    bool _1903_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1904_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1180;
                    bool _out1181;
                    bool _out1182;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1183;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1180, out _out1181, out _out1182, out _out1183);
                    _1901_recursiveGen = _out1180;
                    _1902_recOwned = _out1181;
                    _1903_recErased = _out1182;
                    _1904_recIdents = _out1183;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1901_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1902_recOwned;
                    isErased = _1903_recErased;
                    readIdents = _1904_recIdents;
                  }
                } else if (_source60.is_Primitive) {
                  DAST._IPrimitive _1905___mcc_h1015 = _source60.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1906_recursiveGen;
                    bool _1907_recOwned;
                    bool _1908_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1909_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1184;
                    bool _out1185;
                    bool _out1186;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1187;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1184, out _out1185, out _out1186, out _out1187);
                    _1906_recursiveGen = _out1184;
                    _1907_recOwned = _out1185;
                    _1908_recErased = _out1186;
                    _1909_recIdents = _out1187;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1906_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1907_recOwned;
                    isErased = _1908_recErased;
                    readIdents = _1909_recIdents;
                  }
                } else if (_source60.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1910___mcc_h1017 = _source60.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1911_recursiveGen;
                    bool _1912_recOwned;
                    bool _1913_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1914_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1188;
                    bool _out1189;
                    bool _out1190;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1191;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1188, out _out1189, out _out1190, out _out1191);
                    _1911_recursiveGen = _out1188;
                    _1912_recOwned = _out1189;
                    _1913_recErased = _out1190;
                    _1914_recIdents = _out1191;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1911_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1912_recOwned;
                    isErased = _1913_recErased;
                    readIdents = _1914_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1915___mcc_h1019 = _source60.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1916_recursiveGen;
                    bool _1917_recOwned;
                    bool _1918_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1919_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1192;
                    bool _out1193;
                    bool _out1194;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1195;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1192, out _out1193, out _out1194, out _out1195);
                    _1916_recursiveGen = _out1192;
                    _1917_recOwned = _out1193;
                    _1918_recErased = _out1194;
                    _1919_recIdents = _out1195;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1916_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1917_recOwned;
                    isErased = _1918_recErased;
                    readIdents = _1919_recIdents;
                  }
                }
              } else {
                DAST._IType _source62 = _661___mcc_h306;
                if (_source62.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1920___mcc_h1021 = _source62.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1921___mcc_h1022 = _source62.dtor_typeArgs;
                  DAST._IResolvedType _1922___mcc_h1023 = _source62.dtor_resolved;
                  DAST._IResolvedType _source63 = _1922___mcc_h1023;
                  if (_source63.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1923___mcc_h1027 = _source63.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1924_recursiveGen;
                      bool _1925_recOwned;
                      bool _1926_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1927_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1196;
                      bool _out1197;
                      bool _out1198;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1199;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1196, out _out1197, out _out1198, out _out1199);
                      _1924_recursiveGen = _out1196;
                      _1925_recOwned = _out1197;
                      _1926_recErased = _out1198;
                      _1927_recIdents = _out1199;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1924_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1925_recOwned;
                      isErased = _1926_recErased;
                      readIdents = _1927_recIdents;
                    }
                  } else if (_source63.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1928___mcc_h1029 = _source63.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1929_recursiveGen;
                      bool _1930_recOwned;
                      bool _1931_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1932_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1200;
                      bool _out1201;
                      bool _out1202;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1203;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1200, out _out1201, out _out1202, out _out1203);
                      _1929_recursiveGen = _out1200;
                      _1930_recOwned = _out1201;
                      _1931_recErased = _out1202;
                      _1932_recIdents = _out1203;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1929_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1930_recOwned;
                      isErased = _1931_recErased;
                      readIdents = _1932_recIdents;
                    }
                  } else {
                    DAST._IType _1933___mcc_h1031 = _source63.dtor_Newtype_a0;
                    DAST._IType _1934_b = _1933___mcc_h1031;
                    {
                      if (object.Equals(_654_fromTpe, _1934_b)) {
                        Dafny.ISequence<Dafny.Rune> _1935_recursiveGen;
                        bool _1936_recOwned;
                        bool _1937_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1938_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1204;
                        bool _out1205;
                        bool _out1206;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1207;
                        DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1204, out _out1205, out _out1206, out _out1207);
                        _1935_recursiveGen = _out1204;
                        _1936_recOwned = _out1205;
                        _1937_recErased = _out1206;
                        _1938_recIdents = _out1207;
                        Dafny.ISequence<Dafny.Rune> _1939_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1208;
                        _out1208 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                        _1939_rhsType = _out1208;
                        Dafny.ISequence<Dafny.Rune> _1940_uneraseFn;
                        _1940_uneraseFn = ((_1936_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1939_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1940_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1936_recOwned;
                        isErased = false;
                        readIdents = _1938_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1209;
                        bool _out1210;
                        bool _out1211;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1212;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _1934_b), _1934_b, _653_toTpe), selfIdent, @params, mustOwn, out _out1209, out _out1210, out _out1211, out _out1212);
                        s = _out1209;
                        isOwned = _out1210;
                        isErased = _out1211;
                        readIdents = _out1212;
                      }
                    }
                  }
                } else if (_source62.is_Nullable) {
                  DAST._IType _1941___mcc_h1033 = _source62.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1942_recursiveGen;
                    bool _1943_recOwned;
                    bool _1944_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1945_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1213;
                    bool _out1214;
                    bool _out1215;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1216;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1213, out _out1214, out _out1215, out _out1216);
                    _1942_recursiveGen = _out1213;
                    _1943_recOwned = _out1214;
                    _1944_recErased = _out1215;
                    _1945_recIdents = _out1216;
                    if (!(_1943_recOwned)) {
                      _1942_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1942_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1942_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1944_recErased;
                    readIdents = _1945_recIdents;
                  }
                } else if (_source62.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1946___mcc_h1035 = _source62.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1947_recursiveGen;
                    bool _1948_recOwned;
                    bool _1949_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1950_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1217;
                    bool _out1218;
                    bool _out1219;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1220;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1217, out _out1218, out _out1219, out _out1220);
                    _1947_recursiveGen = _out1217;
                    _1948_recOwned = _out1218;
                    _1949_recErased = _out1219;
                    _1950_recIdents = _out1220;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1947_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1948_recOwned;
                    isErased = _1949_recErased;
                    readIdents = _1950_recIdents;
                  }
                } else if (_source62.is_Array) {
                  DAST._IType _1951___mcc_h1037 = _source62.dtor_element;
                  BigInteger _1952___mcc_h1038 = _source62.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1953_recursiveGen;
                    bool _1954_recOwned;
                    bool _1955_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1956_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1221;
                    bool _out1222;
                    bool _out1223;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1224;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1221, out _out1222, out _out1223, out _out1224);
                    _1953_recursiveGen = _out1221;
                    _1954_recOwned = _out1222;
                    _1955_recErased = _out1223;
                    _1956_recIdents = _out1224;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1953_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1954_recOwned;
                    isErased = _1955_recErased;
                    readIdents = _1956_recIdents;
                  }
                } else if (_source62.is_Seq) {
                  DAST._IType _1957___mcc_h1041 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1958_recursiveGen;
                    bool _1959_recOwned;
                    bool _1960_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1961_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1225;
                    bool _out1226;
                    bool _out1227;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1228;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1225, out _out1226, out _out1227, out _out1228);
                    _1958_recursiveGen = _out1225;
                    _1959_recOwned = _out1226;
                    _1960_recErased = _out1227;
                    _1961_recIdents = _out1228;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1958_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1959_recOwned;
                    isErased = _1960_recErased;
                    readIdents = _1961_recIdents;
                  }
                } else if (_source62.is_Set) {
                  DAST._IType _1962___mcc_h1043 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1963_recursiveGen;
                    bool _1964_recOwned;
                    bool _1965_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1966_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1229;
                    bool _out1230;
                    bool _out1231;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1232;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1229, out _out1230, out _out1231, out _out1232);
                    _1963_recursiveGen = _out1229;
                    _1964_recOwned = _out1230;
                    _1965_recErased = _out1231;
                    _1966_recIdents = _out1232;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1963_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1964_recOwned;
                    isErased = _1965_recErased;
                    readIdents = _1966_recIdents;
                  }
                } else if (_source62.is_Multiset) {
                  DAST._IType _1967___mcc_h1045 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1968_recursiveGen;
                    bool _1969_recOwned;
                    bool _1970_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1971_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1233;
                    bool _out1234;
                    bool _out1235;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1236;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1233, out _out1234, out _out1235, out _out1236);
                    _1968_recursiveGen = _out1233;
                    _1969_recOwned = _out1234;
                    _1970_recErased = _out1235;
                    _1971_recIdents = _out1236;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1968_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1969_recOwned;
                    isErased = _1970_recErased;
                    readIdents = _1971_recIdents;
                  }
                } else if (_source62.is_Map) {
                  DAST._IType _1972___mcc_h1047 = _source62.dtor_key;
                  DAST._IType _1973___mcc_h1048 = _source62.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1974_recursiveGen;
                    bool _1975_recOwned;
                    bool _1976_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1977_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1237;
                    bool _out1238;
                    bool _out1239;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1240;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1237, out _out1238, out _out1239, out _out1240);
                    _1974_recursiveGen = _out1237;
                    _1975_recOwned = _out1238;
                    _1976_recErased = _out1239;
                    _1977_recIdents = _out1240;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1974_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1975_recOwned;
                    isErased = _1976_recErased;
                    readIdents = _1977_recIdents;
                  }
                } else if (_source62.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1978___mcc_h1051 = _source62.dtor_args;
                  DAST._IType _1979___mcc_h1052 = _source62.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1980_recursiveGen;
                    bool _1981_recOwned;
                    bool _1982_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1983_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1241;
                    bool _out1242;
                    bool _out1243;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1244;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1241, out _out1242, out _out1243, out _out1244);
                    _1980_recursiveGen = _out1241;
                    _1981_recOwned = _out1242;
                    _1982_recErased = _out1243;
                    _1983_recIdents = _out1244;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1980_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1981_recOwned;
                    isErased = _1982_recErased;
                    readIdents = _1983_recIdents;
                  }
                } else if (_source62.is_Primitive) {
                  DAST._IPrimitive _1984___mcc_h1055 = _source62.dtor_Primitive_a0;
                  DAST._IPrimitive _source64 = _1984___mcc_h1055;
                  if (_source64.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1985_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1245;
                      _out1245 = DCOMP.COMP.GenType(_654_fromTpe, true, false);
                      _1985_rhsType = _out1245;
                      Dafny.ISequence<Dafny.Rune> _1986_recursiveGen;
                      bool _1987___v58;
                      bool _1988___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1989_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1246;
                      bool _out1247;
                      bool _out1248;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1249;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, true, out _out1246, out _out1247, out _out1248, out _out1249);
                      _1986_recursiveGen = _out1246;
                      _1987___v58 = _out1247;
                      _1988___v59 = _out1248;
                      _1989_recIdents = _out1249;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _1986_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1989_recIdents;
                    }
                  } else if (_source64.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1990_recursiveGen;
                      bool _1991_recOwned;
                      bool _1992_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1993_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1250;
                      bool _out1251;
                      bool _out1252;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1253;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1250, out _out1251, out _out1252, out _out1253);
                      _1990_recursiveGen = _out1250;
                      _1991_recOwned = _out1251;
                      _1992_recErased = _out1252;
                      _1993_recIdents = _out1253;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1990_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1991_recOwned;
                      isErased = _1992_recErased;
                      readIdents = _1993_recIdents;
                    }
                  } else if (_source64.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1994_recursiveGen;
                      bool _1995_recOwned;
                      bool _1996_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1997_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1254;
                      bool _out1255;
                      bool _out1256;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1257;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1254, out _out1255, out _out1256, out _out1257);
                      _1994_recursiveGen = _out1254;
                      _1995_recOwned = _out1255;
                      _1996_recErased = _out1256;
                      _1997_recIdents = _out1257;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1994_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1995_recOwned;
                      isErased = _1996_recErased;
                      readIdents = _1997_recIdents;
                    }
                  } else if (_source64.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1998_recursiveGen;
                      bool _1999_recOwned;
                      bool _2000_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2001_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1258;
                      bool _out1259;
                      bool _out1260;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1261;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1258, out _out1259, out _out1260, out _out1261);
                      _1998_recursiveGen = _out1258;
                      _1999_recOwned = _out1259;
                      _2000_recErased = _out1260;
                      _2001_recIdents = _out1261;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1999_recOwned;
                      isErased = _2000_recErased;
                      readIdents = _2001_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2002_recursiveGen;
                      bool _2003_recOwned;
                      bool _2004_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2005_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1262;
                      bool _out1263;
                      bool _out1264;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1265;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1262, out _out1263, out _out1264, out _out1265);
                      _2002_recursiveGen = _out1262;
                      _2003_recOwned = _out1263;
                      _2004_recErased = _out1264;
                      _2005_recIdents = _out1265;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2002_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2003_recOwned;
                      isErased = _2004_recErased;
                      readIdents = _2005_recIdents;
                    }
                  }
                } else if (_source62.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2006___mcc_h1057 = _source62.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2007_recursiveGen;
                    bool _2008_recOwned;
                    bool _2009_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2010_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1266;
                    bool _out1267;
                    bool _out1268;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1269;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1266, out _out1267, out _out1268, out _out1269);
                    _2007_recursiveGen = _out1266;
                    _2008_recOwned = _out1267;
                    _2009_recErased = _out1268;
                    _2010_recIdents = _out1269;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2007_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2008_recOwned;
                    isErased = _2009_recErased;
                    readIdents = _2010_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2011___mcc_h1059 = _source62.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2012_recursiveGen;
                    bool _2013_recOwned;
                    bool _2014_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2015_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1270;
                    bool _out1271;
                    bool _out1272;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1273;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1270, out _out1271, out _out1272, out _out1273);
                    _2012_recursiveGen = _out1270;
                    _2013_recOwned = _out1271;
                    _2014_recErased = _out1272;
                    _2015_recIdents = _out1273;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2012_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2013_recOwned;
                    isErased = _2014_recErased;
                    readIdents = _2015_recIdents;
                  }
                }
              }
            } else if (_source27.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2016___mcc_h1061 = _source27.dtor_Passthrough_a0;
              DAST._IType _source65 = _661___mcc_h306;
              if (_source65.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2017___mcc_h1065 = _source65.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2018___mcc_h1066 = _source65.dtor_typeArgs;
                DAST._IResolvedType _2019___mcc_h1067 = _source65.dtor_resolved;
                DAST._IResolvedType _source66 = _2019___mcc_h1067;
                if (_source66.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2020___mcc_h1071 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2021_recursiveGen;
                    bool _2022_recOwned;
                    bool _2023_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2024_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1274;
                    bool _out1275;
                    bool _out1276;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1277;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1274, out _out1275, out _out1276, out _out1277);
                    _2021_recursiveGen = _out1274;
                    _2022_recOwned = _out1275;
                    _2023_recErased = _out1276;
                    _2024_recIdents = _out1277;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2021_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2022_recOwned;
                    isErased = _2023_recErased;
                    readIdents = _2024_recIdents;
                  }
                } else if (_source66.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2025___mcc_h1073 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2026_recursiveGen;
                    bool _2027_recOwned;
                    bool _2028_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2029_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1278;
                    bool _out1279;
                    bool _out1280;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1281;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1278, out _out1279, out _out1280, out _out1281);
                    _2026_recursiveGen = _out1278;
                    _2027_recOwned = _out1279;
                    _2028_recErased = _out1280;
                    _2029_recIdents = _out1281;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2026_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2027_recOwned;
                    isErased = _2028_recErased;
                    readIdents = _2029_recIdents;
                  }
                } else {
                  DAST._IType _2030___mcc_h1075 = _source66.dtor_Newtype_a0;
                  DAST._IType _2031_b = _2030___mcc_h1075;
                  {
                    if (object.Equals(_654_fromTpe, _2031_b)) {
                      Dafny.ISequence<Dafny.Rune> _2032_recursiveGen;
                      bool _2033_recOwned;
                      bool _2034_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2035_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1282;
                      bool _out1283;
                      bool _out1284;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1285;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1282, out _out1283, out _out1284, out _out1285);
                      _2032_recursiveGen = _out1282;
                      _2033_recOwned = _out1283;
                      _2034_recErased = _out1284;
                      _2035_recIdents = _out1285;
                      Dafny.ISequence<Dafny.Rune> _2036_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1286;
                      _out1286 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                      _2036_rhsType = _out1286;
                      Dafny.ISequence<Dafny.Rune> _2037_uneraseFn;
                      _2037_uneraseFn = ((_2033_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2036_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2037_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2032_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2033_recOwned;
                      isErased = false;
                      readIdents = _2035_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1287;
                      bool _out1288;
                      bool _out1289;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1290;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _2031_b), _2031_b, _653_toTpe), selfIdent, @params, mustOwn, out _out1287, out _out1288, out _out1289, out _out1290);
                      s = _out1287;
                      isOwned = _out1288;
                      isErased = _out1289;
                      readIdents = _out1290;
                    }
                  }
                }
              } else if (_source65.is_Nullable) {
                DAST._IType _2038___mcc_h1077 = _source65.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2039_recursiveGen;
                  bool _2040_recOwned;
                  bool _2041_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2042_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1291;
                  bool _out1292;
                  bool _out1293;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1294;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1291, out _out1292, out _out1293, out _out1294);
                  _2039_recursiveGen = _out1291;
                  _2040_recOwned = _out1292;
                  _2041_recErased = _out1293;
                  _2042_recIdents = _out1294;
                  if (!(_2040_recOwned)) {
                    _2039_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2039_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2039_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2041_recErased;
                  readIdents = _2042_recIdents;
                }
              } else if (_source65.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2043___mcc_h1079 = _source65.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2044_recursiveGen;
                  bool _2045_recOwned;
                  bool _2046_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2047_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1295;
                  bool _out1296;
                  bool _out1297;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1298;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1295, out _out1296, out _out1297, out _out1298);
                  _2044_recursiveGen = _out1295;
                  _2045_recOwned = _out1296;
                  _2046_recErased = _out1297;
                  _2047_recIdents = _out1298;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2044_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2045_recOwned;
                  isErased = _2046_recErased;
                  readIdents = _2047_recIdents;
                }
              } else if (_source65.is_Array) {
                DAST._IType _2048___mcc_h1081 = _source65.dtor_element;
                BigInteger _2049___mcc_h1082 = _source65.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2050_recursiveGen;
                  bool _2051_recOwned;
                  bool _2052_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2053_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1299;
                  bool _out1300;
                  bool _out1301;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1302;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1299, out _out1300, out _out1301, out _out1302);
                  _2050_recursiveGen = _out1299;
                  _2051_recOwned = _out1300;
                  _2052_recErased = _out1301;
                  _2053_recIdents = _out1302;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2050_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2051_recOwned;
                  isErased = _2052_recErased;
                  readIdents = _2053_recIdents;
                }
              } else if (_source65.is_Seq) {
                DAST._IType _2054___mcc_h1085 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2055_recursiveGen;
                  bool _2056_recOwned;
                  bool _2057_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2058_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1303;
                  bool _out1304;
                  bool _out1305;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1306;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1303, out _out1304, out _out1305, out _out1306);
                  _2055_recursiveGen = _out1303;
                  _2056_recOwned = _out1304;
                  _2057_recErased = _out1305;
                  _2058_recIdents = _out1306;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2055_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2056_recOwned;
                  isErased = _2057_recErased;
                  readIdents = _2058_recIdents;
                }
              } else if (_source65.is_Set) {
                DAST._IType _2059___mcc_h1087 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2060_recursiveGen;
                  bool _2061_recOwned;
                  bool _2062_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2063_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1307;
                  bool _out1308;
                  bool _out1309;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1310;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1307, out _out1308, out _out1309, out _out1310);
                  _2060_recursiveGen = _out1307;
                  _2061_recOwned = _out1308;
                  _2062_recErased = _out1309;
                  _2063_recIdents = _out1310;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2060_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2061_recOwned;
                  isErased = _2062_recErased;
                  readIdents = _2063_recIdents;
                }
              } else if (_source65.is_Multiset) {
                DAST._IType _2064___mcc_h1089 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2065_recursiveGen;
                  bool _2066_recOwned;
                  bool _2067_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2068_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1311;
                  bool _out1312;
                  bool _out1313;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1314;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1311, out _out1312, out _out1313, out _out1314);
                  _2065_recursiveGen = _out1311;
                  _2066_recOwned = _out1312;
                  _2067_recErased = _out1313;
                  _2068_recIdents = _out1314;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2065_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2066_recOwned;
                  isErased = _2067_recErased;
                  readIdents = _2068_recIdents;
                }
              } else if (_source65.is_Map) {
                DAST._IType _2069___mcc_h1091 = _source65.dtor_key;
                DAST._IType _2070___mcc_h1092 = _source65.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2071_recursiveGen;
                  bool _2072_recOwned;
                  bool _2073_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2074_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1315;
                  bool _out1316;
                  bool _out1317;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1318;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1315, out _out1316, out _out1317, out _out1318);
                  _2071_recursiveGen = _out1315;
                  _2072_recOwned = _out1316;
                  _2073_recErased = _out1317;
                  _2074_recIdents = _out1318;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2071_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2072_recOwned;
                  isErased = _2073_recErased;
                  readIdents = _2074_recIdents;
                }
              } else if (_source65.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2075___mcc_h1095 = _source65.dtor_args;
                DAST._IType _2076___mcc_h1096 = _source65.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2077_recursiveGen;
                  bool _2078_recOwned;
                  bool _2079_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2080_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1319;
                  bool _out1320;
                  bool _out1321;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1322;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1319, out _out1320, out _out1321, out _out1322);
                  _2077_recursiveGen = _out1319;
                  _2078_recOwned = _out1320;
                  _2079_recErased = _out1321;
                  _2080_recIdents = _out1322;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2077_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2078_recOwned;
                  isErased = _2079_recErased;
                  readIdents = _2080_recIdents;
                }
              } else if (_source65.is_Primitive) {
                DAST._IPrimitive _2081___mcc_h1099 = _source65.dtor_Primitive_a0;
                DAST._IPrimitive _source67 = _2081___mcc_h1099;
                if (_source67.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2082_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1323;
                    _out1323 = DCOMP.COMP.GenType(_654_fromTpe, true, false);
                    _2082_rhsType = _out1323;
                    Dafny.ISequence<Dafny.Rune> _2083_recursiveGen;
                    bool _2084___v54;
                    bool _2085___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2086_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1324;
                    bool _out1325;
                    bool _out1326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1327;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, true, out _out1324, out _out1325, out _out1326, out _out1327);
                    _2083_recursiveGen = _out1324;
                    _2084___v54 = _out1325;
                    _2085___v55 = _out1326;
                    _2086_recIdents = _out1327;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2083_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2086_recIdents;
                  }
                } else if (_source67.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2087_recursiveGen;
                    bool _2088_recOwned;
                    bool _2089_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2090_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1328;
                    bool _out1329;
                    bool _out1330;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1331;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1328, out _out1329, out _out1330, out _out1331);
                    _2087_recursiveGen = _out1328;
                    _2088_recOwned = _out1329;
                    _2089_recErased = _out1330;
                    _2090_recIdents = _out1331;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2087_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2088_recOwned;
                    isErased = _2089_recErased;
                    readIdents = _2090_recIdents;
                  }
                } else if (_source67.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2091_recursiveGen;
                    bool _2092_recOwned;
                    bool _2093_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2094_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1332;
                    bool _out1333;
                    bool _out1334;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1335;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1332, out _out1333, out _out1334, out _out1335);
                    _2091_recursiveGen = _out1332;
                    _2092_recOwned = _out1333;
                    _2093_recErased = _out1334;
                    _2094_recIdents = _out1335;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2091_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2092_recOwned;
                    isErased = _2093_recErased;
                    readIdents = _2094_recIdents;
                  }
                } else if (_source67.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2095_recursiveGen;
                    bool _2096_recOwned;
                    bool _2097_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2098_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1336;
                    bool _out1337;
                    bool _out1338;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1339;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1336, out _out1337, out _out1338, out _out1339);
                    _2095_recursiveGen = _out1336;
                    _2096_recOwned = _out1337;
                    _2097_recErased = _out1338;
                    _2098_recIdents = _out1339;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2095_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2096_recOwned;
                    isErased = _2097_recErased;
                    readIdents = _2098_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2099_recursiveGen;
                    bool _2100_recOwned;
                    bool _2101_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2102_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1340;
                    bool _out1341;
                    bool _out1342;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1340, out _out1341, out _out1342, out _out1343);
                    _2099_recursiveGen = _out1340;
                    _2100_recOwned = _out1341;
                    _2101_recErased = _out1342;
                    _2102_recIdents = _out1343;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2099_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2100_recOwned;
                    isErased = _2101_recErased;
                    readIdents = _2102_recIdents;
                  }
                }
              } else if (_source65.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2103___mcc_h1101 = _source65.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2104_recursiveGen;
                  bool _2105___v62;
                  bool _2106___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2107_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1344;
                  bool _out1345;
                  bool _out1346;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1347;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, true, out _out1344, out _out1345, out _out1346, out _out1347);
                  _2104_recursiveGen = _out1344;
                  _2105___v62 = _out1345;
                  _2106___v63 = _out1346;
                  _2107_recIdents = _out1347;
                  Dafny.ISequence<Dafny.Rune> _2108_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1348;
                  _out1348 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                  _2108_toTpeGen = _out1348;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2104_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2108_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2107_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2109___mcc_h1103 = _source65.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2110_recursiveGen;
                  bool _2111_recOwned;
                  bool _2112_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2113_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1349;
                  bool _out1350;
                  bool _out1351;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1352;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1349, out _out1350, out _out1351, out _out1352);
                  _2110_recursiveGen = _out1349;
                  _2111_recOwned = _out1350;
                  _2112_recErased = _out1351;
                  _2113_recIdents = _out1352;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2110_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2111_recOwned;
                  isErased = _2112_recErased;
                  readIdents = _2113_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2114___mcc_h1105 = _source27.dtor_TypeArg_a0;
              DAST._IType _source68 = _661___mcc_h306;
              if (_source68.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2115___mcc_h1109 = _source68.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2116___mcc_h1110 = _source68.dtor_typeArgs;
                DAST._IResolvedType _2117___mcc_h1111 = _source68.dtor_resolved;
                DAST._IResolvedType _source69 = _2117___mcc_h1111;
                if (_source69.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2118___mcc_h1115 = _source69.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2119_recursiveGen;
                    bool _2120_recOwned;
                    bool _2121_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2122_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1353;
                    bool _out1354;
                    bool _out1355;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1356;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1353, out _out1354, out _out1355, out _out1356);
                    _2119_recursiveGen = _out1353;
                    _2120_recOwned = _out1354;
                    _2121_recErased = _out1355;
                    _2122_recIdents = _out1356;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2119_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2120_recOwned;
                    isErased = _2121_recErased;
                    readIdents = _2122_recIdents;
                  }
                } else if (_source69.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2123___mcc_h1117 = _source69.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2124_recursiveGen;
                    bool _2125_recOwned;
                    bool _2126_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2127_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1357;
                    bool _out1358;
                    bool _out1359;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1360;
                    DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1357, out _out1358, out _out1359, out _out1360);
                    _2124_recursiveGen = _out1357;
                    _2125_recOwned = _out1358;
                    _2126_recErased = _out1359;
                    _2127_recIdents = _out1360;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2124_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2125_recOwned;
                    isErased = _2126_recErased;
                    readIdents = _2127_recIdents;
                  }
                } else {
                  DAST._IType _2128___mcc_h1119 = _source69.dtor_Newtype_a0;
                  DAST._IType _2129_b = _2128___mcc_h1119;
                  {
                    if (object.Equals(_654_fromTpe, _2129_b)) {
                      Dafny.ISequence<Dafny.Rune> _2130_recursiveGen;
                      bool _2131_recOwned;
                      bool _2132_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2133_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1361;
                      bool _out1362;
                      bool _out1363;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1364;
                      DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1361, out _out1362, out _out1363, out _out1364);
                      _2130_recursiveGen = _out1361;
                      _2131_recOwned = _out1362;
                      _2132_recErased = _out1363;
                      _2133_recIdents = _out1364;
                      Dafny.ISequence<Dafny.Rune> _2134_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1365;
                      _out1365 = DCOMP.COMP.GenType(_653_toTpe, true, false);
                      _2134_rhsType = _out1365;
                      Dafny.ISequence<Dafny.Rune> _2135_uneraseFn;
                      _2135_uneraseFn = ((_2131_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2134_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2135_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2130_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2131_recOwned;
                      isErased = false;
                      readIdents = _2133_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1366;
                      bool _out1367;
                      bool _out1368;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1369;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_655_expr, _654_fromTpe, _2129_b), _2129_b, _653_toTpe), selfIdent, @params, mustOwn, out _out1366, out _out1367, out _out1368, out _out1369);
                      s = _out1366;
                      isOwned = _out1367;
                      isErased = _out1368;
                      readIdents = _out1369;
                    }
                  }
                }
              } else if (_source68.is_Nullable) {
                DAST._IType _2136___mcc_h1121 = _source68.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2137_recursiveGen;
                  bool _2138_recOwned;
                  bool _2139_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2140_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1370;
                  bool _out1371;
                  bool _out1372;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1373;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1370, out _out1371, out _out1372, out _out1373);
                  _2137_recursiveGen = _out1370;
                  _2138_recOwned = _out1371;
                  _2139_recErased = _out1372;
                  _2140_recIdents = _out1373;
                  if (!(_2138_recOwned)) {
                    _2137_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2137_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2137_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2139_recErased;
                  readIdents = _2140_recIdents;
                }
              } else if (_source68.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2141___mcc_h1123 = _source68.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2142_recursiveGen;
                  bool _2143_recOwned;
                  bool _2144_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2145_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1374;
                  bool _out1375;
                  bool _out1376;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1377;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1374, out _out1375, out _out1376, out _out1377);
                  _2142_recursiveGen = _out1374;
                  _2143_recOwned = _out1375;
                  _2144_recErased = _out1376;
                  _2145_recIdents = _out1377;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2142_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2143_recOwned;
                  isErased = _2144_recErased;
                  readIdents = _2145_recIdents;
                }
              } else if (_source68.is_Array) {
                DAST._IType _2146___mcc_h1125 = _source68.dtor_element;
                BigInteger _2147___mcc_h1126 = _source68.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2148_recursiveGen;
                  bool _2149_recOwned;
                  bool _2150_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2151_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1378;
                  bool _out1379;
                  bool _out1380;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1381;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1378, out _out1379, out _out1380, out _out1381);
                  _2148_recursiveGen = _out1378;
                  _2149_recOwned = _out1379;
                  _2150_recErased = _out1380;
                  _2151_recIdents = _out1381;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2148_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2149_recOwned;
                  isErased = _2150_recErased;
                  readIdents = _2151_recIdents;
                }
              } else if (_source68.is_Seq) {
                DAST._IType _2152___mcc_h1129 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2153_recursiveGen;
                  bool _2154_recOwned;
                  bool _2155_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2156_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1382;
                  bool _out1383;
                  bool _out1384;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1385;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1382, out _out1383, out _out1384, out _out1385);
                  _2153_recursiveGen = _out1382;
                  _2154_recOwned = _out1383;
                  _2155_recErased = _out1384;
                  _2156_recIdents = _out1385;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2153_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2154_recOwned;
                  isErased = _2155_recErased;
                  readIdents = _2156_recIdents;
                }
              } else if (_source68.is_Set) {
                DAST._IType _2157___mcc_h1131 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2158_recursiveGen;
                  bool _2159_recOwned;
                  bool _2160_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2161_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1386;
                  bool _out1387;
                  bool _out1388;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1389;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1386, out _out1387, out _out1388, out _out1389);
                  _2158_recursiveGen = _out1386;
                  _2159_recOwned = _out1387;
                  _2160_recErased = _out1388;
                  _2161_recIdents = _out1389;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2158_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2159_recOwned;
                  isErased = _2160_recErased;
                  readIdents = _2161_recIdents;
                }
              } else if (_source68.is_Multiset) {
                DAST._IType _2162___mcc_h1133 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2163_recursiveGen;
                  bool _2164_recOwned;
                  bool _2165_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2166_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1390;
                  bool _out1391;
                  bool _out1392;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1393;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1390, out _out1391, out _out1392, out _out1393);
                  _2163_recursiveGen = _out1390;
                  _2164_recOwned = _out1391;
                  _2165_recErased = _out1392;
                  _2166_recIdents = _out1393;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2163_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2164_recOwned;
                  isErased = _2165_recErased;
                  readIdents = _2166_recIdents;
                }
              } else if (_source68.is_Map) {
                DAST._IType _2167___mcc_h1135 = _source68.dtor_key;
                DAST._IType _2168___mcc_h1136 = _source68.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2169_recursiveGen;
                  bool _2170_recOwned;
                  bool _2171_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2172_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1394;
                  bool _out1395;
                  bool _out1396;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1397;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1394, out _out1395, out _out1396, out _out1397);
                  _2169_recursiveGen = _out1394;
                  _2170_recOwned = _out1395;
                  _2171_recErased = _out1396;
                  _2172_recIdents = _out1397;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2169_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2170_recOwned;
                  isErased = _2171_recErased;
                  readIdents = _2172_recIdents;
                }
              } else if (_source68.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2173___mcc_h1139 = _source68.dtor_args;
                DAST._IType _2174___mcc_h1140 = _source68.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2175_recursiveGen;
                  bool _2176_recOwned;
                  bool _2177_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2178_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1398;
                  bool _out1399;
                  bool _out1400;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1401;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1398, out _out1399, out _out1400, out _out1401);
                  _2175_recursiveGen = _out1398;
                  _2176_recOwned = _out1399;
                  _2177_recErased = _out1400;
                  _2178_recIdents = _out1401;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2175_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2176_recOwned;
                  isErased = _2177_recErased;
                  readIdents = _2178_recIdents;
                }
              } else if (_source68.is_Primitive) {
                DAST._IPrimitive _2179___mcc_h1143 = _source68.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2180_recursiveGen;
                  bool _2181_recOwned;
                  bool _2182_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2183_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1402;
                  bool _out1403;
                  bool _out1404;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1405;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1402, out _out1403, out _out1404, out _out1405);
                  _2180_recursiveGen = _out1402;
                  _2181_recOwned = _out1403;
                  _2182_recErased = _out1404;
                  _2183_recIdents = _out1405;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2180_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2181_recOwned;
                  isErased = _2182_recErased;
                  readIdents = _2183_recIdents;
                }
              } else if (_source68.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2184___mcc_h1145 = _source68.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2185_recursiveGen;
                  bool _2186_recOwned;
                  bool _2187_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2188_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1406;
                  bool _out1407;
                  bool _out1408;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1409;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1406, out _out1407, out _out1408, out _out1409);
                  _2185_recursiveGen = _out1406;
                  _2186_recOwned = _out1407;
                  _2187_recErased = _out1408;
                  _2188_recIdents = _out1409;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2185_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2186_recOwned;
                  isErased = _2187_recErased;
                  readIdents = _2188_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2189___mcc_h1147 = _source68.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2190_recursiveGen;
                  bool _2191_recOwned;
                  bool _2192_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2193_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1410;
                  bool _out1411;
                  bool _out1412;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1413;
                  DCOMP.COMP.GenExpr(_655_expr, selfIdent, @params, mustOwn, out _out1410, out _out1411, out _out1412, out _out1413);
                  _2190_recursiveGen = _out1410;
                  _2191_recOwned = _out1411;
                  _2192_recErased = _out1412;
                  _2193_recIdents = _out1413;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2190_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2191_recOwned;
                  isErased = _2192_recErased;
                  readIdents = _2193_recIdents;
                }
              }
            }
          }
        }
      } else if (_source20.is_SeqConstruct) {
        DAST._IExpression _2194___mcc_h26 = _source20.dtor_length;
        DAST._IExpression _2195___mcc_h27 = _source20.dtor_elem;
        DAST._IExpression _2196_expr = _2195___mcc_h27;
        DAST._IExpression _2197_length = _2194___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2198_recursiveGen;
          bool _2199___v65;
          bool _2200_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2201_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1414;
          bool _out1415;
          bool _out1416;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1417;
          DCOMP.COMP.GenExpr(_2196_expr, selfIdent, @params, true, out _out1414, out _out1415, out _out1416, out _out1417);
          _2198_recursiveGen = _out1414;
          _2199___v65 = _out1415;
          _2200_eErased = _out1416;
          _2201_recIdents = _out1417;
          Dafny.ISequence<Dafny.Rune> _2202_lengthGen;
          bool _2203___v66;
          bool _2204_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2205_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1418;
          bool _out1419;
          bool _out1420;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1421;
          DCOMP.COMP.GenExpr(_2197_length, selfIdent, @params, true, out _out1418, out _out1419, out _out1420, out _out1421);
          _2202_lengthGen = _out1418;
          _2203___v66 = _out1419;
          _2204_lengthErased = _out1420;
          _2205_lengthIdents = _out1421;
          if (!(_2204_lengthErased)) {
            _2202_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2202_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2198_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2202_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2201_recIdents, _2205_lengthIdents);
          isOwned = true;
          isErased = _2200_eErased;
        }
      } else if (_source20.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2206___mcc_h28 = _source20.dtor_elements;
        DAST._IType _2207___mcc_h29 = _source20.dtor_typ;
        DAST._IType _2208_typ = _2207___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2209_exprs = _2206___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2210_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1422;
          _out1422 = DCOMP.COMP.GenType(_2208_typ, false, false);
          _2210_genTpe = _out1422;
          BigInteger _2211_i;
          _2211_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2211_i = BigInteger.Zero;
          while ((_2211_i) < (new BigInteger((_2209_exprs).Count))) {
            if ((_2211_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2212_recursiveGen;
            bool _2213___v67;
            bool _2214_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2215_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1423;
            bool _out1424;
            bool _out1425;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1426;
            DCOMP.COMP.GenExpr((_2209_exprs).Select(_2211_i), selfIdent, @params, true, out _out1423, out _out1424, out _out1425, out _out1426);
            _2212_recursiveGen = _out1423;
            _2213___v67 = _out1424;
            _2214_isErased = _out1425;
            _2215_recIdents = _out1426;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2215_recIdents);
            if (_2214_isErased) {
              _2212_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2212_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2212_recursiveGen);
            _2211_i = (_2211_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2210_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2216___mcc_h30 = _source20.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2217_exprs = _2216___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2218_generatedValues;
          _2218_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2219_i;
          _2219_i = BigInteger.Zero;
          bool _2220_allErased;
          _2220_allErased = true;
          while ((_2219_i) < (new BigInteger((_2217_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2221_recursiveGen;
            bool _2222___v68;
            bool _2223_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2224_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1427;
            bool _out1428;
            bool _out1429;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1430;
            DCOMP.COMP.GenExpr((_2217_exprs).Select(_2219_i), selfIdent, @params, true, out _out1427, out _out1428, out _out1429, out _out1430);
            _2221_recursiveGen = _out1427;
            _2222___v68 = _out1428;
            _2223_isErased = _out1429;
            _2224_recIdents = _out1430;
            _2220_allErased = (_2220_allErased) && (_2223_isErased);
            _2218_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2218_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2221_recursiveGen, _2223_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2224_recIdents);
            _2219_i = (_2219_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2219_i = BigInteger.Zero;
          while ((_2219_i) < (new BigInteger((_2218_generatedValues).Count))) {
            if ((_2219_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2225_gen;
            _2225_gen = ((_2218_generatedValues).Select(_2219_i)).dtor__0;
            if ((((_2218_generatedValues).Select(_2219_i)).dtor__1) && (!(_2220_allErased))) {
              _2225_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2225_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2225_gen);
            _2219_i = (_2219_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2220_allErased;
        }
      } else if (_source20.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2226___mcc_h31 = _source20.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2227_mapElems = _2226___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2228_generatedValues;
          _2228_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2229_i;
          _2229_i = BigInteger.Zero;
          bool _2230_allErased;
          _2230_allErased = true;
          while ((_2229_i) < (new BigInteger((_2227_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2231_recursiveGenKey;
            bool _2232___v69;
            bool _2233_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2234_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1431;
            bool _out1432;
            bool _out1433;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1434;
            DCOMP.COMP.GenExpr(((_2227_mapElems).Select(_2229_i)).dtor__0, selfIdent, @params, true, out _out1431, out _out1432, out _out1433, out _out1434);
            _2231_recursiveGenKey = _out1431;
            _2232___v69 = _out1432;
            _2233_isErasedKey = _out1433;
            _2234_recIdentsKey = _out1434;
            Dafny.ISequence<Dafny.Rune> _2235_recursiveGenValue;
            bool _2236___v70;
            bool _2237_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2238_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1435;
            bool _out1436;
            bool _out1437;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1438;
            DCOMP.COMP.GenExpr(((_2227_mapElems).Select(_2229_i)).dtor__1, selfIdent, @params, true, out _out1435, out _out1436, out _out1437, out _out1438);
            _2235_recursiveGenValue = _out1435;
            _2236___v70 = _out1436;
            _2237_isErasedValue = _out1437;
            _2238_recIdentsValue = _out1438;
            _2230_allErased = ((_2230_allErased) && (_2233_isErasedKey)) && (_2237_isErasedValue);
            _2228_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2228_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2231_recursiveGenKey, _2235_recursiveGenValue, _2233_isErasedKey, _2237_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2234_recIdentsKey), _2238_recIdentsValue);
            _2229_i = (_2229_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2229_i = BigInteger.Zero;
          while ((_2229_i) < (new BigInteger((_2228_generatedValues).Count))) {
            if ((_2229_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2239_genKey;
            _2239_genKey = ((_2228_generatedValues).Select(_2229_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _2240_genValue;
            _2240_genValue = ((_2228_generatedValues).Select(_2229_i)).dtor__1;
            if ((((_2228_generatedValues).Select(_2229_i)).dtor__2) && (!(_2230_allErased))) {
              _2239_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2239_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2228_generatedValues).Select(_2229_i)).dtor__3) && (!(_2230_allErased))) {
              _2240_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2240_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2239_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2240_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2229_i = (_2229_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2230_allErased;
        }
      } else if (_source20.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source70 = selfIdent;
          if (_source70.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2241___mcc_h1149 = _source70.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2242_id = _2241___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_2242_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_2242_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2242_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2242_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source20.is_Ite) {
        DAST._IExpression _2243___mcc_h32 = _source20.dtor_cond;
        DAST._IExpression _2244___mcc_h33 = _source20.dtor_thn;
        DAST._IExpression _2245___mcc_h34 = _source20.dtor_els;
        DAST._IExpression _2246_f = _2245___mcc_h34;
        DAST._IExpression _2247_t = _2244___mcc_h33;
        DAST._IExpression _2248_cond = _2243___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _2249_condString;
          bool _2250___v71;
          bool _2251_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2252_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1439;
          bool _out1440;
          bool _out1441;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1442;
          DCOMP.COMP.GenExpr(_2248_cond, selfIdent, @params, true, out _out1439, out _out1440, out _out1441, out _out1442);
          _2249_condString = _out1439;
          _2250___v71 = _out1440;
          _2251_condErased = _out1441;
          _2252_recIdentsCond = _out1442;
          if (!(_2251_condErased)) {
            _2249_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2249_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _2253___v72;
          bool _2254_tHasToBeOwned;
          bool _2255___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2256___v74;
          Dafny.ISequence<Dafny.Rune> _out1443;
          bool _out1444;
          bool _out1445;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1446;
          DCOMP.COMP.GenExpr(_2247_t, selfIdent, @params, mustOwn, out _out1443, out _out1444, out _out1445, out _out1446);
          _2253___v72 = _out1443;
          _2254_tHasToBeOwned = _out1444;
          _2255___v73 = _out1445;
          _2256___v74 = _out1446;
          Dafny.ISequence<Dafny.Rune> _2257_fString;
          bool _2258_fOwned;
          bool _2259_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2260_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1447;
          bool _out1448;
          bool _out1449;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1450;
          DCOMP.COMP.GenExpr(_2246_f, selfIdent, @params, _2254_tHasToBeOwned, out _out1447, out _out1448, out _out1449, out _out1450);
          _2257_fString = _out1447;
          _2258_fOwned = _out1448;
          _2259_fErased = _out1449;
          _2260_recIdentsF = _out1450;
          Dafny.ISequence<Dafny.Rune> _2261_tString;
          bool _2262___v75;
          bool _2263_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2264_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1451;
          bool _out1452;
          bool _out1453;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1454;
          DCOMP.COMP.GenExpr(_2247_t, selfIdent, @params, _2258_fOwned, out _out1451, out _out1452, out _out1453, out _out1454);
          _2261_tString = _out1451;
          _2262___v75 = _out1452;
          _2263_tErased = _out1453;
          _2264_recIdentsT = _out1454;
          if ((!(_2259_fErased)) || (!(_2263_tErased))) {
            if (_2259_fErased) {
              _2257_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2257_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_2263_tErased) {
              _2261_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2261_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _2249_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2261_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _2257_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _2258_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2252_recIdentsCond, _2264_recIdentsT), _2260_recIdentsF);
          isErased = (_2259_fErased) || (_2263_tErased);
        }
      } else if (_source20.is_UnOp) {
        DAST._IUnaryOp _2265___mcc_h35 = _source20.dtor_unOp;
        DAST._IExpression _2266___mcc_h36 = _source20.dtor_expr;
        DAST._IUnaryOp _source71 = _2265___mcc_h35;
        if (_source71.is_Not) {
          DAST._IExpression _2267_e = _2266___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2268_recursiveGen;
            bool _2269___v76;
            bool _2270_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2271_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1455;
            bool _out1456;
            bool _out1457;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1458;
            DCOMP.COMP.GenExpr(_2267_e, selfIdent, @params, true, out _out1455, out _out1456, out _out1457, out _out1458);
            _2268_recursiveGen = _out1455;
            _2269___v76 = _out1456;
            _2270_recErased = _out1457;
            _2271_recIdents = _out1458;
            if (!(_2270_recErased)) {
              _2268_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2268_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2268_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2271_recIdents;
            isErased = true;
          }
        } else if (_source71.is_BitwiseNot) {
          DAST._IExpression _2272_e = _2266___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2273_recursiveGen;
            bool _2274___v77;
            bool _2275_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2276_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1459;
            bool _out1460;
            bool _out1461;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1462;
            DCOMP.COMP.GenExpr(_2272_e, selfIdent, @params, true, out _out1459, out _out1460, out _out1461, out _out1462);
            _2273_recursiveGen = _out1459;
            _2274___v77 = _out1460;
            _2275_recErased = _out1461;
            _2276_recIdents = _out1462;
            if (!(_2275_recErased)) {
              _2273_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2273_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _2273_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2276_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _2277_e = _2266___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2278_recursiveGen;
            bool _2279_recOwned;
            bool _2280_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2281_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1463;
            bool _out1464;
            bool _out1465;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1466;
            DCOMP.COMP.GenExpr(_2277_e, selfIdent, @params, false, out _out1463, out _out1464, out _out1465, out _out1466);
            _2278_recursiveGen = _out1463;
            _2279_recOwned = _out1464;
            _2280_recErased = _out1465;
            _2281_recIdents = _out1466;
            if (!(_2280_recErased)) {
              Dafny.ISequence<Dafny.Rune> _2282_eraseFn;
              _2282_eraseFn = ((_2279_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _2278_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2282_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2278_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2278_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _2281_recIdents;
            isErased = true;
          }
        }
      } else if (_source20.is_BinOp) {
        DAST._IBinOp _2283___mcc_h37 = _source20.dtor_op;
        DAST._IExpression _2284___mcc_h38 = _source20.dtor_left;
        DAST._IExpression _2285___mcc_h39 = _source20.dtor_right;
        DAST._IExpression _2286_r = _2285___mcc_h39;
        DAST._IExpression _2287_l = _2284___mcc_h38;
        DAST._IBinOp _2288_op = _2283___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _2289_left;
          bool _2290___v78;
          bool _2291_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2292_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1467;
          bool _out1468;
          bool _out1469;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1470;
          DCOMP.COMP.GenExpr(_2287_l, selfIdent, @params, true, out _out1467, out _out1468, out _out1469, out _out1470);
          _2289_left = _out1467;
          _2290___v78 = _out1468;
          _2291_leftErased = _out1469;
          _2292_recIdentsL = _out1470;
          Dafny.ISequence<Dafny.Rune> _2293_right;
          bool _2294___v79;
          bool _2295_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2296_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1471;
          bool _out1472;
          bool _out1473;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1474;
          DCOMP.COMP.GenExpr(_2286_r, selfIdent, @params, true, out _out1471, out _out1472, out _out1473, out _out1474);
          _2293_right = _out1471;
          _2294___v79 = _out1472;
          _2295_rightErased = _out1473;
          _2296_recIdentsR = _out1474;
          DAST._IBinOp _source72 = _2288_op;
          if (_source72.is_Eq) {
            {
              if (!(_2291_leftErased)) {
                _2289_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2295_rightErased)) {
                _2293_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source73 = _2288_op;
              if (_source73.is_Eq) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2289_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2293_right);
                }
              } else if (_source73.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2297___mcc_h1152 = _source73.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2298_op = _2297___mcc_h1152;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2298_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Div) {
            {
              if (!(_2291_leftErased)) {
                _2289_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2295_rightErased)) {
                _2293_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source74 = _2288_op;
              if (_source74.is_Eq) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2289_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2293_right);
                }
              } else if (_source74.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2299___mcc_h1153 = _source74.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2300_op = _2299___mcc_h1153;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2300_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_EuclidianDiv) {
            {
              if (!(_2291_leftErased)) {
                _2289_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2295_rightErased)) {
                _2293_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source75 = _2288_op;
              if (_source75.is_Eq) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2289_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2293_right);
                }
              } else if (_source75.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2301___mcc_h1154 = _source75.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2302_op = _2301___mcc_h1154;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2302_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Mod) {
            {
              if (!(_2291_leftErased)) {
                _2289_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2295_rightErased)) {
                _2293_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source76 = _2288_op;
              if (_source76.is_Eq) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2289_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2293_right);
                }
              } else if (_source76.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2303___mcc_h1155 = _source76.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2304_op = _2303___mcc_h1155;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2304_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_EuclidianMod) {
            {
              if (!(_2291_leftErased)) {
                _2289_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2295_rightErased)) {
                _2293_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source77 = _2288_op;
              if (_source77.is_Eq) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2289_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2293_right);
                }
              } else if (_source77.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2305___mcc_h1156 = _source77.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2306_op = _2305___mcc_h1156;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2306_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _2293_right);
            }
          } else if (_source72.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source72.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source72.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2289_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source72.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2307___mcc_h1150 = _source72.dtor_Passthrough_a0;
            {
              if (!(_2291_leftErased)) {
                _2289_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2295_rightErased)) {
                _2293_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source78 = _2288_op;
              if (_source78.is_Eq) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2289_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2293_right);
                }
              } else if (_source78.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2308___mcc_h1157 = _source78.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2309_op = _2308___mcc_h1157;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2309_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2293_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2292_recIdentsL, _2296_recIdentsR);
          isErased = true;
        }
      } else if (_source20.is_ArrayLen) {
        DAST._IExpression _2310___mcc_h40 = _source20.dtor_expr;
        BigInteger _2311___mcc_h41 = _source20.dtor_dim;
        BigInteger _2312_dim = _2311___mcc_h41;
        DAST._IExpression _2313_expr = _2310___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _2314_recursiveGen;
          bool _2315___v81;
          bool _2316_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2317_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1475;
          bool _out1476;
          bool _out1477;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1478;
          DCOMP.COMP.GenExpr(_2313_expr, selfIdent, @params, true, out _out1475, out _out1476, out _out1477, out _out1478);
          _2314_recursiveGen = _out1475;
          _2315___v81 = _out1476;
          _2316_recErased = _out1477;
          _2317_recIdents = _out1478;
          if ((_2312_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2314_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _2318_i;
            _2318_i = BigInteger.One;
            while ((_2318_i) < (_2312_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _2318_i = (_2318_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2314_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _2317_recIdents;
          isErased = true;
        }
      } else if (_source20.is_Select) {
        DAST._IExpression _2319___mcc_h42 = _source20.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2320___mcc_h43 = _source20.dtor_field;
        bool _2321___mcc_h44 = _source20.dtor_isConstant;
        bool _2322___mcc_h45 = _source20.dtor_onDatatype;
        DAST._IExpression _source79 = _2319___mcc_h42;
        if (_source79.is_Literal) {
          DAST._ILiteral _2323___mcc_h46 = _source79.dtor_Literal_a0;
          bool _2324_isDatatype = _2322___mcc_h45;
          bool _2325_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2326_field = _2320___mcc_h43;
          DAST._IExpression _2327_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2328_onString;
            bool _2329_onOwned;
            bool _2330_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2331_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1479;
            bool _out1480;
            bool _out1481;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1482;
            DCOMP.COMP.GenExpr(_2327_on, selfIdent, @params, false, out _out1479, out _out1480, out _out1481, out _out1482);
            _2328_onString = _out1479;
            _2329_onOwned = _out1480;
            _2330_onErased = _out1481;
            _2331_recIdents = _out1482;
            if ((_2324_isDatatype) || (_2325_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2328_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2326_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2325_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2328_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2326_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2331_recIdents;
          }
        } else if (_source79.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _2332___mcc_h48 = _source79.dtor_Ident_a0;
          bool _2333_isDatatype = _2322___mcc_h45;
          bool _2334_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2335_field = _2320___mcc_h43;
          DAST._IExpression _2336_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2337_onString;
            bool _2338_onOwned;
            bool _2339_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2340_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1483;
            bool _out1484;
            bool _out1485;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1486;
            DCOMP.COMP.GenExpr(_2336_on, selfIdent, @params, false, out _out1483, out _out1484, out _out1485, out _out1486);
            _2337_onString = _out1483;
            _2338_onOwned = _out1484;
            _2339_onErased = _out1485;
            _2340_recIdents = _out1486;
            if ((_2333_isDatatype) || (_2334_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2337_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2335_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2334_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2337_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2335_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2340_recIdents;
          }
        } else if (_source79.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2341___mcc_h50 = _source79.dtor_Companion_a0;
          bool _2342_isDatatype = _2322___mcc_h45;
          bool _2343_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2344_field = _2320___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2345_c = _2341___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _2346_onString;
            bool _2347_onOwned;
            bool _2348_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2349_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1487;
            bool _out1488;
            bool _out1489;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1490;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_2345_c), selfIdent, @params, false, out _out1487, out _out1488, out _out1489, out _out1490);
            _2346_onString = _out1487;
            _2347_onOwned = _out1488;
            _2348_onErased = _out1489;
            _2349_recIdents = _out1490;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2346_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2344_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _2349_recIdents;
          }
        } else if (_source79.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _2350___mcc_h52 = _source79.dtor_Tuple_a0;
          bool _2351_isDatatype = _2322___mcc_h45;
          bool _2352_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2353_field = _2320___mcc_h43;
          DAST._IExpression _2354_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2355_onString;
            bool _2356_onOwned;
            bool _2357_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2358_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1491;
            bool _out1492;
            bool _out1493;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1494;
            DCOMP.COMP.GenExpr(_2354_on, selfIdent, @params, false, out _out1491, out _out1492, out _out1493, out _out1494);
            _2355_onString = _out1491;
            _2356_onOwned = _out1492;
            _2357_onErased = _out1493;
            _2358_recIdents = _out1494;
            if ((_2351_isDatatype) || (_2352_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2355_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2353_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2352_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2355_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2353_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2358_recIdents;
          }
        } else if (_source79.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2359___mcc_h54 = _source79.dtor_path;
          Dafny.ISequence<DAST._IType> _2360___mcc_h55 = _source79.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2361___mcc_h56 = _source79.dtor_args;
          bool _2362_isDatatype = _2322___mcc_h45;
          bool _2363_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2364_field = _2320___mcc_h43;
          DAST._IExpression _2365_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2366_onString;
            bool _2367_onOwned;
            bool _2368_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2369_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1495;
            bool _out1496;
            bool _out1497;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1498;
            DCOMP.COMP.GenExpr(_2365_on, selfIdent, @params, false, out _out1495, out _out1496, out _out1497, out _out1498);
            _2366_onString = _out1495;
            _2367_onOwned = _out1496;
            _2368_onErased = _out1497;
            _2369_recIdents = _out1498;
            if ((_2362_isDatatype) || (_2363_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2366_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2364_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2363_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2366_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2364_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2369_recIdents;
          }
        } else if (_source79.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _2370___mcc_h60 = _source79.dtor_dims;
          DAST._IType _2371___mcc_h61 = _source79.dtor_typ;
          bool _2372_isDatatype = _2322___mcc_h45;
          bool _2373_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2374_field = _2320___mcc_h43;
          DAST._IExpression _2375_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2376_onString;
            bool _2377_onOwned;
            bool _2378_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2379_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1499;
            bool _out1500;
            bool _out1501;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1502;
            DCOMP.COMP.GenExpr(_2375_on, selfIdent, @params, false, out _out1499, out _out1500, out _out1501, out _out1502);
            _2376_onString = _out1499;
            _2377_onOwned = _out1500;
            _2378_onErased = _out1501;
            _2379_recIdents = _out1502;
            if ((_2372_isDatatype) || (_2373_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2376_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2374_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2373_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2376_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2374_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2379_recIdents;
          }
        } else if (_source79.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2380___mcc_h64 = _source79.dtor_path;
          Dafny.ISequence<DAST._IType> _2381___mcc_h65 = _source79.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _2382___mcc_h66 = _source79.dtor_variant;
          bool _2383___mcc_h67 = _source79.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2384___mcc_h68 = _source79.dtor_contents;
          bool _2385_isDatatype = _2322___mcc_h45;
          bool _2386_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2387_field = _2320___mcc_h43;
          DAST._IExpression _2388_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2389_onString;
            bool _2390_onOwned;
            bool _2391_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2392_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1503;
            bool _out1504;
            bool _out1505;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1506;
            DCOMP.COMP.GenExpr(_2388_on, selfIdent, @params, false, out _out1503, out _out1504, out _out1505, out _out1506);
            _2389_onString = _out1503;
            _2390_onOwned = _out1504;
            _2391_onErased = _out1505;
            _2392_recIdents = _out1506;
            if ((_2385_isDatatype) || (_2386_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2389_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2387_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2386_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2389_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2387_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2392_recIdents;
          }
        } else if (_source79.is_Convert) {
          DAST._IExpression _2393___mcc_h74 = _source79.dtor_value;
          DAST._IType _2394___mcc_h75 = _source79.dtor_from;
          DAST._IType _2395___mcc_h76 = _source79.dtor_typ;
          bool _2396_isDatatype = _2322___mcc_h45;
          bool _2397_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2398_field = _2320___mcc_h43;
          DAST._IExpression _2399_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2400_onString;
            bool _2401_onOwned;
            bool _2402_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2403_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1507;
            bool _out1508;
            bool _out1509;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1510;
            DCOMP.COMP.GenExpr(_2399_on, selfIdent, @params, false, out _out1507, out _out1508, out _out1509, out _out1510);
            _2400_onString = _out1507;
            _2401_onOwned = _out1508;
            _2402_onErased = _out1509;
            _2403_recIdents = _out1510;
            if ((_2396_isDatatype) || (_2397_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2400_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2398_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2397_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2400_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2398_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2403_recIdents;
          }
        } else if (_source79.is_SeqConstruct) {
          DAST._IExpression _2404___mcc_h80 = _source79.dtor_length;
          DAST._IExpression _2405___mcc_h81 = _source79.dtor_elem;
          bool _2406_isDatatype = _2322___mcc_h45;
          bool _2407_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2408_field = _2320___mcc_h43;
          DAST._IExpression _2409_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2410_onString;
            bool _2411_onOwned;
            bool _2412_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2413_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1511;
            bool _out1512;
            bool _out1513;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1514;
            DCOMP.COMP.GenExpr(_2409_on, selfIdent, @params, false, out _out1511, out _out1512, out _out1513, out _out1514);
            _2410_onString = _out1511;
            _2411_onOwned = _out1512;
            _2412_onErased = _out1513;
            _2413_recIdents = _out1514;
            if ((_2406_isDatatype) || (_2407_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2410_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2408_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2407_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2410_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2408_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2413_recIdents;
          }
        } else if (_source79.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _2414___mcc_h84 = _source79.dtor_elements;
          DAST._IType _2415___mcc_h85 = _source79.dtor_typ;
          bool _2416_isDatatype = _2322___mcc_h45;
          bool _2417_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2418_field = _2320___mcc_h43;
          DAST._IExpression _2419_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2420_onString;
            bool _2421_onOwned;
            bool _2422_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2423_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1515;
            bool _out1516;
            bool _out1517;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1518;
            DCOMP.COMP.GenExpr(_2419_on, selfIdent, @params, false, out _out1515, out _out1516, out _out1517, out _out1518);
            _2420_onString = _out1515;
            _2421_onOwned = _out1516;
            _2422_onErased = _out1517;
            _2423_recIdents = _out1518;
            if ((_2416_isDatatype) || (_2417_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2420_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2418_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2417_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2420_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2418_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2423_recIdents;
          }
        } else if (_source79.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _2424___mcc_h88 = _source79.dtor_elements;
          bool _2425_isDatatype = _2322___mcc_h45;
          bool _2426_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2427_field = _2320___mcc_h43;
          DAST._IExpression _2428_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2429_onString;
            bool _2430_onOwned;
            bool _2431_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2432_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1519;
            bool _out1520;
            bool _out1521;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1522;
            DCOMP.COMP.GenExpr(_2428_on, selfIdent, @params, false, out _out1519, out _out1520, out _out1521, out _out1522);
            _2429_onString = _out1519;
            _2430_onOwned = _out1520;
            _2431_onErased = _out1521;
            _2432_recIdents = _out1522;
            if ((_2425_isDatatype) || (_2426_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2429_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2427_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2426_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2429_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2427_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2432_recIdents;
          }
        } else if (_source79.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2433___mcc_h90 = _source79.dtor_mapElems;
          bool _2434_isDatatype = _2322___mcc_h45;
          bool _2435_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2436_field = _2320___mcc_h43;
          DAST._IExpression _2437_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2438_onString;
            bool _2439_onOwned;
            bool _2440_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2441_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1523;
            bool _out1524;
            bool _out1525;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1526;
            DCOMP.COMP.GenExpr(_2437_on, selfIdent, @params, false, out _out1523, out _out1524, out _out1525, out _out1526);
            _2438_onString = _out1523;
            _2439_onOwned = _out1524;
            _2440_onErased = _out1525;
            _2441_recIdents = _out1526;
            if ((_2434_isDatatype) || (_2435_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2438_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2436_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2435_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2438_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2436_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2441_recIdents;
          }
        } else if (_source79.is_This) {
          bool _2442_isDatatype = _2322___mcc_h45;
          bool _2443_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2444_field = _2320___mcc_h43;
          DAST._IExpression _2445_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2446_onString;
            bool _2447_onOwned;
            bool _2448_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2449_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1527;
            bool _out1528;
            bool _out1529;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1530;
            DCOMP.COMP.GenExpr(_2445_on, selfIdent, @params, false, out _out1527, out _out1528, out _out1529, out _out1530);
            _2446_onString = _out1527;
            _2447_onOwned = _out1528;
            _2448_onErased = _out1529;
            _2449_recIdents = _out1530;
            if ((_2442_isDatatype) || (_2443_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2446_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2444_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2443_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2446_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2444_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2449_recIdents;
          }
        } else if (_source79.is_Ite) {
          DAST._IExpression _2450___mcc_h92 = _source79.dtor_cond;
          DAST._IExpression _2451___mcc_h93 = _source79.dtor_thn;
          DAST._IExpression _2452___mcc_h94 = _source79.dtor_els;
          bool _2453_isDatatype = _2322___mcc_h45;
          bool _2454_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2455_field = _2320___mcc_h43;
          DAST._IExpression _2456_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2457_onString;
            bool _2458_onOwned;
            bool _2459_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2460_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1531;
            bool _out1532;
            bool _out1533;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1534;
            DCOMP.COMP.GenExpr(_2456_on, selfIdent, @params, false, out _out1531, out _out1532, out _out1533, out _out1534);
            _2457_onString = _out1531;
            _2458_onOwned = _out1532;
            _2459_onErased = _out1533;
            _2460_recIdents = _out1534;
            if ((_2453_isDatatype) || (_2454_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2457_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2455_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2454_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2457_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2455_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2460_recIdents;
          }
        } else if (_source79.is_UnOp) {
          DAST._IUnaryOp _2461___mcc_h98 = _source79.dtor_unOp;
          DAST._IExpression _2462___mcc_h99 = _source79.dtor_expr;
          bool _2463_isDatatype = _2322___mcc_h45;
          bool _2464_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2465_field = _2320___mcc_h43;
          DAST._IExpression _2466_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2467_onString;
            bool _2468_onOwned;
            bool _2469_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2470_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1535;
            bool _out1536;
            bool _out1537;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1538;
            DCOMP.COMP.GenExpr(_2466_on, selfIdent, @params, false, out _out1535, out _out1536, out _out1537, out _out1538);
            _2467_onString = _out1535;
            _2468_onOwned = _out1536;
            _2469_onErased = _out1537;
            _2470_recIdents = _out1538;
            if ((_2463_isDatatype) || (_2464_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2467_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2465_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2464_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2467_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2465_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2470_recIdents;
          }
        } else if (_source79.is_BinOp) {
          DAST._IBinOp _2471___mcc_h102 = _source79.dtor_op;
          DAST._IExpression _2472___mcc_h103 = _source79.dtor_left;
          DAST._IExpression _2473___mcc_h104 = _source79.dtor_right;
          bool _2474_isDatatype = _2322___mcc_h45;
          bool _2475_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2476_field = _2320___mcc_h43;
          DAST._IExpression _2477_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2478_onString;
            bool _2479_onOwned;
            bool _2480_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2481_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1539;
            bool _out1540;
            bool _out1541;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1542;
            DCOMP.COMP.GenExpr(_2477_on, selfIdent, @params, false, out _out1539, out _out1540, out _out1541, out _out1542);
            _2478_onString = _out1539;
            _2479_onOwned = _out1540;
            _2480_onErased = _out1541;
            _2481_recIdents = _out1542;
            if ((_2474_isDatatype) || (_2475_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2478_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2476_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2475_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2478_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2476_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2481_recIdents;
          }
        } else if (_source79.is_ArrayLen) {
          DAST._IExpression _2482___mcc_h108 = _source79.dtor_expr;
          BigInteger _2483___mcc_h109 = _source79.dtor_dim;
          bool _2484_isDatatype = _2322___mcc_h45;
          bool _2485_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2486_field = _2320___mcc_h43;
          DAST._IExpression _2487_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2488_onString;
            bool _2489_onOwned;
            bool _2490_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2491_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1543;
            bool _out1544;
            bool _out1545;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1546;
            DCOMP.COMP.GenExpr(_2487_on, selfIdent, @params, false, out _out1543, out _out1544, out _out1545, out _out1546);
            _2488_onString = _out1543;
            _2489_onOwned = _out1544;
            _2490_onErased = _out1545;
            _2491_recIdents = _out1546;
            if ((_2484_isDatatype) || (_2485_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2488_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2486_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2485_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2488_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2486_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2491_recIdents;
          }
        } else if (_source79.is_Select) {
          DAST._IExpression _2492___mcc_h112 = _source79.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2493___mcc_h113 = _source79.dtor_field;
          bool _2494___mcc_h114 = _source79.dtor_isConstant;
          bool _2495___mcc_h115 = _source79.dtor_onDatatype;
          bool _2496_isDatatype = _2322___mcc_h45;
          bool _2497_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2498_field = _2320___mcc_h43;
          DAST._IExpression _2499_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2500_onString;
            bool _2501_onOwned;
            bool _2502_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2503_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1547;
            bool _out1548;
            bool _out1549;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1550;
            DCOMP.COMP.GenExpr(_2499_on, selfIdent, @params, false, out _out1547, out _out1548, out _out1549, out _out1550);
            _2500_onString = _out1547;
            _2501_onOwned = _out1548;
            _2502_onErased = _out1549;
            _2503_recIdents = _out1550;
            if ((_2496_isDatatype) || (_2497_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2500_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2498_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2497_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2500_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2498_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2503_recIdents;
          }
        } else if (_source79.is_SelectFn) {
          DAST._IExpression _2504___mcc_h120 = _source79.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2505___mcc_h121 = _source79.dtor_field;
          bool _2506___mcc_h122 = _source79.dtor_onDatatype;
          bool _2507___mcc_h123 = _source79.dtor_isStatic;
          BigInteger _2508___mcc_h124 = _source79.dtor_arity;
          bool _2509_isDatatype = _2322___mcc_h45;
          bool _2510_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2511_field = _2320___mcc_h43;
          DAST._IExpression _2512_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2513_onString;
            bool _2514_onOwned;
            bool _2515_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2516_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1551;
            bool _out1552;
            bool _out1553;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1554;
            DCOMP.COMP.GenExpr(_2512_on, selfIdent, @params, false, out _out1551, out _out1552, out _out1553, out _out1554);
            _2513_onString = _out1551;
            _2514_onOwned = _out1552;
            _2515_onErased = _out1553;
            _2516_recIdents = _out1554;
            if ((_2509_isDatatype) || (_2510_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2513_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2511_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2510_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2513_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2511_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2516_recIdents;
          }
        } else if (_source79.is_Index) {
          DAST._IExpression _2517___mcc_h130 = _source79.dtor_expr;
          DAST._ICollKind _2518___mcc_h131 = _source79.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _2519___mcc_h132 = _source79.dtor_indices;
          bool _2520_isDatatype = _2322___mcc_h45;
          bool _2521_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2522_field = _2320___mcc_h43;
          DAST._IExpression _2523_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2524_onString;
            bool _2525_onOwned;
            bool _2526_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2527_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1555;
            bool _out1556;
            bool _out1557;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1558;
            DCOMP.COMP.GenExpr(_2523_on, selfIdent, @params, false, out _out1555, out _out1556, out _out1557, out _out1558);
            _2524_onString = _out1555;
            _2525_onOwned = _out1556;
            _2526_onErased = _out1557;
            _2527_recIdents = _out1558;
            if ((_2520_isDatatype) || (_2521_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2524_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2522_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2521_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2524_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2522_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2527_recIdents;
          }
        } else if (_source79.is_IndexRange) {
          DAST._IExpression _2528___mcc_h136 = _source79.dtor_expr;
          bool _2529___mcc_h137 = _source79.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _2530___mcc_h138 = _source79.dtor_low;
          DAST._IOptional<DAST._IExpression> _2531___mcc_h139 = _source79.dtor_high;
          bool _2532_isDatatype = _2322___mcc_h45;
          bool _2533_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2534_field = _2320___mcc_h43;
          DAST._IExpression _2535_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2536_onString;
            bool _2537_onOwned;
            bool _2538_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2539_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1559;
            bool _out1560;
            bool _out1561;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1562;
            DCOMP.COMP.GenExpr(_2535_on, selfIdent, @params, false, out _out1559, out _out1560, out _out1561, out _out1562);
            _2536_onString = _out1559;
            _2537_onOwned = _out1560;
            _2538_onErased = _out1561;
            _2539_recIdents = _out1562;
            if ((_2532_isDatatype) || (_2533_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2536_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2534_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2533_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2536_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2534_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2539_recIdents;
          }
        } else if (_source79.is_TupleSelect) {
          DAST._IExpression _2540___mcc_h144 = _source79.dtor_expr;
          BigInteger _2541___mcc_h145 = _source79.dtor_index;
          bool _2542_isDatatype = _2322___mcc_h45;
          bool _2543_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2544_field = _2320___mcc_h43;
          DAST._IExpression _2545_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2546_onString;
            bool _2547_onOwned;
            bool _2548_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2549_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1563;
            bool _out1564;
            bool _out1565;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1566;
            DCOMP.COMP.GenExpr(_2545_on, selfIdent, @params, false, out _out1563, out _out1564, out _out1565, out _out1566);
            _2546_onString = _out1563;
            _2547_onOwned = _out1564;
            _2548_onErased = _out1565;
            _2549_recIdents = _out1566;
            if ((_2542_isDatatype) || (_2543_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2546_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2544_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2543_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2546_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2544_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2549_recIdents;
          }
        } else if (_source79.is_Call) {
          DAST._IExpression _2550___mcc_h148 = _source79.dtor_on;
          Dafny.ISequence<Dafny.Rune> _2551___mcc_h149 = _source79.dtor_name;
          Dafny.ISequence<DAST._IType> _2552___mcc_h150 = _source79.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2553___mcc_h151 = _source79.dtor_args;
          bool _2554_isDatatype = _2322___mcc_h45;
          bool _2555_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2556_field = _2320___mcc_h43;
          DAST._IExpression _2557_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2558_onString;
            bool _2559_onOwned;
            bool _2560_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2561_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1567;
            bool _out1568;
            bool _out1569;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1570;
            DCOMP.COMP.GenExpr(_2557_on, selfIdent, @params, false, out _out1567, out _out1568, out _out1569, out _out1570);
            _2558_onString = _out1567;
            _2559_onOwned = _out1568;
            _2560_onErased = _out1569;
            _2561_recIdents = _out1570;
            if ((_2554_isDatatype) || (_2555_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2558_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2556_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2555_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2558_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2556_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2561_recIdents;
          }
        } else if (_source79.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _2562___mcc_h156 = _source79.dtor_params;
          DAST._IType _2563___mcc_h157 = _source79.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _2564___mcc_h158 = _source79.dtor_body;
          bool _2565_isDatatype = _2322___mcc_h45;
          bool _2566_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2567_field = _2320___mcc_h43;
          DAST._IExpression _2568_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2569_onString;
            bool _2570_onOwned;
            bool _2571_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2572_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1571;
            bool _out1572;
            bool _out1573;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1574;
            DCOMP.COMP.GenExpr(_2568_on, selfIdent, @params, false, out _out1571, out _out1572, out _out1573, out _out1574);
            _2569_onString = _out1571;
            _2570_onOwned = _out1572;
            _2571_onErased = _out1573;
            _2572_recIdents = _out1574;
            if ((_2565_isDatatype) || (_2566_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2569_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2567_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2566_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2569_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2567_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2572_recIdents;
          }
        } else if (_source79.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2573___mcc_h162 = _source79.dtor_values;
          DAST._IType _2574___mcc_h163 = _source79.dtor_retType;
          DAST._IExpression _2575___mcc_h164 = _source79.dtor_expr;
          bool _2576_isDatatype = _2322___mcc_h45;
          bool _2577_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2578_field = _2320___mcc_h43;
          DAST._IExpression _2579_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2580_onString;
            bool _2581_onOwned;
            bool _2582_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2583_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1575;
            bool _out1576;
            bool _out1577;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1578;
            DCOMP.COMP.GenExpr(_2579_on, selfIdent, @params, false, out _out1575, out _out1576, out _out1577, out _out1578);
            _2580_onString = _out1575;
            _2581_onOwned = _out1576;
            _2582_onErased = _out1577;
            _2583_recIdents = _out1578;
            if ((_2576_isDatatype) || (_2577_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2580_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2578_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2577_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2580_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2578_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2583_recIdents;
          }
        } else if (_source79.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _2584___mcc_h168 = _source79.dtor_name;
          DAST._IType _2585___mcc_h169 = _source79.dtor_typ;
          DAST._IExpression _2586___mcc_h170 = _source79.dtor_value;
          DAST._IExpression _2587___mcc_h171 = _source79.dtor_iifeBody;
          bool _2588_isDatatype = _2322___mcc_h45;
          bool _2589_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2590_field = _2320___mcc_h43;
          DAST._IExpression _2591_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2592_onString;
            bool _2593_onOwned;
            bool _2594_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2595_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1579;
            bool _out1580;
            bool _out1581;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1582;
            DCOMP.COMP.GenExpr(_2591_on, selfIdent, @params, false, out _out1579, out _out1580, out _out1581, out _out1582);
            _2592_onString = _out1579;
            _2593_onOwned = _out1580;
            _2594_onErased = _out1581;
            _2595_recIdents = _out1582;
            if ((_2588_isDatatype) || (_2589_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2592_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2590_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2589_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2592_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2590_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2595_recIdents;
          }
        } else if (_source79.is_Apply) {
          DAST._IExpression _2596___mcc_h176 = _source79.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _2597___mcc_h177 = _source79.dtor_args;
          bool _2598_isDatatype = _2322___mcc_h45;
          bool _2599_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2600_field = _2320___mcc_h43;
          DAST._IExpression _2601_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2602_onString;
            bool _2603_onOwned;
            bool _2604_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2605_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1583;
            bool _out1584;
            bool _out1585;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1586;
            DCOMP.COMP.GenExpr(_2601_on, selfIdent, @params, false, out _out1583, out _out1584, out _out1585, out _out1586);
            _2602_onString = _out1583;
            _2603_onOwned = _out1584;
            _2604_onErased = _out1585;
            _2605_recIdents = _out1586;
            if ((_2598_isDatatype) || (_2599_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2602_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2600_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2599_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2602_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2600_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2605_recIdents;
          }
        } else if (_source79.is_TypeTest) {
          DAST._IExpression _2606___mcc_h180 = _source79.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2607___mcc_h181 = _source79.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _2608___mcc_h182 = _source79.dtor_variant;
          bool _2609_isDatatype = _2322___mcc_h45;
          bool _2610_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2611_field = _2320___mcc_h43;
          DAST._IExpression _2612_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2613_onString;
            bool _2614_onOwned;
            bool _2615_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2616_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1587;
            bool _out1588;
            bool _out1589;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1590;
            DCOMP.COMP.GenExpr(_2612_on, selfIdent, @params, false, out _out1587, out _out1588, out _out1589, out _out1590);
            _2613_onString = _out1587;
            _2614_onOwned = _out1588;
            _2615_onErased = _out1589;
            _2616_recIdents = _out1590;
            if ((_2609_isDatatype) || (_2610_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2611_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2610_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2613_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2611_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2616_recIdents;
          }
        } else if (_source79.is_InitializationValue) {
          DAST._IType _2617___mcc_h186 = _source79.dtor_typ;
          bool _2618_isDatatype = _2322___mcc_h45;
          bool _2619_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2620_field = _2320___mcc_h43;
          DAST._IExpression _2621_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2622_onString;
            bool _2623_onOwned;
            bool _2624_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2625_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1591;
            bool _out1592;
            bool _out1593;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1594;
            DCOMP.COMP.GenExpr(_2621_on, selfIdent, @params, false, out _out1591, out _out1592, out _out1593, out _out1594);
            _2622_onString = _out1591;
            _2623_onOwned = _out1592;
            _2624_onErased = _out1593;
            _2625_recIdents = _out1594;
            if ((_2618_isDatatype) || (_2619_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2622_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2620_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2619_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2622_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2620_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2625_recIdents;
          }
        } else if (_source79.is_BoolBoundedPool) {
          bool _2626_isDatatype = _2322___mcc_h45;
          bool _2627_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2628_field = _2320___mcc_h43;
          DAST._IExpression _2629_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2630_onString;
            bool _2631_onOwned;
            bool _2632_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2633_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1595;
            bool _out1596;
            bool _out1597;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1598;
            DCOMP.COMP.GenExpr(_2629_on, selfIdent, @params, false, out _out1595, out _out1596, out _out1597, out _out1598);
            _2630_onString = _out1595;
            _2631_onOwned = _out1596;
            _2632_onErased = _out1597;
            _2633_recIdents = _out1598;
            if ((_2626_isDatatype) || (_2627_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2630_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2628_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2627_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2630_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2628_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2633_recIdents;
          }
        } else if (_source79.is_SetBoundedPool) {
          DAST._IExpression _2634___mcc_h188 = _source79.dtor_of;
          bool _2635_isDatatype = _2322___mcc_h45;
          bool _2636_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2637_field = _2320___mcc_h43;
          DAST._IExpression _2638_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2639_onString;
            bool _2640_onOwned;
            bool _2641_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2642_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1599;
            bool _out1600;
            bool _out1601;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1602;
            DCOMP.COMP.GenExpr(_2638_on, selfIdent, @params, false, out _out1599, out _out1600, out _out1601, out _out1602);
            _2639_onString = _out1599;
            _2640_onOwned = _out1600;
            _2641_onErased = _out1601;
            _2642_recIdents = _out1602;
            if ((_2635_isDatatype) || (_2636_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2639_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2637_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2636_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2639_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2637_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2642_recIdents;
          }
        } else if (_source79.is_SeqBoundedPool) {
          DAST._IExpression _2643___mcc_h190 = _source79.dtor_of;
          bool _2644___mcc_h191 = _source79.dtor_includeDuplicates;
          bool _2645_isDatatype = _2322___mcc_h45;
          bool _2646_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2647_field = _2320___mcc_h43;
          DAST._IExpression _2648_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2649_onString;
            bool _2650_onOwned;
            bool _2651_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2652_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1603;
            bool _out1604;
            bool _out1605;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1606;
            DCOMP.COMP.GenExpr(_2648_on, selfIdent, @params, false, out _out1603, out _out1604, out _out1605, out _out1606);
            _2649_onString = _out1603;
            _2650_onOwned = _out1604;
            _2651_onErased = _out1605;
            _2652_recIdents = _out1606;
            if ((_2645_isDatatype) || (_2646_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2649_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2647_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2646_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2649_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2647_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2652_recIdents;
          }
        } else {
          DAST._IExpression _2653___mcc_h194 = _source79.dtor_lo;
          DAST._IExpression _2654___mcc_h195 = _source79.dtor_hi;
          bool _2655_isDatatype = _2322___mcc_h45;
          bool _2656_isConstant = _2321___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2657_field = _2320___mcc_h43;
          DAST._IExpression _2658_on = _2319___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2659_onString;
            bool _2660_onOwned;
            bool _2661_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2662_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1607;
            bool _out1608;
            bool _out1609;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1610;
            DCOMP.COMP.GenExpr(_2658_on, selfIdent, @params, false, out _out1607, out _out1608, out _out1609, out _out1610);
            _2659_onString = _out1607;
            _2660_onOwned = _out1608;
            _2661_onErased = _out1609;
            _2662_recIdents = _out1610;
            if ((_2655_isDatatype) || (_2656_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2659_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2657_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2656_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2659_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2657_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2662_recIdents;
          }
        }
      } else if (_source20.is_SelectFn) {
        DAST._IExpression _2663___mcc_h198 = _source20.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2664___mcc_h199 = _source20.dtor_field;
        bool _2665___mcc_h200 = _source20.dtor_onDatatype;
        bool _2666___mcc_h201 = _source20.dtor_isStatic;
        BigInteger _2667___mcc_h202 = _source20.dtor_arity;
        BigInteger _2668_arity = _2667___mcc_h202;
        bool _2669_isStatic = _2666___mcc_h201;
        bool _2670_isDatatype = _2665___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _2671_field = _2664___mcc_h199;
        DAST._IExpression _2672_on = _2663___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _2673_onString;
          bool _2674_onOwned;
          bool _2675___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2676_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1611;
          bool _out1612;
          bool _out1613;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1614;
          DCOMP.COMP.GenExpr(_2672_on, selfIdent, @params, false, out _out1611, out _out1612, out _out1613, out _out1614);
          _2673_onString = _out1611;
          _2674_onOwned = _out1612;
          _2675___v82 = _out1613;
          _2676_recIdents = _out1614;
          if (_2669_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2673_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2671_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _2673_onString), ((_2674_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _2677_args;
            _2677_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _2678_i;
            _2678_i = BigInteger.Zero;
            while ((_2678_i) < (_2668_arity)) {
              if ((_2678_i).Sign == 1) {
                _2677_args = Dafny.Sequence<Dafny.Rune>.Concat(_2677_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _2677_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2677_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_2678_i));
              _2678_i = (_2678_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _2677_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _2671_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2677_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _2679_typeShape;
          _2679_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _2680_i;
          _2680_i = BigInteger.Zero;
          while ((_2680_i) < (_2668_arity)) {
            if ((_2680_i).Sign == 1) {
              _2679_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2679_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _2679_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2679_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _2680_i = (_2680_i) + (BigInteger.One);
          }
          _2679_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2679_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _2679_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _2676_recIdents;
        }
      } else if (_source20.is_Index) {
        DAST._IExpression _2681___mcc_h203 = _source20.dtor_expr;
        DAST._ICollKind _2682___mcc_h204 = _source20.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _2683___mcc_h205 = _source20.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2684_indices = _2683___mcc_h205;
        DAST._ICollKind _2685_collKind = _2682___mcc_h204;
        DAST._IExpression _2686_on = _2681___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _2687_onString;
          bool _2688_onOwned;
          bool _2689_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2690_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1615;
          bool _out1616;
          bool _out1617;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1618;
          DCOMP.COMP.GenExpr(_2686_on, selfIdent, @params, false, out _out1615, out _out1616, out _out1617, out _out1618);
          _2687_onString = _out1615;
          _2688_onOwned = _out1616;
          _2689_onErased = _out1617;
          _2690_recIdents = _out1618;
          readIdents = _2690_recIdents;
          s = _2687_onString;
          BigInteger _2691_i;
          _2691_i = BigInteger.Zero;
          while ((_2691_i) < (new BigInteger((_2684_indices).Count))) {
            if (object.Equals(_2685_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_2685_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _2692_idx;
              bool _2693_idxOwned;
              bool _2694_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2695_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1619;
              bool _out1620;
              bool _out1621;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1622;
              DCOMP.COMP.GenExpr((_2684_indices).Select(_2691_i), selfIdent, @params, false, out _out1619, out _out1620, out _out1621, out _out1622);
              _2692_idx = _out1619;
              _2693_idxOwned = _out1620;
              _2694_idxErased = _out1621;
              _2695_recIdentsIdx = _out1622;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_2693_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2692_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2695_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _2696_idx;
              bool _2697___v83;
              bool _2698_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2699_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1623;
              bool _out1624;
              bool _out1625;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1626;
              DCOMP.COMP.GenExpr((_2684_indices).Select(_2691_i), selfIdent, @params, true, out _out1623, out _out1624, out _out1625, out _out1626);
              _2696_idx = _out1623;
              _2697___v83 = _out1624;
              _2698_idxErased = _out1625;
              _2699_recIdentsIdx = _out1626;
              if (!(_2698_idxErased)) {
                _2696_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2696_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _2696_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2699_recIdentsIdx);
            }
            _2691_i = (_2691_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _2689_onErased;
        }
      } else if (_source20.is_IndexRange) {
        DAST._IExpression _2700___mcc_h206 = _source20.dtor_expr;
        bool _2701___mcc_h207 = _source20.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _2702___mcc_h208 = _source20.dtor_low;
        DAST._IOptional<DAST._IExpression> _2703___mcc_h209 = _source20.dtor_high;
        DAST._IOptional<DAST._IExpression> _2704_high = _2703___mcc_h209;
        DAST._IOptional<DAST._IExpression> _2705_low = _2702___mcc_h208;
        bool _2706_isArray = _2701___mcc_h207;
        DAST._IExpression _2707_on = _2700___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _2708_onString;
          bool _2709_onOwned;
          bool _2710_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2711_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1627;
          bool _out1628;
          bool _out1629;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1630;
          DCOMP.COMP.GenExpr(_2707_on, selfIdent, @params, false, out _out1627, out _out1628, out _out1629, out _out1630);
          _2708_onString = _out1627;
          _2709_onOwned = _out1628;
          _2710_onErased = _out1629;
          _2711_recIdents = _out1630;
          readIdents = _2711_recIdents;
          s = _2708_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2712_lowString;
          _2712_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source80 = _2705_low;
          if (_source80.is_Some) {
            DAST._IExpression _2713___mcc_h1158 = _source80.dtor_Some_a0;
            DAST._IExpression _2714_l = _2713___mcc_h1158;
            {
              Dafny.ISequence<Dafny.Rune> _2715_lString;
              bool _2716___v84;
              bool _2717_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2718_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1631;
              bool _out1632;
              bool _out1633;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1634;
              DCOMP.COMP.GenExpr(_2714_l, selfIdent, @params, true, out _out1631, out _out1632, out _out1633, out _out1634);
              _2715_lString = _out1631;
              _2716___v84 = _out1632;
              _2717_lErased = _out1633;
              _2718_recIdentsL = _out1634;
              if (!(_2717_lErased)) {
                _2715_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2715_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2712_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2715_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2718_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2719_highString;
          _2719_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source81 = _2704_high;
          if (_source81.is_Some) {
            DAST._IExpression _2720___mcc_h1159 = _source81.dtor_Some_a0;
            DAST._IExpression _2721_h = _2720___mcc_h1159;
            {
              Dafny.ISequence<Dafny.Rune> _2722_hString;
              bool _2723___v85;
              bool _2724_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2725_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1635;
              bool _out1636;
              bool _out1637;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1638;
              DCOMP.COMP.GenExpr(_2721_h, selfIdent, @params, true, out _out1635, out _out1636, out _out1637, out _out1638);
              _2722_hString = _out1635;
              _2723___v85 = _out1636;
              _2724_hErased = _out1637;
              _2725_recIdentsH = _out1638;
              if (!(_2724_hErased)) {
                _2722_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2722_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2719_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2722_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2725_recIdentsH);
            }
          } else {
          }
          if (_2706_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source82) => {
            if (_source82.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2726___mcc_h1160 = _source82.dtor_Some_a0;
              return Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(_2726___mcc_h1160, _pat_let0_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(_pat_let0_0, _2727_l => Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2727_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"))));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2712_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source83) => {
            if (_source83.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2728___mcc_h1161 = _source83.dtor_Some_a0;
              return Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(_2728___mcc_h1161, _pat_let1_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(_pat_let1_0, _2729_h => Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2729_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"))));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2719_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _2710_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source20.is_TupleSelect) {
        DAST._IExpression _2730___mcc_h210 = _source20.dtor_expr;
        BigInteger _2731___mcc_h211 = _source20.dtor_index;
        BigInteger _2732_idx = _2731___mcc_h211;
        DAST._IExpression _2733_on = _2730___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _2734_onString;
          bool _2735___v86;
          bool _2736_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2737_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1639;
          bool _out1640;
          bool _out1641;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1642;
          DCOMP.COMP.GenExpr(_2733_on, selfIdent, @params, false, out _out1639, out _out1640, out _out1641, out _out1642);
          _2734_onString = _out1639;
          _2735___v86 = _out1640;
          _2736_tupErased = _out1641;
          _2737_recIdents = _out1642;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2734_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_2732_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _2736_tupErased;
          readIdents = _2737_recIdents;
        }
      } else if (_source20.is_Call) {
        DAST._IExpression _2738___mcc_h212 = _source20.dtor_on;
        Dafny.ISequence<Dafny.Rune> _2739___mcc_h213 = _source20.dtor_name;
        Dafny.ISequence<DAST._IType> _2740___mcc_h214 = _source20.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2741___mcc_h215 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2742_args = _2741___mcc_h215;
        Dafny.ISequence<DAST._IType> _2743_typeArgs = _2740___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _2744_name = _2739___mcc_h213;
        DAST._IExpression _2745_on = _2738___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2746_typeArgString;
          _2746_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2743_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2747_typeI;
            _2747_typeI = BigInteger.Zero;
            _2746_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_2747_typeI) < (new BigInteger((_2743_typeArgs).Count))) {
              if ((_2747_typeI).Sign == 1) {
                _2746_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2746_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _2748_typeString;
              Dafny.ISequence<Dafny.Rune> _out1643;
              _out1643 = DCOMP.COMP.GenType((_2743_typeArgs).Select(_2747_typeI), false, false);
              _2748_typeString = _out1643;
              _2746_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2746_typeArgString, _2748_typeString);
              _2747_typeI = (_2747_typeI) + (BigInteger.One);
            }
            _2746_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2746_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _2749_argString;
          _2749_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2750_i;
          _2750_i = BigInteger.Zero;
          while ((_2750_i) < (new BigInteger((_2742_args).Count))) {
            if ((_2750_i).Sign == 1) {
              _2749_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2749_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2751_argExpr;
            bool _2752_isOwned;
            bool _2753_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2754_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1644;
            bool _out1645;
            bool _out1646;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1647;
            DCOMP.COMP.GenExpr((_2742_args).Select(_2750_i), selfIdent, @params, false, out _out1644, out _out1645, out _out1646, out _out1647);
            _2751_argExpr = _out1644;
            _2752_isOwned = _out1645;
            _2753_argErased = _out1646;
            _2754_argIdents = _out1647;
            if (_2752_isOwned) {
              _2751_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _2751_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_2753_argErased)) {
              _2751_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _2751_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _2751_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _2751_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2749_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2749_argString, _2751_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2754_argIdents);
            _2750_i = (_2750_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2755_enclosingString;
          bool _2756___v87;
          bool _2757___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2758_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1648;
          bool _out1649;
          bool _out1650;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1651;
          DCOMP.COMP.GenExpr(_2745_on, selfIdent, @params, false, out _out1648, out _out1649, out _out1650, out _out1651);
          _2755_enclosingString = _out1648;
          _2756___v87 = _out1649;
          _2757___v88 = _out1650;
          _2758_recIdents = _out1651;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2758_recIdents);
          DAST._IExpression _source84 = _2745_on;
          if (_source84.is_Literal) {
            DAST._ILiteral _2759___mcc_h1162 = _source84.dtor_Literal_a0;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2760___mcc_h1164 = _source84.dtor_Ident_a0;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2761___mcc_h1166 = _source84.dtor_Companion_a0;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2755_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2762___mcc_h1168 = _source84.dtor_Tuple_a0;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2763___mcc_h1170 = _source84.dtor_path;
            Dafny.ISequence<DAST._IType> _2764___mcc_h1171 = _source84.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2765___mcc_h1172 = _source84.dtor_args;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2766___mcc_h1176 = _source84.dtor_dims;
            DAST._IType _2767___mcc_h1177 = _source84.dtor_typ;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2768___mcc_h1180 = _source84.dtor_path;
            Dafny.ISequence<DAST._IType> _2769___mcc_h1181 = _source84.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2770___mcc_h1182 = _source84.dtor_variant;
            bool _2771___mcc_h1183 = _source84.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2772___mcc_h1184 = _source84.dtor_contents;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_Convert) {
            DAST._IExpression _2773___mcc_h1190 = _source84.dtor_value;
            DAST._IType _2774___mcc_h1191 = _source84.dtor_from;
            DAST._IType _2775___mcc_h1192 = _source84.dtor_typ;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_SeqConstruct) {
            DAST._IExpression _2776___mcc_h1196 = _source84.dtor_length;
            DAST._IExpression _2777___mcc_h1197 = _source84.dtor_elem;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2778___mcc_h1200 = _source84.dtor_elements;
            DAST._IType _2779___mcc_h1201 = _source84.dtor_typ;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2780___mcc_h1204 = _source84.dtor_elements;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2781___mcc_h1206 = _source84.dtor_mapElems;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_This) {
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_Ite) {
            DAST._IExpression _2782___mcc_h1208 = _source84.dtor_cond;
            DAST._IExpression _2783___mcc_h1209 = _source84.dtor_thn;
            DAST._IExpression _2784___mcc_h1210 = _source84.dtor_els;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_UnOp) {
            DAST._IUnaryOp _2785___mcc_h1214 = _source84.dtor_unOp;
            DAST._IExpression _2786___mcc_h1215 = _source84.dtor_expr;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_BinOp) {
            DAST._IBinOp _2787___mcc_h1218 = _source84.dtor_op;
            DAST._IExpression _2788___mcc_h1219 = _source84.dtor_left;
            DAST._IExpression _2789___mcc_h1220 = _source84.dtor_right;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_ArrayLen) {
            DAST._IExpression _2790___mcc_h1224 = _source84.dtor_expr;
            BigInteger _2791___mcc_h1225 = _source84.dtor_dim;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_Select) {
            DAST._IExpression _2792___mcc_h1228 = _source84.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2793___mcc_h1229 = _source84.dtor_field;
            bool _2794___mcc_h1230 = _source84.dtor_isConstant;
            bool _2795___mcc_h1231 = _source84.dtor_onDatatype;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_SelectFn) {
            DAST._IExpression _2796___mcc_h1236 = _source84.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2797___mcc_h1237 = _source84.dtor_field;
            bool _2798___mcc_h1238 = _source84.dtor_onDatatype;
            bool _2799___mcc_h1239 = _source84.dtor_isStatic;
            BigInteger _2800___mcc_h1240 = _source84.dtor_arity;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_Index) {
            DAST._IExpression _2801___mcc_h1246 = _source84.dtor_expr;
            DAST._ICollKind _2802___mcc_h1247 = _source84.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2803___mcc_h1248 = _source84.dtor_indices;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_IndexRange) {
            DAST._IExpression _2804___mcc_h1252 = _source84.dtor_expr;
            bool _2805___mcc_h1253 = _source84.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _2806___mcc_h1254 = _source84.dtor_low;
            DAST._IOptional<DAST._IExpression> _2807___mcc_h1255 = _source84.dtor_high;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_TupleSelect) {
            DAST._IExpression _2808___mcc_h1260 = _source84.dtor_expr;
            BigInteger _2809___mcc_h1261 = _source84.dtor_index;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_Call) {
            DAST._IExpression _2810___mcc_h1264 = _source84.dtor_on;
            Dafny.ISequence<Dafny.Rune> _2811___mcc_h1265 = _source84.dtor_name;
            Dafny.ISequence<DAST._IType> _2812___mcc_h1266 = _source84.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2813___mcc_h1267 = _source84.dtor_args;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2814___mcc_h1272 = _source84.dtor_params;
            DAST._IType _2815___mcc_h1273 = _source84.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2816___mcc_h1274 = _source84.dtor_body;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2817___mcc_h1278 = _source84.dtor_values;
            DAST._IType _2818___mcc_h1279 = _source84.dtor_retType;
            DAST._IExpression _2819___mcc_h1280 = _source84.dtor_expr;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2820___mcc_h1284 = _source84.dtor_name;
            DAST._IType _2821___mcc_h1285 = _source84.dtor_typ;
            DAST._IExpression _2822___mcc_h1286 = _source84.dtor_value;
            DAST._IExpression _2823___mcc_h1287 = _source84.dtor_iifeBody;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_Apply) {
            DAST._IExpression _2824___mcc_h1292 = _source84.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2825___mcc_h1293 = _source84.dtor_args;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_TypeTest) {
            DAST._IExpression _2826___mcc_h1296 = _source84.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2827___mcc_h1297 = _source84.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2828___mcc_h1298 = _source84.dtor_variant;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_InitializationValue) {
            DAST._IType _2829___mcc_h1302 = _source84.dtor_typ;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_BoolBoundedPool) {
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_SetBoundedPool) {
            DAST._IExpression _2830___mcc_h1304 = _source84.dtor_of;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else if (_source84.is_SeqBoundedPool) {
            DAST._IExpression _2831___mcc_h1306 = _source84.dtor_of;
            bool _2832___mcc_h1307 = _source84.dtor_includeDuplicates;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          } else {
            DAST._IExpression _2833___mcc_h1310 = _source84.dtor_lo;
            DAST._IExpression _2834___mcc_h1311 = _source84.dtor_hi;
            {
              _2755_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2755_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2744_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2755_enclosingString, _2746_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2749_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _2835___mcc_h216 = _source20.dtor_params;
        DAST._IType _2836___mcc_h217 = _source20.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _2837___mcc_h218 = _source20.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2838_body = _2837___mcc_h218;
        DAST._IType _2839_retType = _2836___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _2840_params = _2835___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2841_paramNames;
          _2841_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2842_i;
          _2842_i = BigInteger.Zero;
          while ((_2842_i) < (new BigInteger((_2840_params).Count))) {
            _2841_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2841_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_2840_params).Select(_2842_i)).dtor_name));
            _2842_i = (_2842_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2843_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2844_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
          DCOMP.COMP.GenStmts(_2838_body, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), _2841_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1652, out _out1653);
          _2843_recursiveGen = _out1652;
          _2844_recIdents = _out1653;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2845_allReadCloned;
          _2845_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_2844_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _2846_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_2844_recIdents).Elements) {
              _2846_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_2844_recIdents).Contains(_2846_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1914)");
          after__ASSIGN_SUCH_THAT_1:;
            if (!((_2841_paramNames).Contains(_2846_next))) {
              _2845_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2845_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_2846_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_2846_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2846_next));
            }
            _2844_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2844_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2846_next));
          }
          Dafny.ISequence<Dafny.Rune> _2847_paramsString;
          _2847_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _2848_paramTypes;
          _2848_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2842_i = BigInteger.Zero;
          while ((_2842_i) < (new BigInteger((_2840_params).Count))) {
            if ((_2842_i).Sign == 1) {
              _2847_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2847_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _2848_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_2848_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2849_typStr;
            Dafny.ISequence<Dafny.Rune> _out1654;
            _out1654 = DCOMP.COMP.GenType(((_2840_params).Select(_2842_i)).dtor_typ, false, true);
            _2849_typStr = _out1654;
            _2847_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2847_paramsString, ((_2840_params).Select(_2842_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _2849_typStr);
            _2848_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2848_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _2849_typStr);
            _2842_i = (_2842_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2850_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1655;
          _out1655 = DCOMP.COMP.GenType(_2839_retType, false, true);
          _2850_retTypeGen = _out1655;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _2848_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _2850_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _2845_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _2847_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _2850_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2843_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2851___mcc_h219 = _source20.dtor_values;
        DAST._IType _2852___mcc_h220 = _source20.dtor_retType;
        DAST._IExpression _2853___mcc_h221 = _source20.dtor_expr;
        DAST._IExpression _2854_expr = _2853___mcc_h221;
        DAST._IType _2855_retType = _2852___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2856_values = _2851___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2857_paramNames;
          _2857_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2858_paramNamesSet;
          _2858_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2859_i;
          _2859_i = BigInteger.Zero;
          while ((_2859_i) < (new BigInteger((_2856_values).Count))) {
            _2857_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2857_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2856_values).Select(_2859_i)).dtor__0).dtor_name));
            _2858_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2858_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2856_values).Select(_2859_i)).dtor__0).dtor_name));
            _2859_i = (_2859_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _2860_paramsString;
          _2860_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2859_i = BigInteger.Zero;
          while ((_2859_i) < (new BigInteger((_2856_values).Count))) {
            if ((_2859_i).Sign == 1) {
              _2860_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2860_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2861_typStr;
            Dafny.ISequence<Dafny.Rune> _out1656;
            _out1656 = DCOMP.COMP.GenType((((_2856_values).Select(_2859_i)).dtor__0).dtor_typ, false, true);
            _2861_typStr = _out1656;
            Dafny.ISequence<Dafny.Rune> _2862_valueGen;
            bool _2863___v91;
            bool _2864_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2865_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1657;
            bool _out1658;
            bool _out1659;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1660;
            DCOMP.COMP.GenExpr(((_2856_values).Select(_2859_i)).dtor__1, selfIdent, @params, true, out _out1657, out _out1658, out _out1659, out _out1660);
            _2862_valueGen = _out1657;
            _2863___v91 = _out1658;
            _2864_valueErased = _out1659;
            _2865_recIdents = _out1660;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_2856_values).Select(_2859_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2861_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2865_recIdents);
            if (_2864_valueErased) {
              _2862_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2862_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2862_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _2859_i = (_2859_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2866_recGen;
          bool _2867_recOwned;
          bool _2868_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2869_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1661;
          bool _out1662;
          bool _out1663;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1664;
          DCOMP.COMP.GenExpr(_2854_expr, selfIdent, _2857_paramNames, mustOwn, out _out1661, out _out1662, out _out1663, out _out1664);
          _2866_recGen = _out1661;
          _2867_recOwned = _out1662;
          _2868_recErased = _out1663;
          _2869_recIdents = _out1664;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2869_recIdents, _2858_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2866_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _2867_recOwned;
          isErased = _2868_recErased;
        }
      } else if (_source20.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _2870___mcc_h222 = _source20.dtor_name;
        DAST._IType _2871___mcc_h223 = _source20.dtor_typ;
        DAST._IExpression _2872___mcc_h224 = _source20.dtor_value;
        DAST._IExpression _2873___mcc_h225 = _source20.dtor_iifeBody;
        DAST._IExpression _2874_iifeBody = _2873___mcc_h225;
        DAST._IExpression _2875_value = _2872___mcc_h224;
        DAST._IType _2876_tpe = _2871___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _2877_name = _2870___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _2878_valueGen;
          bool _2879___v92;
          bool _2880_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2881_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1665;
          bool _out1666;
          bool _out1667;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1668;
          DCOMP.COMP.GenExpr(_2875_value, selfIdent, @params, true, out _out1665, out _out1666, out _out1667, out _out1668);
          _2878_valueGen = _out1665;
          _2879___v92 = _out1666;
          _2880_valueErased = _out1667;
          _2881_recIdents = _out1668;
          if (_2880_valueErased) {
            _2878_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2878_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _2881_recIdents;
          Dafny.ISequence<Dafny.Rune> _2882_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1669;
          _out1669 = DCOMP.COMP.GenType(_2876_tpe, false, true);
          _2882_valueTypeGen = _out1669;
          Dafny.ISequence<Dafny.Rune> _2883_bodyGen;
          bool _2884___v93;
          bool _2885_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2886_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1670;
          bool _out1671;
          bool _out1672;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1673;
          DCOMP.COMP.GenExpr(_2874_iifeBody, selfIdent, @params, true, out _out1670, out _out1671, out _out1672, out _out1673);
          _2883_bodyGen = _out1670;
          _2884___v93 = _out1671;
          _2885_bodyErased = _out1672;
          _2886_bodyIdents = _out1673;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2886_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2877_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_2877_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2882_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _2878_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _2883_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _2885_bodyErased;
        }
      } else if (_source20.is_Apply) {
        DAST._IExpression _2887___mcc_h226 = _source20.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2888___mcc_h227 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2889_args = _2888___mcc_h227;
        DAST._IExpression _2890_func = _2887___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _2891_funcString;
          bool _2892___v94;
          bool _2893_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2894_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1674;
          bool _out1675;
          bool _out1676;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1677;
          DCOMP.COMP.GenExpr(_2890_func, selfIdent, @params, false, out _out1674, out _out1675, out _out1676, out _out1677);
          _2891_funcString = _out1674;
          _2892___v94 = _out1675;
          _2893_funcErased = _out1676;
          _2894_recIdents = _out1677;
          readIdents = _2894_recIdents;
          Dafny.ISequence<Dafny.Rune> _2895_argString;
          _2895_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2896_i;
          _2896_i = BigInteger.Zero;
          while ((_2896_i) < (new BigInteger((_2889_args).Count))) {
            if ((_2896_i).Sign == 1) {
              _2895_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2895_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2897_argExpr;
            bool _2898_isOwned;
            bool _2899_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2900_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1678;
            bool _out1679;
            bool _out1680;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1681;
            DCOMP.COMP.GenExpr((_2889_args).Select(_2896_i), selfIdent, @params, false, out _out1678, out _out1679, out _out1680, out _out1681);
            _2897_argExpr = _out1678;
            _2898_isOwned = _out1679;
            _2899_argErased = _out1680;
            _2900_argIdents = _out1681;
            if (_2898_isOwned) {
              _2897_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2897_argExpr);
            }
            _2895_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2895_argString, _2897_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2900_argIdents);
            _2896_i = (_2896_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2891_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2895_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_TypeTest) {
        DAST._IExpression _2901___mcc_h228 = _source20.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2902___mcc_h229 = _source20.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _2903___mcc_h230 = _source20.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _2904_variant = _2903___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2905_dType = _2902___mcc_h229;
        DAST._IExpression _2906_on = _2901___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _2907_exprGen;
          bool _2908___v95;
          bool _2909_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2910_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1682;
          bool _out1683;
          bool _out1684;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1685;
          DCOMP.COMP.GenExpr(_2906_on, selfIdent, @params, false, out _out1682, out _out1683, out _out1684, out _out1685);
          _2907_exprGen = _out1682;
          _2908___v95 = _out1683;
          _2909_exprErased = _out1684;
          _2910_recIdents = _out1685;
          Dafny.ISequence<Dafny.Rune> _2911_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1686;
          _out1686 = DCOMP.COMP.GenPath(_2905_dType);
          _2911_dTypePath = _out1686;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _2907_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _2911_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2904_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _2910_recIdents;
        }
      } else if (_source20.is_InitializationValue) {
        DAST._IType _2912___mcc_h231 = _source20.dtor_typ;
        DAST._IType _2913_typ = _2912___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _2914_typString;
          Dafny.ISequence<Dafny.Rune> _out1687;
          _out1687 = DCOMP.COMP.GenType(_2913_typ, false, false);
          _2914_typString = _out1687;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2914_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_SetBoundedPool) {
        DAST._IExpression _2915___mcc_h232 = _source20.dtor_of;
        DAST._IExpression _2916_of = _2915___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _2917_exprGen;
          bool _2918___v96;
          bool _2919_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2920_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1688;
          bool _out1689;
          bool _out1690;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1691;
          DCOMP.COMP.GenExpr(_2916_of, selfIdent, @params, false, out _out1688, out _out1689, out _out1690, out _out1691);
          _2917_exprGen = _out1688;
          _2918___v96 = _out1689;
          _2919_exprErased = _out1690;
          _2920_recIdents = _out1691;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2917_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _2919_exprErased;
          readIdents = _2920_recIdents;
        }
      } else if (_source20.is_SeqBoundedPool) {
        DAST._IExpression _2921___mcc_h233 = _source20.dtor_of;
        bool _2922___mcc_h234 = _source20.dtor_includeDuplicates;
        bool _2923_includeDuplicates = _2922___mcc_h234;
        DAST._IExpression _2924_of = _2921___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _2925_exprGen;
          bool _2926___v97;
          bool _2927_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2928_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1692;
          bool _out1693;
          bool _out1694;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1695;
          DCOMP.COMP.GenExpr(_2924_of, selfIdent, @params, false, out _out1692, out _out1693, out _out1694, out _out1695);
          _2925_exprGen = _out1692;
          _2926___v97 = _out1693;
          _2927_exprErased = _out1694;
          _2928_recIdents = _out1695;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2925_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_2923_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _2927_exprErased;
          readIdents = _2928_recIdents;
        }
      } else {
        DAST._IExpression _2929___mcc_h235 = _source20.dtor_lo;
        DAST._IExpression _2930___mcc_h236 = _source20.dtor_hi;
        DAST._IExpression _2931_hi = _2930___mcc_h236;
        DAST._IExpression _2932_lo = _2929___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _2933_loString;
          bool _2934___v98;
          bool _2935_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2936_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1696;
          bool _out1697;
          bool _out1698;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1699;
          DCOMP.COMP.GenExpr(_2932_lo, selfIdent, @params, true, out _out1696, out _out1697, out _out1698, out _out1699);
          _2933_loString = _out1696;
          _2934___v98 = _out1697;
          _2935_loErased = _out1698;
          _2936_recIdentsLo = _out1699;
          Dafny.ISequence<Dafny.Rune> _2937_hiString;
          bool _2938___v99;
          bool _2939_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2940_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1700;
          bool _out1701;
          bool _out1702;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1703;
          DCOMP.COMP.GenExpr(_2931_hi, selfIdent, @params, true, out _out1700, out _out1701, out _out1702, out _out1703);
          _2937_hiString = _out1700;
          _2938___v99 = _out1701;
          _2939_hiErased = _out1702;
          _2940_recIdentsHi = _out1703;
          if (!(_2935_loErased)) {
            _2933_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2933_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_2939_hiErased)) {
            _2937_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2937_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _2933_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2937_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2936_recIdentsLo, _2940_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _2941_i;
      _2941_i = BigInteger.Zero;
      while ((_2941_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _2942_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1704;
        _out1704 = DCOMP.COMP.GenModule((p).Select(_2941_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _2942_generated = _out1704;
        if ((_2941_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2942_generated);
        _2941_i = (_2941_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _2943_i;
      _2943_i = BigInteger.Zero;
      while ((_2943_i) < (new BigInteger((fullName).Count))) {
        if ((_2943_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_2943_i));
        _2943_i = (_2943_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

