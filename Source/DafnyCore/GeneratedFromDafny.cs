// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out1;
      _out1 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out1;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> __accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in0 = (i).Drop(BigInteger.One);
          i = _in0;
          goto TAIL_CALL_START;
        } else {
          __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in1 = (i).Drop(BigInteger.One);
          i = _in1;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> body;
      Dafny.ISequence<Dafny.Rune> _out2;
      _out2 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      body = _out2;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger i;
      i = BigInteger.Zero;
      while ((i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source0 = (body).Select(i);
        if (_source0.is_Module) {
          DAST._IModule __mcc_h0 = _source0.dtor_Module_a0;
          DAST._IModule m = __mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = DCOMP.COMP.GenModule(m, containingPath);
          generated = _out3;
        } else if (_source0.is_Class) {
          DAST._IClass _10___mcc_h1 = _source0.dtor_Class_a0;
          DAST._IClass _11_c = _10___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out4;
          _out4 = DCOMP.COMP.GenClass(_11_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_11_c).dtor_name)));
          generated = _out4;
        } else if (_source0.is_Trait) {
          DAST._ITrait _12___mcc_h2 = _source0.dtor_Trait_a0;
          DAST._ITrait _13_t = _12___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out5;
          _out5 = DCOMP.COMP.GenTrait(_13_t, containingPath);
          generated = _out5;
        } else if (_source0.is_Newtype) {
          DAST._INewtype _14___mcc_h3 = _source0.dtor_Newtype_a0;
          DAST._INewtype _15_n = _14___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out6;
          _out6 = DCOMP.COMP.GenNewtype(_15_n);
          generated = _out6;
        } else {
          DAST._IDatatype _16___mcc_h4 = _source0.dtor_Datatype_a0;
          DAST._IDatatype _17_d = _16___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out7;
          _out7 = DCOMP.COMP.GenDatatype(_17_d);
          generated = _out7;
        }
        if ((i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, generated);
        i = (i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _18_tpI;
      _18_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_18_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _19_tp;
          _19_tp = (@params).Select(_18_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_19_tp));
          Dafny.ISequence<Dafny.Rune> _20_genTp;
          Dafny.ISequence<Dafny.Rune> _out8;
          _out8 = DCOMP.COMP.GenType(_19_tp, false, false);
          _20_genTp = _out8;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _21_baseConstraints;
          _21_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _20_genTp), _21_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _20_genTp), _21_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _18_tpI = (_18_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _22_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _23_typeParams;
      Dafny.ISequence<Dafny.Rune> _24_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _25_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _26_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _27_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _28_erasedParams;
      Dafny.ISet<DAST._IType> _out9;
      Dafny.ISequence<Dafny.Rune> _out10;
      Dafny.ISequence<Dafny.Rune> _out11;
      Dafny.ISequence<Dafny.Rune> _out12;
      Dafny.ISequence<Dafny.Rune> _out13;
      Dafny.ISequence<Dafny.Rune> _out14;
      Dafny.ISequence<Dafny.Rune> _out15;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out9, out _out10, out _out11, out _out12, out _out13, out _out14, out _out15);
      _22_typeParamsSet = _out9;
      _23_typeParams = _out10;
      _24_constrainedTypeParams = _out11;
      _25_whereConstraints = _out12;
      _26_constrainedEraseParams = _out13;
      _27_unerasedParams = _out14;
      _28_erasedParams = _out15;
      Dafny.ISequence<Dafny.Rune> _29_fields;
      _29_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _30_fieldInits;
      _30_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _31_fieldI;
      _31_fieldI = BigInteger.Zero;
      while ((_31_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _32_field;
        _32_field = ((c).dtor_fields).Select(_31_fieldI);
        Dafny.ISequence<Dafny.Rune> _33_fieldType;
        Dafny.ISequence<Dafny.Rune> _out16;
        _out16 = DCOMP.COMP.GenType(((_32_field).dtor_formal).dtor_typ, false, false);
        _33_fieldType = _out16;
        _29_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_29_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_32_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _33_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source1 = (_32_field).dtor_defaultValue;
        if (_source1.is_Some) {
          DAST._IExpression _34___mcc_h0 = _source1.dtor_Some_a0;
          DAST._IExpression _35_e = _34___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _36_eStr;
            bool _37___v1;
            bool _38___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _39___v3;
            Dafny.ISequence<Dafny.Rune> _out17;
            bool _out18;
            bool _out19;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out20;
            DCOMP.COMP.GenExpr(_35_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out17, out _out18, out _out19, out _out20);
            _36_eStr = _out17;
            _37___v1 = _out18;
            _38___v2 = _out19;
            _39___v3 = _out20;
            _30_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_30_fieldInits, DCOMP.__default.escapeIdent(((_32_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _36_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _30_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_30_fieldInits, DCOMP.__default.escapeIdent(((_32_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _31_fieldI = (_31_fieldI) + (BigInteger.One);
      }
      BigInteger _40_typeParamI;
      _40_typeParamI = BigInteger.Zero;
      while ((_40_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _41_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out21;
        _out21 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_40_typeParamI), false, false);
        _41_tpeGen = _out21;
        _29_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_29_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_40_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _41_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _30_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_30_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_40_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _40_typeParamI = (_40_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _29_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _42_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _43_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out22;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out23;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _22_typeParamsSet, out _out22, out _out23);
      _42_implBody = _out22;
      _43_traitBodies = _out23;
      _42_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _30_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _42_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _24_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), _25_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _42_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _44_i;
        _44_i = BigInteger.Zero;
        while ((_44_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _45_superClass;
          _45_superClass = ((c).dtor_superClasses).Select(_44_i);
          DAST._IType _source2 = _45_superClass;
          if (_source2.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _46___mcc_h1 = _source2.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _47___mcc_h2 = _source2.dtor_typeArgs;
            DAST._IResolvedType _48___mcc_h3 = _source2.dtor_resolved;
            DAST._IResolvedType _source3 = _48___mcc_h3;
            if (_source3.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _49___mcc_h7 = _source3.dtor_path;
            } else if (_source3.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _50___mcc_h9 = _source3.dtor_path;
              Dafny.ISequence<DAST._IType> _51_typeArgs = _47___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _52_traitPath = _46___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _53_pathStr;
                Dafny.ISequence<Dafny.Rune> _out24;
                _out24 = DCOMP.COMP.GenPath(_52_traitPath);
                _53_pathStr = _out24;
                Dafny.ISequence<Dafny.Rune> _54_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out25;
                _out25 = DCOMP.COMP.GenTypeArgs(_51_typeArgs, false, false);
                _54_typeArgs = _out25;
                Dafny.ISequence<Dafny.Rune> _55_body;
                _55_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_43_traitBodies).Contains(_52_traitPath)) {
                  _55_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_43_traitBodies, _52_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _56_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out26;
                _out26 = DCOMP.COMP.GenPath(path);
                _56_genSelfPath = _out26;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _24_constrainedTypeParams), _53_pathStr), _54_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _56_genSelfPath), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _25_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _55_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _57___mcc_h11 = _source3.dtor_Newtype_a0;
            }
          } else if (_source2.is_Nullable) {
            DAST._IType _58___mcc_h13 = _source2.dtor_Nullable_a0;
          } else if (_source2.is_Tuple) {
            Dafny.ISequence<DAST._IType> _59___mcc_h15 = _source2.dtor_Tuple_a0;
          } else if (_source2.is_Array) {
            DAST._IType _60___mcc_h17 = _source2.dtor_element;
            BigInteger _61___mcc_h18 = _source2.dtor_dims;
          } else if (_source2.is_Seq) {
            DAST._IType _62___mcc_h21 = _source2.dtor_element;
          } else if (_source2.is_Set) {
            DAST._IType _63___mcc_h23 = _source2.dtor_element;
          } else if (_source2.is_Multiset) {
            DAST._IType _64___mcc_h25 = _source2.dtor_element;
          } else if (_source2.is_Map) {
            DAST._IType _65___mcc_h27 = _source2.dtor_key;
            DAST._IType _66___mcc_h28 = _source2.dtor_value;
          } else if (_source2.is_Arrow) {
            Dafny.ISequence<DAST._IType> _67___mcc_h31 = _source2.dtor_args;
            DAST._IType _68___mcc_h32 = _source2.dtor_result;
          } else if (_source2.is_Primitive) {
            DAST._IPrimitive _69___mcc_h35 = _source2.dtor_Primitive_a0;
          } else if (_source2.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _70___mcc_h37 = _source2.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _71___mcc_h39 = _source2.dtor_TypeArg_a0;
          }
          _44_i = (_44_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _72_defaultImpl;
      _72_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _24_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), _25_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _72_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_72_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _72_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_72_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _72_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_72_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _72_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_72_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _73_printImpl;
      _73_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _24_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _73_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_73_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _74_ptrPartialEqImpl;
      _74_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _74_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_74_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _74_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_74_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _74_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_74_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _75_identEraseImpls;
      _75_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _24_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _28_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _75_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_75_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _26_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _27_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _72_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _73_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _74_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _75_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _76_typeParamsSet;
      _76_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _77_typeParams;
      _77_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _78_tpI;
      _78_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _77_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_78_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _79_tp;
          _79_tp = ((t).dtor_typeParams).Select(_78_tpI);
          _76_typeParamsSet = Dafny.Set<DAST._IType>.Union(_76_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_79_tp));
          Dafny.ISequence<Dafny.Rune> _80_genTp;
          Dafny.ISequence<Dafny.Rune> _out27;
          _out27 = DCOMP.COMP.GenType(_79_tp, false, false);
          _80_genTp = _out27;
          _77_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_77_typeParams, _80_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _78_tpI = (_78_tpI) + (BigInteger.One);
        }
        _77_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_77_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _81_fullPath;
      _81_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _82_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _83___v6;
      Dafny.ISequence<Dafny.Rune> _out28;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out29;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_81_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_81_fullPath)), _76_typeParamsSet, out _out28, out _out29);
      _82_implBody = _out28;
      _83___v6 = _out29;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _77_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _82_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _84_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _85_typeParams;
      Dafny.ISequence<Dafny.Rune> _86_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _87_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _88___v7;
      Dafny.ISequence<Dafny.Rune> _89___v8;
      Dafny.ISequence<Dafny.Rune> _90___v9;
      Dafny.ISet<DAST._IType> _out30;
      Dafny.ISequence<Dafny.Rune> _out31;
      Dafny.ISequence<Dafny.Rune> _out32;
      Dafny.ISequence<Dafny.Rune> _out33;
      Dafny.ISequence<Dafny.Rune> _out34;
      Dafny.ISequence<Dafny.Rune> _out35;
      Dafny.ISequence<Dafny.Rune> _out36;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out30, out _out31, out _out32, out _out33, out _out34, out _out35, out _out36);
      _84_typeParamsSet = _out30;
      _85_typeParams = _out31;
      _86_constrainedTypeParams = _out32;
      _87_whereConstraints = _out33;
      _88___v7 = _out34;
      _89___v8 = _out35;
      _90___v9 = _out36;
      Dafny.ISequence<Dafny.Rune> _91_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out37;
      _out37 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _91_underlyingType = _out37;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _91_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _91_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _91_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), _87_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source4 = (c).dtor_witnessExpr;
      if (_source4.is_Some) {
        DAST._IExpression _92___mcc_h0 = _source4.dtor_Some_a0;
        DAST._IExpression _93_e = _92___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _94_eStr;
          bool _95___v10;
          bool _96___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _97___v12;
          Dafny.ISequence<Dafny.Rune> _out38;
          bool _out39;
          bool _out40;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out41;
          DCOMP.COMP.GenExpr(_93_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out38, out _out39, out _out40, out _out41);
          _94_eStr = _out38;
          _95___v10 = _out39;
          _96___v11 = _out40;
          _97___v12 = _out41;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _94_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _91_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _98_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _99_typeParams;
      Dafny.ISequence<Dafny.Rune> _100_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _101_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _102_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _103_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _104_erasedParams;
      Dafny.ISet<DAST._IType> _out42;
      Dafny.ISequence<Dafny.Rune> _out43;
      Dafny.ISequence<Dafny.Rune> _out44;
      Dafny.ISequence<Dafny.Rune> _out45;
      Dafny.ISequence<Dafny.Rune> _out46;
      Dafny.ISequence<Dafny.Rune> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out42, out _out43, out _out44, out _out45, out _out46, out _out47, out _out48);
      _98_typeParamsSet = _out42;
      _99_typeParams = _out43;
      _100_constrainedTypeParams = _out44;
      _101_whereConstraints = _out45;
      _102_constrainedEraseParams = _out46;
      _103_unerasedParams = _out47;
      _104_erasedParams = _out48;
      Dafny.ISequence<Dafny.Rune> _105_ctors;
      _105_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _106_i;
      _106_i = BigInteger.Zero;
      while ((_106_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _107_ctor;
        _107_ctor = ((c).dtor_ctors).Select(_106_i);
        Dafny.ISequence<Dafny.Rune> _108_ctorBody;
        _108_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_107_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _109_j;
        _109_j = BigInteger.Zero;
        while ((_109_j) < (new BigInteger(((_107_ctor).dtor_args).Count))) {
          DAST._IFormal _110_formal;
          _110_formal = ((_107_ctor).dtor_args).Select(_109_j);
          Dafny.ISequence<Dafny.Rune> _111_formalType;
          Dafny.ISequence<Dafny.Rune> _out49;
          _out49 = DCOMP.COMP.GenType((_110_formal).dtor_typ, false, false);
          _111_formalType = _out49;
          if ((c).dtor_isCo) {
            _108_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_108_ctorBody, DCOMP.__default.escapeIdent((_110_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _111_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _108_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_108_ctorBody, DCOMP.__default.escapeIdent((_110_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _111_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _109_j = (_109_j) + (BigInteger.One);
        }
        _108_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_108_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _105_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_105_ctors, _108_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _106_i = (_106_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _112_selfPath;
      _112_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _113_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _114_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out50;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out51;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_112_selfPath)), _98_typeParamsSet, out _out50, out _out51);
      _113_implBody = _out50;
      _114_traitBodies = _out51;
      _106_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _115_emittedFields;
      _115_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_106_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _116_ctor;
        _116_ctor = ((c).dtor_ctors).Select(_106_i);
        BigInteger _117_j;
        _117_j = BigInteger.Zero;
        while ((_117_j) < (new BigInteger(((_116_ctor).dtor_args).Count))) {
          DAST._IFormal _118_formal;
          _118_formal = ((_116_ctor).dtor_args).Select(_117_j);
          if (!((_115_emittedFields).Contains((_118_formal).dtor_name))) {
            _115_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_115_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_118_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _119_formalType;
            Dafny.ISequence<Dafny.Rune> _out52;
            _out52 = DCOMP.COMP.GenType((_118_formal).dtor_typ, false, false);
            _119_formalType = _out52;
            Dafny.ISequence<Dafny.Rune> _120_methodBody;
            _120_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _121_k;
            _121_k = BigInteger.Zero;
            while ((_121_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _122_ctor2;
              _122_ctor2 = ((c).dtor_ctors).Select(_121_k);
              Dafny.ISequence<Dafny.Rune> _123_ctorMatch;
              _123_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_122_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _124_l;
              _124_l = BigInteger.Zero;
              bool _125_hasMatchingField;
              _125_hasMatchingField = false;
              while ((_124_l) < (new BigInteger(((_122_ctor2).dtor_args).Count))) {
                DAST._IFormal _126_formal2;
                _126_formal2 = ((_122_ctor2).dtor_args).Select(_124_l);
                if (((_118_formal).dtor_name).Equals((_126_formal2).dtor_name)) {
                  _125_hasMatchingField = true;
                }
                _123_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_123_ctorMatch, DCOMP.__default.escapeIdent((_126_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _124_l = (_124_l) + (BigInteger.One);
              }
              if (_125_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _123_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_123_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_118_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _123_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_123_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_118_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _123_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_123_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _120_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_120_methodBody, _123_ctorMatch);
              _121_k = (_121_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _120_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_120_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _120_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_120_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _113_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_113_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_118_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _119_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _120_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _117_j = (_117_j) + (BigInteger.One);
        }
        _106_i = (_106_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _105_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_105_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _127_typeI;
        _127_typeI = BigInteger.Zero;
        while ((_127_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_127_typeI).Sign == 1) {
            _105_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_105_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _128_genTp;
          Dafny.ISequence<Dafny.Rune> _out53;
          _out53 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_127_typeI), false, false);
          _128_genTp = _out53;
          _105_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_105_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _128_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _127_typeI = (_127_typeI) + (BigInteger.One);
        }
        _105_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_105_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _129_enumBody;
      _129_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _105_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _100_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), _101_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _113_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _130_identEraseImpls;
      _130_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _100_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _104_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _130_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_130_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _102_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _103_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _131_printImpl;
      _131_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _100_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _106_i = BigInteger.Zero;
      while ((_106_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _132_ctor;
        _132_ctor = ((c).dtor_ctors).Select(_106_i);
        Dafny.ISequence<Dafny.Rune> _133_ctorMatch;
        _133_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_132_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _134_modulePrefix;
        _134_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _135_printRhs;
        _135_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _134_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_132_ctor).dtor_name), (((_132_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _136_j;
        _136_j = BigInteger.Zero;
        while ((_136_j) < (new BigInteger(((_132_ctor).dtor_args).Count))) {
          DAST._IFormal _137_formal;
          _137_formal = ((_132_ctor).dtor_args).Select(_136_j);
          _133_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_133_ctorMatch, DCOMP.__default.escapeIdent((_137_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_136_j).Sign == 1) {
            _135_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_135_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _135_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_135_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_137_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _136_j = (_136_j) + (BigInteger.One);
        }
        _133_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_133_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_132_ctor).dtor_hasAnyArgs) {
          _135_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_135_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _135_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_135_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _131_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_131_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _133_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _135_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _106_i = (_106_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _131_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_131_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _131_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_131_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _138_defaultImpl;
      _138_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _138_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _100_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _106_i = BigInteger.Zero;
        while ((_106_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _139_formal;
          _139_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_106_i);
          _138_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_138_defaultImpl, DCOMP.__default.escapeIdent((_139_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _106_i = (_106_i) + (BigInteger.One);
        }
        _138_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_138_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_129_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _130_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _131_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _138_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _140_i;
        _140_i = BigInteger.Zero;
        while ((_140_i) < (new BigInteger((p).Count))) {
          if ((_140_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_140_i))));
          _140_i = (_140_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _141_i;
        _141_i = BigInteger.Zero;
        while ((_141_i) < (new BigInteger((args).Count))) {
          if ((_141_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _142_genTp;
          Dafny.ISequence<Dafny.Rune> _out54;
          _out54 = DCOMP.COMP.GenType((args).Select(_141_i), inBinding, inFn);
          _142_genTp = _out54;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _142_genTp);
          _141_i = (_141_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source5 = c;
      if (_source5.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _143___mcc_h0 = _source5.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _144___mcc_h1 = _source5.dtor_typeArgs;
        DAST._IResolvedType _145___mcc_h2 = _source5.dtor_resolved;
        DAST._IResolvedType _146_resolved = _145___mcc_h2;
        Dafny.ISequence<DAST._IType> _147_args = _144___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _148_p = _143___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out55;
          _out55 = DCOMP.COMP.GenPath(_148_p);
          s = _out55;
          Dafny.ISequence<Dafny.Rune> _149_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out56;
          _out56 = DCOMP.COMP.GenTypeArgs(_147_args, inBinding, inFn);
          _149_typeArgs = _out56;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _149_typeArgs);
          DAST._IResolvedType _source6 = _146_resolved;
          if (_source6.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _150___mcc_h18 = _source6.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source6.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _151___mcc_h20 = _source6.dtor_path;
            {
              if ((_148_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _152___mcc_h22 = _source6.dtor_Newtype_a0;
            DAST._IResolvedType _153_Primitive = _146_resolved;
          }
        }
      } else if (_source5.is_Nullable) {
        DAST._IType _154___mcc_h3 = _source5.dtor_Nullable_a0;
        DAST._IType _155_inner = _154___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _156_innerStr;
          Dafny.ISequence<Dafny.Rune> _out57;
          _out57 = DCOMP.COMP.GenType(_155_inner, inBinding, inFn);
          _156_innerStr = _out57;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _156_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source5.is_Tuple) {
        Dafny.ISequence<DAST._IType> _157___mcc_h4 = _source5.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _158_types = _157___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _159_i;
          _159_i = BigInteger.Zero;
          while ((_159_i) < (new BigInteger((_158_types).Count))) {
            if ((_159_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _160_generated;
            Dafny.ISequence<Dafny.Rune> _out58;
            _out58 = DCOMP.COMP.GenType((_158_types).Select(_159_i), inBinding, inFn);
            _160_generated = _out58;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _160_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _159_i = (_159_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source5.is_Array) {
        DAST._IType _161___mcc_h5 = _source5.dtor_element;
        BigInteger _162___mcc_h6 = _source5.dtor_dims;
        BigInteger _163_dims = _162___mcc_h6;
        DAST._IType _164_element = _161___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _165_elemStr;
          Dafny.ISequence<Dafny.Rune> _out59;
          _out59 = DCOMP.COMP.GenType(_164_element, inBinding, inFn);
          _165_elemStr = _out59;
          s = _165_elemStr;
          BigInteger _166_i;
          _166_i = BigInteger.Zero;
          while ((_166_i) < (_163_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _166_i = (_166_i) + (BigInteger.One);
          }
        }
      } else if (_source5.is_Seq) {
        DAST._IType _167___mcc_h7 = _source5.dtor_element;
        DAST._IType _168_element = _167___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _169_elemStr;
          Dafny.ISequence<Dafny.Rune> _out60;
          _out60 = DCOMP.COMP.GenType(_168_element, inBinding, inFn);
          _169_elemStr = _out60;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _169_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source5.is_Set) {
        DAST._IType _170___mcc_h8 = _source5.dtor_element;
        DAST._IType _171_element = _170___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _172_elemStr;
          Dafny.ISequence<Dafny.Rune> _out61;
          _out61 = DCOMP.COMP.GenType(_171_element, inBinding, inFn);
          _172_elemStr = _out61;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _172_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source5.is_Multiset) {
        DAST._IType _173___mcc_h9 = _source5.dtor_element;
        DAST._IType _174_element = _173___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _175_elemStr;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenType(_174_element, inBinding, inFn);
          _175_elemStr = _out62;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _175_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source5.is_Map) {
        DAST._IType _176___mcc_h10 = _source5.dtor_key;
        DAST._IType _177___mcc_h11 = _source5.dtor_value;
        DAST._IType _178_value = _177___mcc_h11;
        DAST._IType _179_key = _176___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _180_keyStr;
          Dafny.ISequence<Dafny.Rune> _out63;
          _out63 = DCOMP.COMP.GenType(_179_key, inBinding, inFn);
          _180_keyStr = _out63;
          Dafny.ISequence<Dafny.Rune> _181_valueStr;
          Dafny.ISequence<Dafny.Rune> _out64;
          _out64 = DCOMP.COMP.GenType(_178_value, inBinding, inFn);
          _181_valueStr = _out64;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _180_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _181_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source5.is_Arrow) {
        Dafny.ISequence<DAST._IType> _182___mcc_h12 = _source5.dtor_args;
        DAST._IType _183___mcc_h13 = _source5.dtor_result;
        DAST._IType _184_result = _183___mcc_h13;
        Dafny.ISequence<DAST._IType> _185_args = _182___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _186_i;
          _186_i = BigInteger.Zero;
          while ((_186_i) < (new BigInteger((_185_args).Count))) {
            if ((_186_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _187_generated;
            Dafny.ISequence<Dafny.Rune> _out65;
            _out65 = DCOMP.COMP.GenType((_185_args).Select(_186_i), inBinding, true);
            _187_generated = _out65;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _187_generated);
            _186_i = (_186_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _188_resultType;
          Dafny.ISequence<Dafny.Rune> _out66;
          _out66 = DCOMP.COMP.GenType(_184_result, inBinding, (inFn) || (inBinding));
          _188_resultType = _out66;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _188_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source5.is_Primitive) {
        DAST._IPrimitive _189___mcc_h14 = _source5.dtor_Primitive_a0;
        DAST._IPrimitive _190_p = _189___mcc_h14;
        {
          DAST._IPrimitive _source7 = _190_p;
          if (_source7.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source7.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source7.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source7.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source5.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _191___mcc_h15 = _source5.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _192_v = _191___mcc_h15;
        s = _192_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _193___mcc_h16 = _source5.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source8 = _193___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _194___mcc_h17 = _source8;
        Dafny.ISequence<Dafny.Rune> _195_name = _194___mcc_h17;
        s = DCOMP.__default.escapeIdent(_195_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _196_i;
      _196_i = BigInteger.Zero;
      while ((_196_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source9 = (body).Select(_196_i);
        DAST._IMethod _197___mcc_h0 = _source9;
        DAST._IMethod _198_m = _197___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source10 = (_198_m).dtor_overridingPath;
          if (_source10.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _199___mcc_h1 = _source10.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _200_p = _199___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _201_existing;
              _201_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_200_p)) {
                _201_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _200_p);
              }
              if ((new BigInteger((_201_existing).Count)).Sign == 1) {
                _201_existing = Dafny.Sequence<Dafny.Rune>.Concat(_201_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _202_genMethod;
              Dafny.ISequence<Dafny.Rune> _out67;
              _out67 = DCOMP.COMP.GenMethod(_198_m, true, enclosingType, enclosingTypeParams);
              _202_genMethod = _out67;
              _201_existing = Dafny.Sequence<Dafny.Rune>.Concat(_201_existing, _202_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_200_p, _201_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _203_generated;
              Dafny.ISequence<Dafny.Rune> _out68;
              _out68 = DCOMP.COMP.GenMethod(_198_m, forTrait, enclosingType, enclosingTypeParams);
              _203_generated = _out68;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _203_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _196_i = (_196_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _204_i;
      _204_i = BigInteger.Zero;
      while ((_204_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _205_param;
        _205_param = (@params).Select(_204_i);
        Dafny.ISequence<Dafny.Rune> _206_paramType;
        Dafny.ISequence<Dafny.Rune> _out69;
        _out69 = DCOMP.COMP.GenType((_205_param).dtor_typ, false, false);
        _206_paramType = _out69;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_205_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _206_paramType);
        if ((_204_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _204_i = (_204_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _207_params;
      Dafny.ISequence<Dafny.Rune> _out70;
      _out70 = DCOMP.COMP.GenParams((m).dtor_params);
      _207_params = _out70;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _208_paramNames;
      _208_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _209_paramI;
      _209_paramI = BigInteger.Zero;
      while ((_209_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _208_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_208_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_209_paramI)).dtor_name));
        _209_paramI = (_209_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _207_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _207_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _210_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out71;
          _out71 = DCOMP.COMP.GenType(enclosingType, false, false);
          _210_enclosingTypeString = _out71;
          _207_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _210_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _207_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _211_retType;
      _211_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _212_typeI;
      _212_typeI = BigInteger.Zero;
      while ((_212_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_212_typeI).Sign == 1) {
          _211_retType = Dafny.Sequence<Dafny.Rune>.Concat(_211_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _213_typeString;
        Dafny.ISequence<Dafny.Rune> _out72;
        _out72 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_212_typeI), false, false);
        _213_typeString = _out72;
        _211_retType = Dafny.Sequence<Dafny.Rune>.Concat(_211_retType, _213_typeString);
        _212_typeI = (_212_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _211_retType = Dafny.Sequence<Dafny.Rune>.Concat(_211_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _214_typeParamsFiltered;
      _214_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _215_typeParamI;
      _215_typeParamI = BigInteger.Zero;
      while ((_215_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _216_typeParam;
        _216_typeParam = ((m).dtor_typeParams).Select(_215_typeParamI);
        if (!((enclosingTypeParams).Contains(_216_typeParam))) {
          _214_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_214_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_216_typeParam));
        }
        _215_typeParamI = (_215_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _217_whereClauses;
      _217_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_214_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _217_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_217_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _218_i;
        _218_i = BigInteger.Zero;
        while ((_218_i) < (new BigInteger((_214_typeParamsFiltered).Count))) {
          if ((_218_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _217_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_217_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _219_typeString;
          Dafny.ISequence<Dafny.Rune> _out73;
          _out73 = DCOMP.COMP.GenType((_214_typeParamsFiltered).Select(_218_i), false, false);
          _219_typeString = _out73;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _219_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _219_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _217_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_217_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _219_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _218_i = (_218_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _207_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _211_retType), _217_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _220_earlyReturn;
        _220_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source11 = (m).dtor_outVars;
        if (_source11.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _221___mcc_h0 = _source11.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _222_outVars = _221___mcc_h0;
          {
            _220_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _223_outI;
            _223_outI = BigInteger.Zero;
            while ((_223_outI) < (new BigInteger((_222_outVars).Count))) {
              if ((_223_outI).Sign == 1) {
                _220_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_220_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _224_outVar;
              _224_outVar = (_222_outVars).Select(_223_outI);
              _220_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_220_earlyReturn, DCOMP.__default.escapeIdent((_224_outVar)));
              _223_outI = (_223_outI) + (BigInteger.One);
            }
            _220_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_220_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _225_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _226___v15;
        Dafny.ISequence<Dafny.Rune> _out74;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out75;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _208_paramNames, true, _220_earlyReturn, out _out74, out _out75);
        _225_body = _out74;
        _226___v15 = _out75;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _225_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _227_declarations;
      _227_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _228_i;
      _228_i = BigInteger.Zero;
      while ((_228_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _229_stmt;
        _229_stmt = (stmts).Select(_228_i);
        Dafny.ISequence<Dafny.Rune> _230_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _231_recIdents;
        Dafny.ISequence<Dafny.Rune> _out76;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out77;
        DCOMP.COMP.GenStmt(_229_stmt, selfIdent, @params, (isLast) && ((_228_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out76, out _out77);
        _230_stmtString = _out76;
        _231_recIdents = _out77;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_231_recIdents, _227_declarations));
        DAST._IStatement _source12 = _229_stmt;
        if (_source12.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _232___mcc_h0 = _source12.dtor_name;
          DAST._IType _233___mcc_h1 = _source12.dtor_typ;
          DAST._IOptional<DAST._IExpression> _234___mcc_h2 = _source12.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _235_name = _232___mcc_h0;
          {
            _227_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_227_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_235_name));
          }
        } else if (_source12.is_Assign) {
          DAST._IAssignLhs _236___mcc_h6 = _source12.dtor_lhs;
          DAST._IExpression _237___mcc_h7 = _source12.dtor_value;
        } else if (_source12.is_If) {
          DAST._IExpression _238___mcc_h10 = _source12.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _239___mcc_h11 = _source12.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _240___mcc_h12 = _source12.dtor_els;
        } else if (_source12.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _241___mcc_h16 = _source12.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _242___mcc_h17 = _source12.dtor_body;
        } else if (_source12.is_While) {
          DAST._IExpression _243___mcc_h20 = _source12.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _244___mcc_h21 = _source12.dtor_body;
        } else if (_source12.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _245___mcc_h24 = _source12.dtor_boundName;
          DAST._IType _246___mcc_h25 = _source12.dtor_boundType;
          DAST._IExpression _247___mcc_h26 = _source12.dtor_over;
          Dafny.ISequence<DAST._IStatement> _248___mcc_h27 = _source12.dtor_body;
        } else if (_source12.is_Call) {
          DAST._IExpression _249___mcc_h32 = _source12.dtor_on;
          Dafny.ISequence<Dafny.Rune> _250___mcc_h33 = _source12.dtor_name;
          Dafny.ISequence<DAST._IType> _251___mcc_h34 = _source12.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _252___mcc_h35 = _source12.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _253___mcc_h36 = _source12.dtor_outs;
        } else if (_source12.is_Return) {
          DAST._IExpression _254___mcc_h42 = _source12.dtor_expr;
        } else if (_source12.is_EarlyReturn) {
        } else if (_source12.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _255___mcc_h44 = _source12.dtor_toLabel;
        } else if (_source12.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _256___mcc_h46 = _source12.dtor_body;
        } else if (_source12.is_JumpTailCallStart) {
        } else if (_source12.is_Halt) {
        } else {
          DAST._IExpression _257___mcc_h48 = _source12.dtor_Print_a0;
        }
        if ((_228_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _230_stmtString);
        _228_i = (_228_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source13 = lhs;
      if (_source13.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _258___mcc_h0 = _source13.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source14 = _258___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _259___mcc_h1 = _source14;
        Dafny.ISequence<Dafny.Rune> _260_id = _259___mcc_h1;
        {
          if ((@params).Contains(_260_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_260_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_260_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_260_id);
          needsIIFE = false;
        }
      } else if (_source13.is_Select) {
        DAST._IExpression _261___mcc_h2 = _source13.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _262___mcc_h3 = _source13.dtor_field;
        Dafny.ISequence<Dafny.Rune> _263_field = _262___mcc_h3;
        DAST._IExpression _264_on = _261___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _265_onExpr;
          bool _266_onOwned;
          bool _267_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _268_recIdents;
          Dafny.ISequence<Dafny.Rune> _out78;
          bool _out79;
          bool _out80;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out81;
          DCOMP.COMP.GenExpr(_264_on, selfIdent, @params, false, out _out78, out _out79, out _out80, out _out81);
          _265_onExpr = _out78;
          _266_onOwned = _out79;
          _267_onErased = _out80;
          _268_recIdents = _out81;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _265_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _263_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _268_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _269___mcc_h4 = _source13.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _270___mcc_h5 = _source13.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _271_indices = _270___mcc_h5;
        DAST._IExpression _272_on = _269___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _273_onExpr;
          bool _274_onOwned;
          bool _275_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _276_recIdents;
          Dafny.ISequence<Dafny.Rune> _out82;
          bool _out83;
          bool _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_272_on, selfIdent, @params, false, out _out82, out _out83, out _out84, out _out85);
          _273_onExpr = _out82;
          _274_onOwned = _out83;
          _275_onErased = _out84;
          _276_recIdents = _out85;
          readIdents = _276_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _277_i;
          _277_i = BigInteger.Zero;
          while ((_277_i) < (new BigInteger((_271_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _278_idx;
            bool _279___v19;
            bool _280_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _281_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out86;
            bool _out87;
            bool _out88;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out89;
            DCOMP.COMP.GenExpr((_271_indices).Select(_277_i), selfIdent, @params, true, out _out86, out _out87, out _out88, out _out89);
            _278_idx = _out86;
            _279___v19 = _out87;
            _280_idxErased = _out88;
            _281_recIdentsIdx = _out89;
            if (!(_280_idxErased)) {
              _278_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _278_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_277_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _278_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _281_recIdentsIdx);
            _277_i = (_277_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _273_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _277_i = BigInteger.Zero;
          while ((_277_i) < (new BigInteger((_271_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_277_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _277_i = (_277_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source15 = stmt;
      if (_source15.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _282___mcc_h0 = _source15.dtor_name;
        DAST._IType _283___mcc_h1 = _source15.dtor_typ;
        DAST._IOptional<DAST._IExpression> _284___mcc_h2 = _source15.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source16 = _284___mcc_h2;
        if (_source16.is_Some) {
          DAST._IExpression _285___mcc_h3 = _source16.dtor_Some_a0;
          DAST._IExpression _286_expression = _285___mcc_h3;
          DAST._IType _287_typ = _283___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _288_name = _282___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _289_typeString;
            Dafny.ISequence<Dafny.Rune> _out90;
            _out90 = DCOMP.COMP.GenType(_287_typ, true, false);
            _289_typeString = _out90;
            Dafny.ISequence<Dafny.Rune> _290_expr;
            bool _291___v20;
            bool _292_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _293_recIdents;
            Dafny.ISequence<Dafny.Rune> _out91;
            bool _out92;
            bool _out93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out94;
            DCOMP.COMP.GenExpr(_286_expression, selfIdent, @params, true, out _out91, out _out92, out _out93, out _out94);
            _290_expr = _out91;
            _291___v20 = _out92;
            _292_recErased = _out93;
            _293_recIdents = _out94;
            if (!(_292_recErased)) {
              _290_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _290_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _290_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _289_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _290_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_288_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _289_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _290_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _293_recIdents;
          }
        } else {
          DAST._IType _294_typ = _283___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _295_name = _282___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _296_typeString;
            Dafny.ISequence<Dafny.Rune> _out95;
            _out95 = DCOMP.COMP.GenType(_294_typ, true, false);
            _296_typeString = _out95;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_295_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _296_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source15.is_Assign) {
        DAST._IAssignLhs _297___mcc_h4 = _source15.dtor_lhs;
        DAST._IExpression _298___mcc_h5 = _source15.dtor_value;
        DAST._IExpression _299_expression = _298___mcc_h5;
        DAST._IAssignLhs _300_lhs = _297___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _301_lhsGen;
          bool _302_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _303_recIdents;
          Dafny.ISequence<Dafny.Rune> _out96;
          bool _out97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out98;
          DCOMP.COMP.GenAssignLhs(_300_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out96, out _out97, out _out98);
          _301_lhsGen = _out96;
          _302_needsIIFE = _out97;
          _303_recIdents = _out98;
          Dafny.ISequence<Dafny.Rune> _304_exprGen;
          bool _305___v21;
          bool _306_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _307_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out99;
          bool _out100;
          bool _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_299_expression, selfIdent, @params, true, out _out99, out _out100, out _out101, out _out102);
          _304_exprGen = _out99;
          _305___v21 = _out100;
          _306_exprErased = _out101;
          _307_exprIdents = _out102;
          if (!(_306_exprErased)) {
            _304_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _304_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _304_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _304_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_302_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _304_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _301_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_301_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _304_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_303_recIdents, _307_exprIdents);
        }
      } else if (_source15.is_If) {
        DAST._IExpression _308___mcc_h6 = _source15.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _309___mcc_h7 = _source15.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _310___mcc_h8 = _source15.dtor_els;
        Dafny.ISequence<DAST._IStatement> _311_els = _310___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _312_thn = _309___mcc_h7;
        DAST._IExpression _313_cond = _308___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _314_condString;
          bool _315___v22;
          bool _316_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _317_recIdents;
          Dafny.ISequence<Dafny.Rune> _out103;
          bool _out104;
          bool _out105;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out106;
          DCOMP.COMP.GenExpr(_313_cond, selfIdent, @params, true, out _out103, out _out104, out _out105, out _out106);
          _314_condString = _out103;
          _315___v22 = _out104;
          _316_condErased = _out105;
          _317_recIdents = _out106;
          if (!(_316_condErased)) {
            _314_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _314_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _317_recIdents;
          Dafny.ISequence<Dafny.Rune> _318_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _319_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out108;
          DCOMP.COMP.GenStmts(_312_thn, selfIdent, @params, isLast, earlyReturn, out _out107, out _out108);
          _318_thnString = _out107;
          _319_thnIdents = _out108;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _319_thnIdents);
          Dafny.ISequence<Dafny.Rune> _320_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _321_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out110;
          DCOMP.COMP.GenStmts(_311_els, selfIdent, @params, isLast, earlyReturn, out _out109, out _out110);
          _320_elsString = _out109;
          _321_elsIdents = _out110;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _321_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _314_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _318_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _320_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _322___mcc_h9 = _source15.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _323___mcc_h10 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _324_body = _323___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _325_lbl = _322___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _326_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _327_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out111;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out112;
          DCOMP.COMP.GenStmts(_324_body, selfIdent, @params, isLast, earlyReturn, out _out111, out _out112);
          _326_bodyString = _out111;
          _327_bodyIdents = _out112;
          readIdents = _327_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _325_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _326_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_While) {
        DAST._IExpression _328___mcc_h11 = _source15.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _329___mcc_h12 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _330_body = _329___mcc_h12;
        DAST._IExpression _331_cond = _328___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _332_condString;
          bool _333___v23;
          bool _334_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _335_recIdents;
          Dafny.ISequence<Dafny.Rune> _out113;
          bool _out114;
          bool _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenExpr(_331_cond, selfIdent, @params, true, out _out113, out _out114, out _out115, out _out116);
          _332_condString = _out113;
          _333___v23 = _out114;
          _334_condErased = _out115;
          _335_recIdents = _out116;
          if (!(_334_condErased)) {
            _332_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _332_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _335_recIdents;
          Dafny.ISequence<Dafny.Rune> _336_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _337_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out118;
          DCOMP.COMP.GenStmts(_330_body, selfIdent, @params, false, earlyReturn, out _out117, out _out118);
          _336_bodyString = _out117;
          _337_bodyIdents = _out118;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _337_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _332_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _336_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _338___mcc_h13 = _source15.dtor_boundName;
        DAST._IType _339___mcc_h14 = _source15.dtor_boundType;
        DAST._IExpression _340___mcc_h15 = _source15.dtor_over;
        Dafny.ISequence<DAST._IStatement> _341___mcc_h16 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _342_body = _341___mcc_h16;
        DAST._IExpression _343_over = _340___mcc_h15;
        DAST._IType _344_boundType = _339___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _345_boundName = _338___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _346_overString;
          bool _347___v24;
          bool _348_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _349_recIdents;
          Dafny.ISequence<Dafny.Rune> _out119;
          bool _out120;
          bool _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenExpr(_343_over, selfIdent, @params, true, out _out119, out _out120, out _out121, out _out122);
          _346_overString = _out119;
          _347___v24 = _out120;
          _348_overErased = _out121;
          _349_recIdents = _out122;
          Dafny.ISequence<Dafny.Rune> _350_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out123;
          _out123 = DCOMP.COMP.GenType(_344_boundType, false, false);
          _350_boundTypeStr = _out123;
          readIdents = _349_recIdents;
          Dafny.ISequence<Dafny.Rune> _351_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _352_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out125;
          DCOMP.COMP.GenStmts(_342_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_345_boundName)), false, earlyReturn, out _out124, out _out125);
          _351_bodyString = _out124;
          _352_bodyIdents = _out125;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _352_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_345_boundName));
          Dafny.ISequence<Dafny.Rune> _353_unerasedIter;
          _353_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_348_overErased) {
            _353_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _350_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _353_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _346_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_345_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _353_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _351_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Call) {
        DAST._IExpression _354___mcc_h17 = _source15.dtor_on;
        Dafny.ISequence<Dafny.Rune> _355___mcc_h18 = _source15.dtor_name;
        Dafny.ISequence<DAST._IType> _356___mcc_h19 = _source15.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _357___mcc_h20 = _source15.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _358___mcc_h21 = _source15.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _359_maybeOutVars = _358___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _360_args = _357___mcc_h20;
        Dafny.ISequence<DAST._IType> _361_typeArgs = _356___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _362_name = _355___mcc_h18;
        DAST._IExpression _363_on = _354___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _364_typeArgString;
          _364_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_361_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _365_typeI;
            _365_typeI = BigInteger.Zero;
            _364_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_365_typeI) < (new BigInteger((_361_typeArgs).Count))) {
              if ((_365_typeI).Sign == 1) {
                _364_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_364_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _366_typeString;
              Dafny.ISequence<Dafny.Rune> _out126;
              _out126 = DCOMP.COMP.GenType((_361_typeArgs).Select(_365_typeI), false, false);
              _366_typeString = _out126;
              _364_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_364_typeArgString, _366_typeString);
              _365_typeI = (_365_typeI) + (BigInteger.One);
            }
            _364_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_364_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _367_argString;
          _367_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _368_i;
          _368_i = BigInteger.Zero;
          while ((_368_i) < (new BigInteger((_360_args).Count))) {
            if ((_368_i).Sign == 1) {
              _367_argString = Dafny.Sequence<Dafny.Rune>.Concat(_367_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _369_argExpr;
            bool _370_isOwned;
            bool _371_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _372_argIdents;
            Dafny.ISequence<Dafny.Rune> _out127;
            bool _out128;
            bool _out129;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out130;
            DCOMP.COMP.GenExpr((_360_args).Select(_368_i), selfIdent, @params, false, out _out127, out _out128, out _out129, out _out130);
            _369_argExpr = _out127;
            _370_isOwned = _out128;
            _371_argErased = _out129;
            _372_argIdents = _out130;
            if (_370_isOwned) {
              _369_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _369_argExpr);
            }
            _367_argString = Dafny.Sequence<Dafny.Rune>.Concat(_367_argString, _369_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _372_argIdents);
            _368_i = (_368_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _373_enclosingString;
          bool _374___v25;
          bool _375___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _376_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out131;
          bool _out132;
          bool _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenExpr(_363_on, selfIdent, @params, false, out _out131, out _out132, out _out133, out _out134);
          _373_enclosingString = _out131;
          _374___v25 = _out132;
          _375___v26 = _out133;
          _376_enclosingIdents = _out134;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _376_enclosingIdents);
          DAST._IExpression _source17 = _363_on;
          if (_source17.is_Literal) {
            DAST._ILiteral _377___mcc_h26 = _source17.dtor_Literal_a0;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _378___mcc_h28 = _source17.dtor_Ident_a0;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _379___mcc_h30 = _source17.dtor_Companion_a0;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_373_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source17.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _380___mcc_h32 = _source17.dtor_Tuple_a0;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _381___mcc_h34 = _source17.dtor_path;
            Dafny.ISequence<DAST._IType> _382___mcc_h35 = _source17.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _383___mcc_h36 = _source17.dtor_args;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _384___mcc_h40 = _source17.dtor_dims;
            DAST._IType _385___mcc_h41 = _source17.dtor_typ;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _386___mcc_h44 = _source17.dtor_path;
            Dafny.ISequence<DAST._IType> _387___mcc_h45 = _source17.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _388___mcc_h46 = _source17.dtor_variant;
            bool _389___mcc_h47 = _source17.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _390___mcc_h48 = _source17.dtor_contents;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Convert) {
            DAST._IExpression _391___mcc_h54 = _source17.dtor_value;
            DAST._IType _392___mcc_h55 = _source17.dtor_from;
            DAST._IType _393___mcc_h56 = _source17.dtor_typ;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqConstruct) {
            DAST._IExpression _394___mcc_h60 = _source17.dtor_length;
            DAST._IExpression _395___mcc_h61 = _source17.dtor_elem;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _396___mcc_h64 = _source17.dtor_elements;
            DAST._IType _397___mcc_h65 = _source17.dtor_typ;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _398___mcc_h68 = _source17.dtor_elements;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _399___mcc_h70 = _source17.dtor_mapElems;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_This) {
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Ite) {
            DAST._IExpression _400___mcc_h72 = _source17.dtor_cond;
            DAST._IExpression _401___mcc_h73 = _source17.dtor_thn;
            DAST._IExpression _402___mcc_h74 = _source17.dtor_els;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_UnOp) {
            DAST._IUnaryOp _403___mcc_h78 = _source17.dtor_unOp;
            DAST._IExpression _404___mcc_h79 = _source17.dtor_expr;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BinOp) {
            DAST._IBinOp _405___mcc_h82 = _source17.dtor_op;
            DAST._IExpression _406___mcc_h83 = _source17.dtor_left;
            DAST._IExpression _407___mcc_h84 = _source17.dtor_right;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_ArrayLen) {
            DAST._IExpression _408___mcc_h88 = _source17.dtor_expr;
            BigInteger _409___mcc_h89 = _source17.dtor_dim;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Select) {
            DAST._IExpression _410___mcc_h92 = _source17.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _411___mcc_h93 = _source17.dtor_field;
            bool _412___mcc_h94 = _source17.dtor_isConstant;
            bool _413___mcc_h95 = _source17.dtor_onDatatype;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SelectFn) {
            DAST._IExpression _414___mcc_h100 = _source17.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _415___mcc_h101 = _source17.dtor_field;
            bool _416___mcc_h102 = _source17.dtor_onDatatype;
            bool _417___mcc_h103 = _source17.dtor_isStatic;
            BigInteger _418___mcc_h104 = _source17.dtor_arity;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Index) {
            DAST._IExpression _419___mcc_h110 = _source17.dtor_expr;
            DAST._ICollKind _420___mcc_h111 = _source17.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _421___mcc_h112 = _source17.dtor_indices;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_IndexRange) {
            DAST._IExpression _422___mcc_h116 = _source17.dtor_expr;
            bool _423___mcc_h117 = _source17.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _424___mcc_h118 = _source17.dtor_low;
            DAST._IOptional<DAST._IExpression> _425___mcc_h119 = _source17.dtor_high;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_TupleSelect) {
            DAST._IExpression _426___mcc_h124 = _source17.dtor_expr;
            BigInteger _427___mcc_h125 = _source17.dtor_index;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Call) {
            DAST._IExpression _428___mcc_h128 = _source17.dtor_on;
            Dafny.ISequence<Dafny.Rune> _429___mcc_h129 = _source17.dtor_name;
            Dafny.ISequence<DAST._IType> _430___mcc_h130 = _source17.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _431___mcc_h131 = _source17.dtor_args;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _432___mcc_h136 = _source17.dtor_params;
            DAST._IType _433___mcc_h137 = _source17.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _434___mcc_h138 = _source17.dtor_body;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _435___mcc_h142 = _source17.dtor_values;
            DAST._IType _436___mcc_h143 = _source17.dtor_retType;
            DAST._IExpression _437___mcc_h144 = _source17.dtor_expr;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _438___mcc_h148 = _source17.dtor_name;
            DAST._IType _439___mcc_h149 = _source17.dtor_typ;
            DAST._IExpression _440___mcc_h150 = _source17.dtor_value;
            DAST._IExpression _441___mcc_h151 = _source17.dtor_iifeBody;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Apply) {
            DAST._IExpression _442___mcc_h156 = _source17.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _443___mcc_h157 = _source17.dtor_args;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_TypeTest) {
            DAST._IExpression _444___mcc_h160 = _source17.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _445___mcc_h161 = _source17.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _446___mcc_h162 = _source17.dtor_variant;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_InitializationValue) {
            DAST._IType _447___mcc_h166 = _source17.dtor_typ;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BoolBoundedPool) {
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SetBoundedPool) {
            DAST._IExpression _448___mcc_h168 = _source17.dtor_of;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqBoundedPool) {
            DAST._IExpression _449___mcc_h170 = _source17.dtor_of;
            bool _450___mcc_h171 = _source17.dtor_includeDuplicates;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _451___mcc_h174 = _source17.dtor_lo;
            DAST._IExpression _452___mcc_h175 = _source17.dtor_hi;
            {
              _373_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _373_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _453_receiver;
          _453_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source18 = _359_maybeOutVars;
          if (_source18.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _454___mcc_h178 = _source18.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _455_outVars = _454___mcc_h178;
            {
              if ((new BigInteger((_455_outVars).Count)) > (BigInteger.One)) {
                _453_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _456_outI;
              _456_outI = BigInteger.Zero;
              while ((_456_outI) < (new BigInteger((_455_outVars).Count))) {
                if ((_456_outI).Sign == 1) {
                  _453_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_453_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _457_outVar;
                _457_outVar = (_455_outVars).Select(_456_outI);
                _453_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_453_receiver, (_457_outVar));
                _456_outI = (_456_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_455_outVars).Count)) > (BigInteger.One)) {
                _453_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_453_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_453_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_453_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _373_enclosingString), DCOMP.__default.escapeIdent(_362_name)), _364_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _367_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source15.is_Return) {
        DAST._IExpression _458___mcc_h22 = _source15.dtor_expr;
        DAST._IExpression _459_expr = _458___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _460_exprString;
          bool _461___v29;
          bool _462_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _463_recIdents;
          Dafny.ISequence<Dafny.Rune> _out135;
          bool _out136;
          bool _out137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out138;
          DCOMP.COMP.GenExpr(_459_expr, selfIdent, @params, true, out _out135, out _out136, out _out137, out _out138);
          _460_exprString = _out135;
          _461___v29 = _out136;
          _462_recErased = _out137;
          _463_recIdents = _out138;
          _460_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _460_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _463_recIdents;
          if (isLast) {
            generated = _460_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _460_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source15.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _464___mcc_h23 = _source15.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _465_toLabel = _464___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source19 = _465_toLabel;
          if (_source19.is_Some) {
            Dafny.ISequence<Dafny.Rune> _466___mcc_h179 = _source19.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _467_lbl = _466___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _467_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _468___mcc_h24 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _469_body = _468___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _470_paramI;
          _470_paramI = BigInteger.Zero;
          while ((_470_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _471_param;
            _471_param = (@params).Select(_470_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_471_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_471_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _470_paramI = (_470_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _472_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _473_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out139;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out140;
          DCOMP.COMP.GenStmts(_469_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out139, out _out140);
          _472_bodyString = _out139;
          _473_bodyIdents = _out140;
          readIdents = _473_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _472_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _474___mcc_h25 = _source15.dtor_Print_a0;
        DAST._IExpression _475_e = _474___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _476_printedExpr;
          bool _477_isOwned;
          bool _478___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _479_recIdents;
          Dafny.ISequence<Dafny.Rune> _out141;
          bool _out142;
          bool _out143;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out144;
          DCOMP.COMP.GenExpr(_475_e, selfIdent, @params, false, out _out141, out _out142, out _out143, out _out144);
          _476_printedExpr = _out141;
          _477_isOwned = _out142;
          _478___v30 = _out143;
          _479_recIdents = _out144;
          if (_477_isOwned) {
            _476_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _476_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _476_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _479_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source20 = e;
      if (_source20.is_Literal) {
        DAST._ILiteral _480___mcc_h0 = _source20.dtor_Literal_a0;
        DAST._ILiteral _source21 = _480___mcc_h0;
        if (_source21.is_BoolLiteral) {
          bool _481___mcc_h1 = _source21.dtor_BoolLiteral_a0;
          if ((_481___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source21.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _482___mcc_h2 = _source21.dtor_IntLiteral_a0;
          DAST._IType _483___mcc_h3 = _source21.dtor_IntLiteral_a1;
          DAST._IType _484_t = _483___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _485_i = _482___mcc_h2;
          {
            DAST._IType _source22 = _484_t;
            if (_source22.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _486___mcc_h237 = _source22.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _487___mcc_h238 = _source22.dtor_typeArgs;
              DAST._IResolvedType _488___mcc_h239 = _source22.dtor_resolved;
              DAST._IType _489_o = _484_t;
              {
                Dafny.ISequence<Dafny.Rune> _490_genType;
                Dafny.ISequence<Dafny.Rune> _out145;
                _out145 = DCOMP.COMP.GenType(_489_o, false, false);
                _490_genType = _out145;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _490_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Nullable) {
              DAST._IType _491___mcc_h243 = _source22.dtor_Nullable_a0;
              DAST._IType _492_o = _484_t;
              {
                Dafny.ISequence<Dafny.Rune> _493_genType;
                Dafny.ISequence<Dafny.Rune> _out146;
                _out146 = DCOMP.COMP.GenType(_492_o, false, false);
                _493_genType = _out146;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _493_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Tuple) {
              Dafny.ISequence<DAST._IType> _494___mcc_h245 = _source22.dtor_Tuple_a0;
              DAST._IType _495_o = _484_t;
              {
                Dafny.ISequence<Dafny.Rune> _496_genType;
                Dafny.ISequence<Dafny.Rune> _out147;
                _out147 = DCOMP.COMP.GenType(_495_o, false, false);
                _496_genType = _out147;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _496_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Array) {
              DAST._IType _497___mcc_h247 = _source22.dtor_element;
              BigInteger _498___mcc_h248 = _source22.dtor_dims;
              DAST._IType _499_o = _484_t;
              {
                Dafny.ISequence<Dafny.Rune> _500_genType;
                Dafny.ISequence<Dafny.Rune> _out148;
                _out148 = DCOMP.COMP.GenType(_499_o, false, false);
                _500_genType = _out148;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _500_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Seq) {
              DAST._IType _501___mcc_h251 = _source22.dtor_element;
              DAST._IType _502_o = _484_t;
              {
                Dafny.ISequence<Dafny.Rune> _503_genType;
                Dafny.ISequence<Dafny.Rune> _out149;
                _out149 = DCOMP.COMP.GenType(_502_o, false, false);
                _503_genType = _out149;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _503_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Set) {
              DAST._IType _504___mcc_h253 = _source22.dtor_element;
              DAST._IType _505_o = _484_t;
              {
                Dafny.ISequence<Dafny.Rune> _506_genType;
                Dafny.ISequence<Dafny.Rune> _out150;
                _out150 = DCOMP.COMP.GenType(_505_o, false, false);
                _506_genType = _out150;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _506_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Multiset) {
              DAST._IType _507___mcc_h255 = _source22.dtor_element;
              DAST._IType _508_o = _484_t;
              {
                Dafny.ISequence<Dafny.Rune> _509_genType;
                Dafny.ISequence<Dafny.Rune> _out151;
                _out151 = DCOMP.COMP.GenType(_508_o, false, false);
                _509_genType = _out151;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _509_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Map) {
              DAST._IType _510___mcc_h257 = _source22.dtor_key;
              DAST._IType _511___mcc_h258 = _source22.dtor_value;
              DAST._IType _512_o = _484_t;
              {
                Dafny.ISequence<Dafny.Rune> _513_genType;
                Dafny.ISequence<Dafny.Rune> _out152;
                _out152 = DCOMP.COMP.GenType(_512_o, false, false);
                _513_genType = _out152;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _513_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Arrow) {
              Dafny.ISequence<DAST._IType> _514___mcc_h261 = _source22.dtor_args;
              DAST._IType _515___mcc_h262 = _source22.dtor_result;
              DAST._IType _516_o = _484_t;
              {
                Dafny.ISequence<Dafny.Rune> _517_genType;
                Dafny.ISequence<Dafny.Rune> _out153;
                _out153 = DCOMP.COMP.GenType(_516_o, false, false);
                _517_genType = _out153;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _517_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Primitive) {
              DAST._IPrimitive _518___mcc_h265 = _source22.dtor_Primitive_a0;
              DAST._IPrimitive _source23 = _518___mcc_h265;
              if (_source23.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source23.is_Real) {
                DAST._IType _519_o = _484_t;
                {
                  Dafny.ISequence<Dafny.Rune> _520_genType;
                  Dafny.ISequence<Dafny.Rune> _out154;
                  _out154 = DCOMP.COMP.GenType(_519_o, false, false);
                  _520_genType = _out154;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _520_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source23.is_String) {
                DAST._IType _521_o = _484_t;
                {
                  Dafny.ISequence<Dafny.Rune> _522_genType;
                  Dafny.ISequence<Dafny.Rune> _out155;
                  _out155 = DCOMP.COMP.GenType(_521_o, false, false);
                  _522_genType = _out155;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _522_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source23.is_Bool) {
                DAST._IType _523_o = _484_t;
                {
                  Dafny.ISequence<Dafny.Rune> _524_genType;
                  Dafny.ISequence<Dafny.Rune> _out156;
                  _out156 = DCOMP.COMP.GenType(_523_o, false, false);
                  _524_genType = _out156;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _524_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _525_o = _484_t;
                {
                  Dafny.ISequence<Dafny.Rune> _526_genType;
                  Dafny.ISequence<Dafny.Rune> _out157;
                  _out157 = DCOMP.COMP.GenType(_525_o, false, false);
                  _526_genType = _out157;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _526_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source22.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _527___mcc_h267 = _source22.dtor_Passthrough_a0;
              DAST._IType _528_o = _484_t;
              {
                Dafny.ISequence<Dafny.Rune> _529_genType;
                Dafny.ISequence<Dafny.Rune> _out158;
                _out158 = DCOMP.COMP.GenType(_528_o, false, false);
                _529_genType = _out158;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _529_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _530___mcc_h269 = _source22.dtor_TypeArg_a0;
              DAST._IType _531_o = _484_t;
              {
                Dafny.ISequence<Dafny.Rune> _532_genType;
                Dafny.ISequence<Dafny.Rune> _out159;
                _out159 = DCOMP.COMP.GenType(_531_o, false, false);
                _532_genType = _out159;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _485_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _532_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _533___mcc_h4 = _source21.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _534___mcc_h5 = _source21.dtor_DecLiteral_a1;
          DAST._IType _535___mcc_h6 = _source21.dtor_DecLiteral_a2;
          DAST._IType _536_t = _535___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _537_d = _534___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _538_n = _533___mcc_h4;
          {
            DAST._IType _source24 = _536_t;
            if (_source24.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _539___mcc_h271 = _source24.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _540___mcc_h272 = _source24.dtor_typeArgs;
              DAST._IResolvedType _541___mcc_h273 = _source24.dtor_resolved;
              DAST._IType _542_o = _536_t;
              {
                Dafny.ISequence<Dafny.Rune> _543_genType;
                Dafny.ISequence<Dafny.Rune> _out160;
                _out160 = DCOMP.COMP.GenType(_542_o, false, false);
                _543_genType = _out160;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _543_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Nullable) {
              DAST._IType _544___mcc_h277 = _source24.dtor_Nullable_a0;
              DAST._IType _545_o = _536_t;
              {
                Dafny.ISequence<Dafny.Rune> _546_genType;
                Dafny.ISequence<Dafny.Rune> _out161;
                _out161 = DCOMP.COMP.GenType(_545_o, false, false);
                _546_genType = _out161;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _546_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Tuple) {
              Dafny.ISequence<DAST._IType> _547___mcc_h279 = _source24.dtor_Tuple_a0;
              DAST._IType _548_o = _536_t;
              {
                Dafny.ISequence<Dafny.Rune> _549_genType;
                Dafny.ISequence<Dafny.Rune> _out162;
                _out162 = DCOMP.COMP.GenType(_548_o, false, false);
                _549_genType = _out162;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _549_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Array) {
              DAST._IType _550___mcc_h281 = _source24.dtor_element;
              BigInteger _551___mcc_h282 = _source24.dtor_dims;
              DAST._IType _552_o = _536_t;
              {
                Dafny.ISequence<Dafny.Rune> _553_genType;
                Dafny.ISequence<Dafny.Rune> _out163;
                _out163 = DCOMP.COMP.GenType(_552_o, false, false);
                _553_genType = _out163;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _553_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Seq) {
              DAST._IType _554___mcc_h285 = _source24.dtor_element;
              DAST._IType _555_o = _536_t;
              {
                Dafny.ISequence<Dafny.Rune> _556_genType;
                Dafny.ISequence<Dafny.Rune> _out164;
                _out164 = DCOMP.COMP.GenType(_555_o, false, false);
                _556_genType = _out164;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _556_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Set) {
              DAST._IType _557___mcc_h287 = _source24.dtor_element;
              DAST._IType _558_o = _536_t;
              {
                Dafny.ISequence<Dafny.Rune> _559_genType;
                Dafny.ISequence<Dafny.Rune> _out165;
                _out165 = DCOMP.COMP.GenType(_558_o, false, false);
                _559_genType = _out165;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _559_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Multiset) {
              DAST._IType _560___mcc_h289 = _source24.dtor_element;
              DAST._IType _561_o = _536_t;
              {
                Dafny.ISequence<Dafny.Rune> _562_genType;
                Dafny.ISequence<Dafny.Rune> _out166;
                _out166 = DCOMP.COMP.GenType(_561_o, false, false);
                _562_genType = _out166;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _562_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Map) {
              DAST._IType _563___mcc_h291 = _source24.dtor_key;
              DAST._IType _564___mcc_h292 = _source24.dtor_value;
              DAST._IType _565_o = _536_t;
              {
                Dafny.ISequence<Dafny.Rune> _566_genType;
                Dafny.ISequence<Dafny.Rune> _out167;
                _out167 = DCOMP.COMP.GenType(_565_o, false, false);
                _566_genType = _out167;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _566_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Arrow) {
              Dafny.ISequence<DAST._IType> _567___mcc_h295 = _source24.dtor_args;
              DAST._IType _568___mcc_h296 = _source24.dtor_result;
              DAST._IType _569_o = _536_t;
              {
                Dafny.ISequence<Dafny.Rune> _570_genType;
                Dafny.ISequence<Dafny.Rune> _out168;
                _out168 = DCOMP.COMP.GenType(_569_o, false, false);
                _570_genType = _out168;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _570_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Primitive) {
              DAST._IPrimitive _571___mcc_h299 = _source24.dtor_Primitive_a0;
              DAST._IPrimitive _source25 = _571___mcc_h299;
              if (_source25.is_Int) {
                DAST._IType _572_o = _536_t;
                {
                  Dafny.ISequence<Dafny.Rune> _573_genType;
                  Dafny.ISequence<Dafny.Rune> _out169;
                  _out169 = DCOMP.COMP.GenType(_572_o, false, false);
                  _573_genType = _out169;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _573_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source25.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source25.is_String) {
                DAST._IType _574_o = _536_t;
                {
                  Dafny.ISequence<Dafny.Rune> _575_genType;
                  Dafny.ISequence<Dafny.Rune> _out170;
                  _out170 = DCOMP.COMP.GenType(_574_o, false, false);
                  _575_genType = _out170;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _575_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source25.is_Bool) {
                DAST._IType _576_o = _536_t;
                {
                  Dafny.ISequence<Dafny.Rune> _577_genType;
                  Dafny.ISequence<Dafny.Rune> _out171;
                  _out171 = DCOMP.COMP.GenType(_576_o, false, false);
                  _577_genType = _out171;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _577_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _578_o = _536_t;
                {
                  Dafny.ISequence<Dafny.Rune> _579_genType;
                  Dafny.ISequence<Dafny.Rune> _out172;
                  _out172 = DCOMP.COMP.GenType(_578_o, false, false);
                  _579_genType = _out172;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _579_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source24.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _580___mcc_h301 = _source24.dtor_Passthrough_a0;
              DAST._IType _581_o = _536_t;
              {
                Dafny.ISequence<Dafny.Rune> _582_genType;
                Dafny.ISequence<Dafny.Rune> _out173;
                _out173 = DCOMP.COMP.GenType(_581_o, false, false);
                _582_genType = _out173;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _582_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _583___mcc_h303 = _source24.dtor_TypeArg_a0;
              DAST._IType _584_o = _536_t;
              {
                Dafny.ISequence<Dafny.Rune> _585_genType;
                Dafny.ISequence<Dafny.Rune> _out174;
                _out174 = DCOMP.COMP.GenType(_584_o, false, false);
                _585_genType = _out174;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _538_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _537_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _585_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _586___mcc_h7 = _source21.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _587_l = _586___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _587_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_CharLiteral) {
          Dafny.Rune _588___mcc_h8 = _source21.dtor_CharLiteral_a0;
          Dafny.Rune _589_c = _588___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_589_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _590___mcc_h9 = _source21.dtor_Null_a0;
          DAST._IType _591_tpe = _590___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _592_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out175;
            _out175 = DCOMP.COMP.GenType(_591_tpe, false, false);
            _592_tpeGen = _out175;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _592_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source20.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _593___mcc_h10 = _source20.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _594_name = _593___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_594_name);
          if (!((@params).Contains(_594_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_594_name);
        }
      } else if (_source20.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _595___mcc_h11 = _source20.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _596_path = _595___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out176;
          _out176 = DCOMP.COMP.GenPath(_596_path);
          s = _out176;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _597___mcc_h12 = _source20.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _598_values = _597___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _599_i;
          _599_i = BigInteger.Zero;
          while ((_599_i) < (new BigInteger((_598_values).Count))) {
            if ((_599_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _600_recursiveGen;
            bool _601___v31;
            bool _602_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _603_recIdents;
            Dafny.ISequence<Dafny.Rune> _out177;
            bool _out178;
            bool _out179;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out180;
            DCOMP.COMP.GenExpr((_598_values).Select(_599_i), selfIdent, @params, true, out _out177, out _out178, out _out179, out _out180);
            _600_recursiveGen = _out177;
            _601___v31 = _out178;
            _602_isErased = _out179;
            _603_recIdents = _out180;
            if (_602_isErased) {
              _600_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _600_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _600_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _603_recIdents);
            _599_i = (_599_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _604___mcc_h13 = _source20.dtor_path;
        Dafny.ISequence<DAST._IType> _605___mcc_h14 = _source20.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _606___mcc_h15 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _607_args = _606___mcc_h15;
        Dafny.ISequence<DAST._IType> _608_typeArgs = _605___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _609_path = _604___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _610_path;
          Dafny.ISequence<Dafny.Rune> _out181;
          _out181 = DCOMP.COMP.GenPath(_609_path);
          _610_path = _out181;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _610_path);
          if ((new BigInteger((_608_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _611_i;
            _611_i = BigInteger.Zero;
            while ((_611_i) < (new BigInteger((_608_typeArgs).Count))) {
              if ((_611_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _612_typeString;
              Dafny.ISequence<Dafny.Rune> _out182;
              _out182 = DCOMP.COMP.GenType((_608_typeArgs).Select(_611_i), false, false);
              _612_typeString = _out182;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _612_typeString);
              _611_i = (_611_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _613_i;
          _613_i = BigInteger.Zero;
          while ((_613_i) < (new BigInteger((_607_args).Count))) {
            if ((_613_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _614_recursiveGen;
            bool _615___v32;
            bool _616_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _617_recIdents;
            Dafny.ISequence<Dafny.Rune> _out183;
            bool _out184;
            bool _out185;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out186;
            DCOMP.COMP.GenExpr((_607_args).Select(_613_i), selfIdent, @params, true, out _out183, out _out184, out _out185, out _out186);
            _614_recursiveGen = _out183;
            _615___v32 = _out184;
            _616_isErased = _out185;
            _617_recIdents = _out186;
            if (_616_isErased) {
              _614_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _614_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _614_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _617_recIdents);
            _613_i = (_613_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source20.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _618___mcc_h16 = _source20.dtor_dims;
        DAST._IType _619___mcc_h17 = _source20.dtor_typ;
        DAST._IType _620_typ = _619___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _621_dims = _618___mcc_h16;
        {
          BigInteger _622_i;
          _622_i = (new BigInteger((_621_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _623_genTyp;
          Dafny.ISequence<Dafny.Rune> _out187;
          _out187 = DCOMP.COMP.GenType(_620_typ, false, false);
          _623_genTyp = _out187;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _623_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_622_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _624_recursiveGen;
            bool _625___v33;
            bool _626_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _627_recIdents;
            Dafny.ISequence<Dafny.Rune> _out188;
            bool _out189;
            bool _out190;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
            DCOMP.COMP.GenExpr((_621_dims).Select(_622_i), selfIdent, @params, true, out _out188, out _out189, out _out190, out _out191);
            _624_recursiveGen = _out188;
            _625___v33 = _out189;
            _626_isErased = _out190;
            _627_recIdents = _out191;
            if (!(_626_isErased)) {
              _624_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _624_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _624_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _627_recIdents);
            _622_i = (_622_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _628___mcc_h18 = _source20.dtor_path;
        Dafny.ISequence<DAST._IType> _629___mcc_h19 = _source20.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _630___mcc_h20 = _source20.dtor_variant;
        bool _631___mcc_h21 = _source20.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _632___mcc_h22 = _source20.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _633_values = _632___mcc_h22;
        bool _634_isCo = _631___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _635_variant = _630___mcc_h20;
        Dafny.ISequence<DAST._IType> _636_typeArgs = _629___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _637_path = _628___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _638_path;
          Dafny.ISequence<Dafny.Rune> _out192;
          _out192 = DCOMP.COMP.GenPath(_637_path);
          _638_path = _out192;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _638_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_636_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _639_i;
            _639_i = BigInteger.Zero;
            while ((_639_i) < (new BigInteger((_636_typeArgs).Count))) {
              if ((_639_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _640_typeString;
              Dafny.ISequence<Dafny.Rune> _out193;
              _out193 = DCOMP.COMP.GenType((_636_typeArgs).Select(_639_i), false, false);
              _640_typeString = _out193;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _640_typeString);
              _639_i = (_639_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_635_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _641_i;
          _641_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_641_i) < (new BigInteger((_633_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs0 = (_633_values).Select(_641_i);
            Dafny.ISequence<Dafny.Rune> _642_name = _let_tmp_rhs0.dtor__0;
            DAST._IExpression _643_value = _let_tmp_rhs0.dtor__1;
            if ((_641_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_634_isCo) {
              Dafny.ISequence<Dafny.Rune> _644_recursiveGen;
              bool _645___v34;
              bool _646_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _647_recIdents;
              Dafny.ISequence<Dafny.Rune> _out194;
              bool _out195;
              bool _out196;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out197;
              DCOMP.COMP.GenExpr(_643_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out194, out _out195, out _out196, out _out197);
              _644_recursiveGen = _out194;
              _645___v34 = _out195;
              _646_isErased = _out196;
              _647_recIdents = _out197;
              if (!(_646_isErased)) {
                _644_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _644_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _644_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _644_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _647_recIdents);
              Dafny.ISequence<Dafny.Rune> _648_allReadCloned;
              _648_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_647_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _649_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_647_recIdents).Elements) {
                  _649_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_647_recIdents).Contains(_649_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_0:;
                _648_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_648_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_649_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_649_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _647_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_647_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_649_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_642_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _648_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _644_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _650_recursiveGen;
              bool _651___v35;
              bool _652_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _653_recIdents;
              Dafny.ISequence<Dafny.Rune> _out198;
              bool _out199;
              bool _out200;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out201;
              DCOMP.COMP.GenExpr(_643_value, selfIdent, @params, true, out _out198, out _out199, out _out200, out _out201);
              _650_recursiveGen = _out198;
              _651___v35 = _out199;
              _652_isErased = _out200;
              _653_recIdents = _out201;
              if (!(_652_isErased)) {
                _650_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _650_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _650_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _650_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_642_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _650_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _653_recIdents);
            }
            _641_i = (_641_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_Convert) {
        DAST._IExpression _654___mcc_h23 = _source20.dtor_value;
        DAST._IType _655___mcc_h24 = _source20.dtor_from;
        DAST._IType _656___mcc_h25 = _source20.dtor_typ;
        DAST._IType _657_toTpe = _656___mcc_h25;
        DAST._IType _658_fromTpe = _655___mcc_h24;
        DAST._IExpression _659_expr = _654___mcc_h23;
        {
          if (object.Equals(_658_fromTpe, _657_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _660_recursiveGen;
            bool _661_recOwned;
            bool _662_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _663_recIdents;
            Dafny.ISequence<Dafny.Rune> _out202;
            bool _out203;
            bool _out204;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out205;
            DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out202, out _out203, out _out204, out _out205);
            _660_recursiveGen = _out202;
            _661_recOwned = _out203;
            _662_recErased = _out204;
            _663_recIdents = _out205;
            s = _660_recursiveGen;
            isOwned = _661_recOwned;
            isErased = _662_recErased;
            readIdents = _663_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source26 = _System.Tuple2<DAST._IType, DAST._IType>.create(_658_fromTpe, _657_toTpe);
            DAST._IType _664___mcc_h305 = _source26.dtor__0;
            DAST._IType _665___mcc_h306 = _source26.dtor__1;
            DAST._IType _source27 = _664___mcc_h305;
            if (_source27.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _666___mcc_h309 = _source27.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _667___mcc_h310 = _source27.dtor_typeArgs;
              DAST._IResolvedType _668___mcc_h311 = _source27.dtor_resolved;
              DAST._IResolvedType _source28 = _668___mcc_h311;
              if (_source28.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _669___mcc_h321 = _source28.dtor_path;
                DAST._IType _source29 = _665___mcc_h306;
                if (_source29.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _670___mcc_h325 = _source29.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _671___mcc_h326 = _source29.dtor_typeArgs;
                  DAST._IResolvedType _672___mcc_h327 = _source29.dtor_resolved;
                  DAST._IResolvedType _source30 = _672___mcc_h327;
                  if (_source30.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _673___mcc_h331 = _source30.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _674_recursiveGen;
                      bool _675_recOwned;
                      bool _676_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _677_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out206;
                      bool _out207;
                      bool _out208;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out206, out _out207, out _out208, out _out209);
                      _674_recursiveGen = _out206;
                      _675_recOwned = _out207;
                      _676_recErased = _out208;
                      _677_recIdents = _out209;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _674_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _675_recOwned;
                      isErased = _676_recErased;
                      readIdents = _677_recIdents;
                    }
                  } else if (_source30.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _678___mcc_h333 = _source30.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _679_recursiveGen;
                      bool _680_recOwned;
                      bool _681_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _682_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out210;
                      bool _out211;
                      bool _out212;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out213;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out210, out _out211, out _out212, out _out213);
                      _679_recursiveGen = _out210;
                      _680_recOwned = _out211;
                      _681_recErased = _out212;
                      _682_recIdents = _out213;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _679_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _680_recOwned;
                      isErased = _681_recErased;
                      readIdents = _682_recIdents;
                    }
                  } else {
                    DAST._IType _683___mcc_h335 = _source30.dtor_Newtype_a0;
                    DAST._IType _684_b = _683___mcc_h335;
                    {
                      if (object.Equals(_658_fromTpe, _684_b)) {
                        Dafny.ISequence<Dafny.Rune> _685_recursiveGen;
                        bool _686_recOwned;
                        bool _687_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _688_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out214;
                        bool _out215;
                        bool _out216;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out217;
                        DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out214, out _out215, out _out216, out _out217);
                        _685_recursiveGen = _out214;
                        _686_recOwned = _out215;
                        _687_recErased = _out216;
                        _688_recIdents = _out217;
                        Dafny.ISequence<Dafny.Rune> _689_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out218;
                        _out218 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                        _689_rhsType = _out218;
                        Dafny.ISequence<Dafny.Rune> _690_uneraseFn;
                        _690_uneraseFn = ((_686_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _689_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _690_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _685_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _686_recOwned;
                        isErased = false;
                        readIdents = _688_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out219;
                        bool _out220;
                        bool _out221;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _684_b), _684_b, _657_toTpe), selfIdent, @params, mustOwn, out _out219, out _out220, out _out221, out _out222);
                        s = _out219;
                        isOwned = _out220;
                        isErased = _out221;
                        readIdents = _out222;
                      }
                    }
                  }
                } else if (_source29.is_Nullable) {
                  DAST._IType _691___mcc_h337 = _source29.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _692_recursiveGen;
                    bool _693_recOwned;
                    bool _694_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _695_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out223;
                    bool _out224;
                    bool _out225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out223, out _out224, out _out225, out _out226);
                    _692_recursiveGen = _out223;
                    _693_recOwned = _out224;
                    _694_recErased = _out225;
                    _695_recIdents = _out226;
                    if (!(_693_recOwned)) {
                      _692_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_692_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _692_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _694_recErased;
                    readIdents = _695_recIdents;
                  }
                } else if (_source29.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _696___mcc_h339 = _source29.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _697_recursiveGen;
                    bool _698_recOwned;
                    bool _699_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _700_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out227;
                    bool _out228;
                    bool _out229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out227, out _out228, out _out229, out _out230);
                    _697_recursiveGen = _out227;
                    _698_recOwned = _out228;
                    _699_recErased = _out229;
                    _700_recIdents = _out230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _697_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _698_recOwned;
                    isErased = _699_recErased;
                    readIdents = _700_recIdents;
                  }
                } else if (_source29.is_Array) {
                  DAST._IType _701___mcc_h341 = _source29.dtor_element;
                  BigInteger _702___mcc_h342 = _source29.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _703_recursiveGen;
                    bool _704_recOwned;
                    bool _705_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _706_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out231;
                    bool _out232;
                    bool _out233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out234;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out231, out _out232, out _out233, out _out234);
                    _703_recursiveGen = _out231;
                    _704_recOwned = _out232;
                    _705_recErased = _out233;
                    _706_recIdents = _out234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _703_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _704_recOwned;
                    isErased = _705_recErased;
                    readIdents = _706_recIdents;
                  }
                } else if (_source29.is_Seq) {
                  DAST._IType _707___mcc_h345 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _708_recursiveGen;
                    bool _709_recOwned;
                    bool _710_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _711_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out235;
                    bool _out236;
                    bool _out237;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out238;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out235, out _out236, out _out237, out _out238);
                    _708_recursiveGen = _out235;
                    _709_recOwned = _out236;
                    _710_recErased = _out237;
                    _711_recIdents = _out238;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _708_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _709_recOwned;
                    isErased = _710_recErased;
                    readIdents = _711_recIdents;
                  }
                } else if (_source29.is_Set) {
                  DAST._IType _712___mcc_h347 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _713_recursiveGen;
                    bool _714_recOwned;
                    bool _715_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _716_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out239;
                    bool _out240;
                    bool _out241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out242;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out239, out _out240, out _out241, out _out242);
                    _713_recursiveGen = _out239;
                    _714_recOwned = _out240;
                    _715_recErased = _out241;
                    _716_recIdents = _out242;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _713_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _714_recOwned;
                    isErased = _715_recErased;
                    readIdents = _716_recIdents;
                  }
                } else if (_source29.is_Multiset) {
                  DAST._IType _717___mcc_h349 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _718_recursiveGen;
                    bool _719_recOwned;
                    bool _720_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _721_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out243;
                    bool _out244;
                    bool _out245;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out246;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out243, out _out244, out _out245, out _out246);
                    _718_recursiveGen = _out243;
                    _719_recOwned = _out244;
                    _720_recErased = _out245;
                    _721_recIdents = _out246;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _718_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _719_recOwned;
                    isErased = _720_recErased;
                    readIdents = _721_recIdents;
                  }
                } else if (_source29.is_Map) {
                  DAST._IType _722___mcc_h351 = _source29.dtor_key;
                  DAST._IType _723___mcc_h352 = _source29.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _724_recursiveGen;
                    bool _725_recOwned;
                    bool _726_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _727_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out247;
                    bool _out248;
                    bool _out249;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out247, out _out248, out _out249, out _out250);
                    _724_recursiveGen = _out247;
                    _725_recOwned = _out248;
                    _726_recErased = _out249;
                    _727_recIdents = _out250;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _724_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _725_recOwned;
                    isErased = _726_recErased;
                    readIdents = _727_recIdents;
                  }
                } else if (_source29.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _728___mcc_h355 = _source29.dtor_args;
                  DAST._IType _729___mcc_h356 = _source29.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _730_recursiveGen;
                    bool _731_recOwned;
                    bool _732_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _733_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out251;
                    bool _out252;
                    bool _out253;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out254;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out251, out _out252, out _out253, out _out254);
                    _730_recursiveGen = _out251;
                    _731_recOwned = _out252;
                    _732_recErased = _out253;
                    _733_recIdents = _out254;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _730_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _731_recOwned;
                    isErased = _732_recErased;
                    readIdents = _733_recIdents;
                  }
                } else if (_source29.is_Primitive) {
                  DAST._IPrimitive _734___mcc_h359 = _source29.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _735_recursiveGen;
                    bool _736_recOwned;
                    bool _737_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _738_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out255;
                    bool _out256;
                    bool _out257;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out258;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out255, out _out256, out _out257, out _out258);
                    _735_recursiveGen = _out255;
                    _736_recOwned = _out256;
                    _737_recErased = _out257;
                    _738_recIdents = _out258;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _735_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _736_recOwned;
                    isErased = _737_recErased;
                    readIdents = _738_recIdents;
                  }
                } else if (_source29.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _739___mcc_h361 = _source29.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _740_recursiveGen;
                    bool _741_recOwned;
                    bool _742_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _743_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out259;
                    bool _out260;
                    bool _out261;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out262;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out259, out _out260, out _out261, out _out262);
                    _740_recursiveGen = _out259;
                    _741_recOwned = _out260;
                    _742_recErased = _out261;
                    _743_recIdents = _out262;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _740_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _741_recOwned;
                    isErased = _742_recErased;
                    readIdents = _743_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _744___mcc_h363 = _source29.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _745_recursiveGen;
                    bool _746_recOwned;
                    bool _747_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _748_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out263;
                    bool _out264;
                    bool _out265;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out266;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out263, out _out264, out _out265, out _out266);
                    _745_recursiveGen = _out263;
                    _746_recOwned = _out264;
                    _747_recErased = _out265;
                    _748_recIdents = _out266;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _745_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _746_recOwned;
                    isErased = _747_recErased;
                    readIdents = _748_recIdents;
                  }
                }
              } else if (_source28.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _749___mcc_h365 = _source28.dtor_path;
                DAST._IType _source31 = _665___mcc_h306;
                if (_source31.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _750___mcc_h369 = _source31.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _751___mcc_h370 = _source31.dtor_typeArgs;
                  DAST._IResolvedType _752___mcc_h371 = _source31.dtor_resolved;
                  DAST._IResolvedType _source32 = _752___mcc_h371;
                  if (_source32.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _753___mcc_h375 = _source32.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _754_recursiveGen;
                      bool _755_recOwned;
                      bool _756_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _757_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out267;
                      bool _out268;
                      bool _out269;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out267, out _out268, out _out269, out _out270);
                      _754_recursiveGen = _out267;
                      _755_recOwned = _out268;
                      _756_recErased = _out269;
                      _757_recIdents = _out270;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _754_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _755_recOwned;
                      isErased = _756_recErased;
                      readIdents = _757_recIdents;
                    }
                  } else if (_source32.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _758___mcc_h377 = _source32.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _759_recursiveGen;
                      bool _760_recOwned;
                      bool _761_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _762_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out271;
                      bool _out272;
                      bool _out273;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out274;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out271, out _out272, out _out273, out _out274);
                      _759_recursiveGen = _out271;
                      _760_recOwned = _out272;
                      _761_recErased = _out273;
                      _762_recIdents = _out274;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _759_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _760_recOwned;
                      isErased = _761_recErased;
                      readIdents = _762_recIdents;
                    }
                  } else {
                    DAST._IType _763___mcc_h379 = _source32.dtor_Newtype_a0;
                    DAST._IType _764_b = _763___mcc_h379;
                    {
                      if (object.Equals(_658_fromTpe, _764_b)) {
                        Dafny.ISequence<Dafny.Rune> _765_recursiveGen;
                        bool _766_recOwned;
                        bool _767_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _768_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out275;
                        bool _out276;
                        bool _out277;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                        DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out275, out _out276, out _out277, out _out278);
                        _765_recursiveGen = _out275;
                        _766_recOwned = _out276;
                        _767_recErased = _out277;
                        _768_recIdents = _out278;
                        Dafny.ISequence<Dafny.Rune> _769_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out279;
                        _out279 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                        _769_rhsType = _out279;
                        Dafny.ISequence<Dafny.Rune> _770_uneraseFn;
                        _770_uneraseFn = ((_766_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _769_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _770_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _765_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _766_recOwned;
                        isErased = false;
                        readIdents = _768_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out280;
                        bool _out281;
                        bool _out282;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _764_b), _764_b, _657_toTpe), selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                        s = _out280;
                        isOwned = _out281;
                        isErased = _out282;
                        readIdents = _out283;
                      }
                    }
                  }
                } else if (_source31.is_Nullable) {
                  DAST._IType _771___mcc_h381 = _source31.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _772_recursiveGen;
                    bool _773_recOwned;
                    bool _774_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _775_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out284;
                    bool _out285;
                    bool _out286;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                    _772_recursiveGen = _out284;
                    _773_recOwned = _out285;
                    _774_recErased = _out286;
                    _775_recIdents = _out287;
                    if (!(_773_recOwned)) {
                      _772_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_772_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _772_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _774_recErased;
                    readIdents = _775_recIdents;
                  }
                } else if (_source31.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _776___mcc_h383 = _source31.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _777_recursiveGen;
                    bool _778_recOwned;
                    bool _779_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _780_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out288;
                    bool _out289;
                    bool _out290;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290, out _out291);
                    _777_recursiveGen = _out288;
                    _778_recOwned = _out289;
                    _779_recErased = _out290;
                    _780_recIdents = _out291;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _777_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _778_recOwned;
                    isErased = _779_recErased;
                    readIdents = _780_recIdents;
                  }
                } else if (_source31.is_Array) {
                  DAST._IType _781___mcc_h385 = _source31.dtor_element;
                  BigInteger _782___mcc_h386 = _source31.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _783_recursiveGen;
                    bool _784_recOwned;
                    bool _785_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _786_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out292;
                    bool _out293;
                    bool _out294;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out292, out _out293, out _out294, out _out295);
                    _783_recursiveGen = _out292;
                    _784_recOwned = _out293;
                    _785_recErased = _out294;
                    _786_recIdents = _out295;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _783_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _784_recOwned;
                    isErased = _785_recErased;
                    readIdents = _786_recIdents;
                  }
                } else if (_source31.is_Seq) {
                  DAST._IType _787___mcc_h389 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _788_recursiveGen;
                    bool _789_recOwned;
                    bool _790_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _791_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out296;
                    bool _out297;
                    bool _out298;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out299;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out296, out _out297, out _out298, out _out299);
                    _788_recursiveGen = _out296;
                    _789_recOwned = _out297;
                    _790_recErased = _out298;
                    _791_recIdents = _out299;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _788_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _789_recOwned;
                    isErased = _790_recErased;
                    readIdents = _791_recIdents;
                  }
                } else if (_source31.is_Set) {
                  DAST._IType _792___mcc_h391 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _793_recursiveGen;
                    bool _794_recOwned;
                    bool _795_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _796_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out300;
                    bool _out301;
                    bool _out302;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out303;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out300, out _out301, out _out302, out _out303);
                    _793_recursiveGen = _out300;
                    _794_recOwned = _out301;
                    _795_recErased = _out302;
                    _796_recIdents = _out303;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _793_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _794_recOwned;
                    isErased = _795_recErased;
                    readIdents = _796_recIdents;
                  }
                } else if (_source31.is_Multiset) {
                  DAST._IType _797___mcc_h393 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _798_recursiveGen;
                    bool _799_recOwned;
                    bool _800_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _801_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out304;
                    bool _out305;
                    bool _out306;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out307;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out304, out _out305, out _out306, out _out307);
                    _798_recursiveGen = _out304;
                    _799_recOwned = _out305;
                    _800_recErased = _out306;
                    _801_recIdents = _out307;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _798_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _799_recOwned;
                    isErased = _800_recErased;
                    readIdents = _801_recIdents;
                  }
                } else if (_source31.is_Map) {
                  DAST._IType _802___mcc_h395 = _source31.dtor_key;
                  DAST._IType _803___mcc_h396 = _source31.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _804_recursiveGen;
                    bool _805_recOwned;
                    bool _806_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _807_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out308;
                    bool _out309;
                    bool _out310;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out311;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out308, out _out309, out _out310, out _out311);
                    _804_recursiveGen = _out308;
                    _805_recOwned = _out309;
                    _806_recErased = _out310;
                    _807_recIdents = _out311;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _804_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _805_recOwned;
                    isErased = _806_recErased;
                    readIdents = _807_recIdents;
                  }
                } else if (_source31.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _808___mcc_h399 = _source31.dtor_args;
                  DAST._IType _809___mcc_h400 = _source31.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _810_recursiveGen;
                    bool _811_recOwned;
                    bool _812_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _813_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out312;
                    bool _out313;
                    bool _out314;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out312, out _out313, out _out314, out _out315);
                    _810_recursiveGen = _out312;
                    _811_recOwned = _out313;
                    _812_recErased = _out314;
                    _813_recIdents = _out315;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _810_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _811_recOwned;
                    isErased = _812_recErased;
                    readIdents = _813_recIdents;
                  }
                } else if (_source31.is_Primitive) {
                  DAST._IPrimitive _814___mcc_h403 = _source31.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _815_recursiveGen;
                    bool _816_recOwned;
                    bool _817_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _818_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out316;
                    bool _out317;
                    bool _out318;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out319;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out316, out _out317, out _out318, out _out319);
                    _815_recursiveGen = _out316;
                    _816_recOwned = _out317;
                    _817_recErased = _out318;
                    _818_recIdents = _out319;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _815_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _816_recOwned;
                    isErased = _817_recErased;
                    readIdents = _818_recIdents;
                  }
                } else if (_source31.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _819___mcc_h405 = _source31.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _820_recursiveGen;
                    bool _821_recOwned;
                    bool _822_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _823_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out320;
                    bool _out321;
                    bool _out322;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out323;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out320, out _out321, out _out322, out _out323);
                    _820_recursiveGen = _out320;
                    _821_recOwned = _out321;
                    _822_recErased = _out322;
                    _823_recIdents = _out323;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _820_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _821_recOwned;
                    isErased = _822_recErased;
                    readIdents = _823_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _824___mcc_h407 = _source31.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _825_recursiveGen;
                    bool _826_recOwned;
                    bool _827_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _828_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out324;
                    bool _out325;
                    bool _out326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out327;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out324, out _out325, out _out326, out _out327);
                    _825_recursiveGen = _out324;
                    _826_recOwned = _out325;
                    _827_recErased = _out326;
                    _828_recIdents = _out327;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _825_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _826_recOwned;
                    isErased = _827_recErased;
                    readIdents = _828_recIdents;
                  }
                }
              } else {
                DAST._IType _829___mcc_h409 = _source28.dtor_Newtype_a0;
                DAST._IType _source33 = _665___mcc_h306;
                if (_source33.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _830___mcc_h413 = _source33.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _831___mcc_h414 = _source33.dtor_typeArgs;
                  DAST._IResolvedType _832___mcc_h415 = _source33.dtor_resolved;
                  DAST._IResolvedType _source34 = _832___mcc_h415;
                  if (_source34.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _833___mcc_h422 = _source34.dtor_path;
                    DAST._IType _834_b = _829___mcc_h409;
                    {
                      if (object.Equals(_834_b, _657_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _835_recursiveGen;
                        bool _836_recOwned;
                        bool _837_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _838_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out328;
                        bool _out329;
                        bool _out330;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                        DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out328, out _out329, out _out330, out _out331);
                        _835_recursiveGen = _out328;
                        _836_recOwned = _out329;
                        _837_recErased = _out330;
                        _838_recIdents = _out331;
                        Dafny.ISequence<Dafny.Rune> _839_uneraseFn;
                        _839_uneraseFn = ((_836_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _839_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _835_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _836_recOwned;
                        isErased = true;
                        readIdents = _838_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out332;
                        bool _out333;
                        bool _out334;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out335;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _834_b), _834_b, _657_toTpe), selfIdent, @params, mustOwn, out _out332, out _out333, out _out334, out _out335);
                        s = _out332;
                        isOwned = _out333;
                        isErased = _out334;
                        readIdents = _out335;
                      }
                    }
                  } else if (_source34.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _840___mcc_h425 = _source34.dtor_path;
                    DAST._IType _841_b = _829___mcc_h409;
                    {
                      if (object.Equals(_841_b, _657_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _842_recursiveGen;
                        bool _843_recOwned;
                        bool _844_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _845_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out336;
                        bool _out337;
                        bool _out338;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                        DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out336, out _out337, out _out338, out _out339);
                        _842_recursiveGen = _out336;
                        _843_recOwned = _out337;
                        _844_recErased = _out338;
                        _845_recIdents = _out339;
                        Dafny.ISequence<Dafny.Rune> _846_uneraseFn;
                        _846_uneraseFn = ((_843_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _846_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _842_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _843_recOwned;
                        isErased = true;
                        readIdents = _845_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out340;
                        bool _out341;
                        bool _out342;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _841_b), _841_b, _657_toTpe), selfIdent, @params, mustOwn, out _out340, out _out341, out _out342, out _out343);
                        s = _out340;
                        isOwned = _out341;
                        isErased = _out342;
                        readIdents = _out343;
                      }
                    }
                  } else {
                    DAST._IType _847___mcc_h428 = _source34.dtor_Newtype_a0;
                    DAST._IType _848_b = _847___mcc_h428;
                    {
                      if (object.Equals(_658_fromTpe, _848_b)) {
                        Dafny.ISequence<Dafny.Rune> _849_recursiveGen;
                        bool _850_recOwned;
                        bool _851_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _852_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out344;
                        bool _out345;
                        bool _out346;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out347;
                        DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out344, out _out345, out _out346, out _out347);
                        _849_recursiveGen = _out344;
                        _850_recOwned = _out345;
                        _851_recErased = _out346;
                        _852_recIdents = _out347;
                        Dafny.ISequence<Dafny.Rune> _853_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out348;
                        _out348 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                        _853_rhsType = _out348;
                        Dafny.ISequence<Dafny.Rune> _854_uneraseFn;
                        _854_uneraseFn = ((_850_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _853_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _854_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _849_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _850_recOwned;
                        isErased = false;
                        readIdents = _852_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out349;
                        bool _out350;
                        bool _out351;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _848_b), _848_b, _657_toTpe), selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                        s = _out349;
                        isOwned = _out350;
                        isErased = _out351;
                        readIdents = _out352;
                      }
                    }
                  }
                } else if (_source33.is_Nullable) {
                  DAST._IType _855___mcc_h431 = _source33.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _856_recursiveGen;
                    bool _857_recOwned;
                    bool _858_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _859_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out353;
                    bool _out354;
                    bool _out355;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                    _856_recursiveGen = _out353;
                    _857_recOwned = _out354;
                    _858_recErased = _out355;
                    _859_recIdents = _out356;
                    if (!(_857_recOwned)) {
                      _856_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_856_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _856_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _858_recErased;
                    readIdents = _859_recIdents;
                  }
                } else if (_source33.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _860___mcc_h434 = _source33.dtor_Tuple_a0;
                  DAST._IType _861_b = _829___mcc_h409;
                  {
                    if (object.Equals(_861_b, _657_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _862_recursiveGen;
                      bool _863_recOwned;
                      bool _864_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _865_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out357;
                      bool _out358;
                      bool _out359;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out357, out _out358, out _out359, out _out360);
                      _862_recursiveGen = _out357;
                      _863_recOwned = _out358;
                      _864_recErased = _out359;
                      _865_recIdents = _out360;
                      Dafny.ISequence<Dafny.Rune> _866_uneraseFn;
                      _866_uneraseFn = ((_863_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _866_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _862_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _863_recOwned;
                      isErased = true;
                      readIdents = _865_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out361;
                      bool _out362;
                      bool _out363;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out364;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _861_b), _861_b, _657_toTpe), selfIdent, @params, mustOwn, out _out361, out _out362, out _out363, out _out364);
                      s = _out361;
                      isOwned = _out362;
                      isErased = _out363;
                      readIdents = _out364;
                    }
                  }
                } else if (_source33.is_Array) {
                  DAST._IType _867___mcc_h437 = _source33.dtor_element;
                  BigInteger _868___mcc_h438 = _source33.dtor_dims;
                  DAST._IType _869_b = _829___mcc_h409;
                  {
                    if (object.Equals(_869_b, _657_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _870_recursiveGen;
                      bool _871_recOwned;
                      bool _872_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _873_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out365;
                      bool _out366;
                      bool _out367;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out368;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out365, out _out366, out _out367, out _out368);
                      _870_recursiveGen = _out365;
                      _871_recOwned = _out366;
                      _872_recErased = _out367;
                      _873_recIdents = _out368;
                      Dafny.ISequence<Dafny.Rune> _874_uneraseFn;
                      _874_uneraseFn = ((_871_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _874_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _870_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _871_recOwned;
                      isErased = true;
                      readIdents = _873_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out369;
                      bool _out370;
                      bool _out371;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out372;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _869_b), _869_b, _657_toTpe), selfIdent, @params, mustOwn, out _out369, out _out370, out _out371, out _out372);
                      s = _out369;
                      isOwned = _out370;
                      isErased = _out371;
                      readIdents = _out372;
                    }
                  }
                } else if (_source33.is_Seq) {
                  DAST._IType _875___mcc_h443 = _source33.dtor_element;
                  DAST._IType _876_b = _829___mcc_h409;
                  {
                    if (object.Equals(_876_b, _657_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _877_recursiveGen;
                      bool _878_recOwned;
                      bool _879_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _880_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out373;
                      bool _out374;
                      bool _out375;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out373, out _out374, out _out375, out _out376);
                      _877_recursiveGen = _out373;
                      _878_recOwned = _out374;
                      _879_recErased = _out375;
                      _880_recIdents = _out376;
                      Dafny.ISequence<Dafny.Rune> _881_uneraseFn;
                      _881_uneraseFn = ((_878_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _881_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _877_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _878_recOwned;
                      isErased = true;
                      readIdents = _880_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out377;
                      bool _out378;
                      bool _out379;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out380;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _876_b), _876_b, _657_toTpe), selfIdent, @params, mustOwn, out _out377, out _out378, out _out379, out _out380);
                      s = _out377;
                      isOwned = _out378;
                      isErased = _out379;
                      readIdents = _out380;
                    }
                  }
                } else if (_source33.is_Set) {
                  DAST._IType _882___mcc_h446 = _source33.dtor_element;
                  DAST._IType _883_b = _829___mcc_h409;
                  {
                    if (object.Equals(_883_b, _657_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _884_recursiveGen;
                      bool _885_recOwned;
                      bool _886_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _887_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out381;
                      bool _out382;
                      bool _out383;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out381, out _out382, out _out383, out _out384);
                      _884_recursiveGen = _out381;
                      _885_recOwned = _out382;
                      _886_recErased = _out383;
                      _887_recIdents = _out384;
                      Dafny.ISequence<Dafny.Rune> _888_uneraseFn;
                      _888_uneraseFn = ((_885_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _888_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _884_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _885_recOwned;
                      isErased = true;
                      readIdents = _887_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out385;
                      bool _out386;
                      bool _out387;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out388;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _883_b), _883_b, _657_toTpe), selfIdent, @params, mustOwn, out _out385, out _out386, out _out387, out _out388);
                      s = _out385;
                      isOwned = _out386;
                      isErased = _out387;
                      readIdents = _out388;
                    }
                  }
                } else if (_source33.is_Multiset) {
                  DAST._IType _889___mcc_h449 = _source33.dtor_element;
                  DAST._IType _890_b = _829___mcc_h409;
                  {
                    if (object.Equals(_890_b, _657_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _891_recursiveGen;
                      bool _892_recOwned;
                      bool _893_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _894_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out389;
                      bool _out390;
                      bool _out391;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out392;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out389, out _out390, out _out391, out _out392);
                      _891_recursiveGen = _out389;
                      _892_recOwned = _out390;
                      _893_recErased = _out391;
                      _894_recIdents = _out392;
                      Dafny.ISequence<Dafny.Rune> _895_uneraseFn;
                      _895_uneraseFn = ((_892_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _895_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _891_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _892_recOwned;
                      isErased = true;
                      readIdents = _894_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out393;
                      bool _out394;
                      bool _out395;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out396;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _890_b), _890_b, _657_toTpe), selfIdent, @params, mustOwn, out _out393, out _out394, out _out395, out _out396);
                      s = _out393;
                      isOwned = _out394;
                      isErased = _out395;
                      readIdents = _out396;
                    }
                  }
                } else if (_source33.is_Map) {
                  DAST._IType _896___mcc_h452 = _source33.dtor_key;
                  DAST._IType _897___mcc_h453 = _source33.dtor_value;
                  DAST._IType _898_b = _829___mcc_h409;
                  {
                    if (object.Equals(_898_b, _657_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _899_recursiveGen;
                      bool _900_recOwned;
                      bool _901_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _902_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out397;
                      bool _out398;
                      bool _out399;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out397, out _out398, out _out399, out _out400);
                      _899_recursiveGen = _out397;
                      _900_recOwned = _out398;
                      _901_recErased = _out399;
                      _902_recIdents = _out400;
                      Dafny.ISequence<Dafny.Rune> _903_uneraseFn;
                      _903_uneraseFn = ((_900_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _903_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _899_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _900_recOwned;
                      isErased = true;
                      readIdents = _902_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out401;
                      bool _out402;
                      bool _out403;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out404;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _898_b), _898_b, _657_toTpe), selfIdent, @params, mustOwn, out _out401, out _out402, out _out403, out _out404);
                      s = _out401;
                      isOwned = _out402;
                      isErased = _out403;
                      readIdents = _out404;
                    }
                  }
                } else if (_source33.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _904___mcc_h458 = _source33.dtor_args;
                  DAST._IType _905___mcc_h459 = _source33.dtor_result;
                  DAST._IType _906_b = _829___mcc_h409;
                  {
                    if (object.Equals(_906_b, _657_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _907_recursiveGen;
                      bool _908_recOwned;
                      bool _909_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _910_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out405;
                      bool _out406;
                      bool _out407;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out405, out _out406, out _out407, out _out408);
                      _907_recursiveGen = _out405;
                      _908_recOwned = _out406;
                      _909_recErased = _out407;
                      _910_recIdents = _out408;
                      Dafny.ISequence<Dafny.Rune> _911_uneraseFn;
                      _911_uneraseFn = ((_908_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _911_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _907_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _908_recOwned;
                      isErased = true;
                      readIdents = _910_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out409;
                      bool _out410;
                      bool _out411;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _906_b), _906_b, _657_toTpe), selfIdent, @params, mustOwn, out _out409, out _out410, out _out411, out _out412);
                      s = _out409;
                      isOwned = _out410;
                      isErased = _out411;
                      readIdents = _out412;
                    }
                  }
                } else if (_source33.is_Primitive) {
                  DAST._IPrimitive _912___mcc_h464 = _source33.dtor_Primitive_a0;
                  DAST._IType _913_b = _829___mcc_h409;
                  {
                    if (object.Equals(_913_b, _657_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _914_recursiveGen;
                      bool _915_recOwned;
                      bool _916_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _917_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out413;
                      bool _out414;
                      bool _out415;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out413, out _out414, out _out415, out _out416);
                      _914_recursiveGen = _out413;
                      _915_recOwned = _out414;
                      _916_recErased = _out415;
                      _917_recIdents = _out416;
                      Dafny.ISequence<Dafny.Rune> _918_uneraseFn;
                      _918_uneraseFn = ((_915_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _918_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _914_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _915_recOwned;
                      isErased = true;
                      readIdents = _917_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out417;
                      bool _out418;
                      bool _out419;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out420;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _913_b), _913_b, _657_toTpe), selfIdent, @params, mustOwn, out _out417, out _out418, out _out419, out _out420);
                      s = _out417;
                      isOwned = _out418;
                      isErased = _out419;
                      readIdents = _out420;
                    }
                  }
                } else if (_source33.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _919___mcc_h467 = _source33.dtor_Passthrough_a0;
                  DAST._IType _920_b = _829___mcc_h409;
                  {
                    if (object.Equals(_920_b, _657_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _921_recursiveGen;
                      bool _922_recOwned;
                      bool _923_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _924_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out421;
                      bool _out422;
                      bool _out423;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out421, out _out422, out _out423, out _out424);
                      _921_recursiveGen = _out421;
                      _922_recOwned = _out422;
                      _923_recErased = _out423;
                      _924_recIdents = _out424;
                      Dafny.ISequence<Dafny.Rune> _925_uneraseFn;
                      _925_uneraseFn = ((_922_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _925_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _921_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _922_recOwned;
                      isErased = true;
                      readIdents = _924_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out425;
                      bool _out426;
                      bool _out427;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _920_b), _920_b, _657_toTpe), selfIdent, @params, mustOwn, out _out425, out _out426, out _out427, out _out428);
                      s = _out425;
                      isOwned = _out426;
                      isErased = _out427;
                      readIdents = _out428;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _926___mcc_h470 = _source33.dtor_TypeArg_a0;
                  DAST._IType _927_b = _829___mcc_h409;
                  {
                    if (object.Equals(_927_b, _657_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _928_recursiveGen;
                      bool _929_recOwned;
                      bool _930_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _931_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out429;
                      bool _out430;
                      bool _out431;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out429, out _out430, out _out431, out _out432);
                      _928_recursiveGen = _out429;
                      _929_recOwned = _out430;
                      _930_recErased = _out431;
                      _931_recIdents = _out432;
                      Dafny.ISequence<Dafny.Rune> _932_uneraseFn;
                      _932_uneraseFn = ((_929_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _932_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _928_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _929_recOwned;
                      isErased = true;
                      readIdents = _931_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out433;
                      bool _out434;
                      bool _out435;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _927_b), _927_b, _657_toTpe), selfIdent, @params, mustOwn, out _out433, out _out434, out _out435, out _out436);
                      s = _out433;
                      isOwned = _out434;
                      isErased = _out435;
                      readIdents = _out436;
                    }
                  }
                }
              }
            } else if (_source27.is_Nullable) {
              DAST._IType _933___mcc_h473 = _source27.dtor_Nullable_a0;
              DAST._IType _source35 = _665___mcc_h306;
              if (_source35.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _934___mcc_h477 = _source35.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _935___mcc_h478 = _source35.dtor_typeArgs;
                DAST._IResolvedType _936___mcc_h479 = _source35.dtor_resolved;
                DAST._IResolvedType _source36 = _936___mcc_h479;
                if (_source36.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _937___mcc_h486 = _source36.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _938_recursiveGen;
                    bool _939_recOwned;
                    bool _940_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _941_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out437;
                    bool _out438;
                    bool _out439;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out437, out _out438, out _out439, out _out440);
                    _938_recursiveGen = _out437;
                    _939_recOwned = _out438;
                    _940_recErased = _out439;
                    _941_recIdents = _out440;
                    if (!(_939_recOwned)) {
                      _938_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_938_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_938_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _939_recOwned;
                    isErased = _940_recErased;
                    readIdents = _941_recIdents;
                  }
                } else if (_source36.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _942___mcc_h489 = _source36.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _943_recursiveGen;
                    bool _944_recOwned;
                    bool _945_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _946_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out441;
                    bool _out442;
                    bool _out443;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out444;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out441, out _out442, out _out443, out _out444);
                    _943_recursiveGen = _out441;
                    _944_recOwned = _out442;
                    _945_recErased = _out443;
                    _946_recIdents = _out444;
                    if (!(_944_recOwned)) {
                      _943_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_943_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_943_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _944_recOwned;
                    isErased = _945_recErased;
                    readIdents = _946_recIdents;
                  }
                } else {
                  DAST._IType _947___mcc_h492 = _source36.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _948_recursiveGen;
                    bool _949_recOwned;
                    bool _950_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _951_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out445;
                    bool _out446;
                    bool _out447;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out445, out _out446, out _out447, out _out448);
                    _948_recursiveGen = _out445;
                    _949_recOwned = _out446;
                    _950_recErased = _out447;
                    _951_recIdents = _out448;
                    if (!(_949_recOwned)) {
                      _948_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_948_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_948_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _949_recOwned;
                    isErased = _950_recErased;
                    readIdents = _951_recIdents;
                  }
                }
              } else if (_source35.is_Nullable) {
                DAST._IType _952___mcc_h495 = _source35.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _953_recursiveGen;
                  bool _954_recOwned;
                  bool _955_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _956_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out449;
                  bool _out450;
                  bool _out451;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out452;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out449, out _out450, out _out451, out _out452);
                  _953_recursiveGen = _out449;
                  _954_recOwned = _out450;
                  _955_recErased = _out451;
                  _956_recIdents = _out452;
                  if (!(_954_recOwned)) {
                    _953_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_953_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_953_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _954_recOwned;
                  isErased = _955_recErased;
                  readIdents = _956_recIdents;
                }
              } else if (_source35.is_Tuple) {
                Dafny.ISequence<DAST._IType> _957___mcc_h498 = _source35.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _958_recursiveGen;
                  bool _959_recOwned;
                  bool _960_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _961_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out453;
                  bool _out454;
                  bool _out455;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out453, out _out454, out _out455, out _out456);
                  _958_recursiveGen = _out453;
                  _959_recOwned = _out454;
                  _960_recErased = _out455;
                  _961_recIdents = _out456;
                  if (!(_959_recOwned)) {
                    _958_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_958_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_958_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _959_recOwned;
                  isErased = _960_recErased;
                  readIdents = _961_recIdents;
                }
              } else if (_source35.is_Array) {
                DAST._IType _962___mcc_h501 = _source35.dtor_element;
                BigInteger _963___mcc_h502 = _source35.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _964_recursiveGen;
                  bool _965_recOwned;
                  bool _966_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _967_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out457;
                  bool _out458;
                  bool _out459;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out457, out _out458, out _out459, out _out460);
                  _964_recursiveGen = _out457;
                  _965_recOwned = _out458;
                  _966_recErased = _out459;
                  _967_recIdents = _out460;
                  if (!(_965_recOwned)) {
                    _964_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_964_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_964_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _965_recOwned;
                  isErased = _966_recErased;
                  readIdents = _967_recIdents;
                }
              } else if (_source35.is_Seq) {
                DAST._IType _968___mcc_h507 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _969_recursiveGen;
                  bool _970_recOwned;
                  bool _971_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _972_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out461;
                  bool _out462;
                  bool _out463;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out461, out _out462, out _out463, out _out464);
                  _969_recursiveGen = _out461;
                  _970_recOwned = _out462;
                  _971_recErased = _out463;
                  _972_recIdents = _out464;
                  if (!(_970_recOwned)) {
                    _969_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_969_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_969_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _970_recOwned;
                  isErased = _971_recErased;
                  readIdents = _972_recIdents;
                }
              } else if (_source35.is_Set) {
                DAST._IType _973___mcc_h510 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _974_recursiveGen;
                  bool _975_recOwned;
                  bool _976_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _977_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out465;
                  bool _out466;
                  bool _out467;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out468;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out465, out _out466, out _out467, out _out468);
                  _974_recursiveGen = _out465;
                  _975_recOwned = _out466;
                  _976_recErased = _out467;
                  _977_recIdents = _out468;
                  if (!(_975_recOwned)) {
                    _974_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_974_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_974_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _975_recOwned;
                  isErased = _976_recErased;
                  readIdents = _977_recIdents;
                }
              } else if (_source35.is_Multiset) {
                DAST._IType _978___mcc_h513 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _979_recursiveGen;
                  bool _980_recOwned;
                  bool _981_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _982_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out469;
                  bool _out470;
                  bool _out471;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out469, out _out470, out _out471, out _out472);
                  _979_recursiveGen = _out469;
                  _980_recOwned = _out470;
                  _981_recErased = _out471;
                  _982_recIdents = _out472;
                  if (!(_980_recOwned)) {
                    _979_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_979_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_979_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _980_recOwned;
                  isErased = _981_recErased;
                  readIdents = _982_recIdents;
                }
              } else if (_source35.is_Map) {
                DAST._IType _983___mcc_h516 = _source35.dtor_key;
                DAST._IType _984___mcc_h517 = _source35.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _985_recursiveGen;
                  bool _986_recOwned;
                  bool _987_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _988_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out473;
                  bool _out474;
                  bool _out475;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out473, out _out474, out _out475, out _out476);
                  _985_recursiveGen = _out473;
                  _986_recOwned = _out474;
                  _987_recErased = _out475;
                  _988_recIdents = _out476;
                  if (!(_986_recOwned)) {
                    _985_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_985_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_985_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _986_recOwned;
                  isErased = _987_recErased;
                  readIdents = _988_recIdents;
                }
              } else if (_source35.is_Arrow) {
                Dafny.ISequence<DAST._IType> _989___mcc_h522 = _source35.dtor_args;
                DAST._IType _990___mcc_h523 = _source35.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _991_recursiveGen;
                  bool _992_recOwned;
                  bool _993_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _994_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out477;
                  bool _out478;
                  bool _out479;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out477, out _out478, out _out479, out _out480);
                  _991_recursiveGen = _out477;
                  _992_recOwned = _out478;
                  _993_recErased = _out479;
                  _994_recIdents = _out480;
                  if (!(_992_recOwned)) {
                    _991_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_991_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_991_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _992_recOwned;
                  isErased = _993_recErased;
                  readIdents = _994_recIdents;
                }
              } else if (_source35.is_Primitive) {
                DAST._IPrimitive _995___mcc_h528 = _source35.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _996_recursiveGen;
                  bool _997_recOwned;
                  bool _998_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _999_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out481;
                  bool _out482;
                  bool _out483;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out484;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out481, out _out482, out _out483, out _out484);
                  _996_recursiveGen = _out481;
                  _997_recOwned = _out482;
                  _998_recErased = _out483;
                  _999_recIdents = _out484;
                  if (!(_997_recOwned)) {
                    _996_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_996_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_996_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _997_recOwned;
                  isErased = _998_recErased;
                  readIdents = _999_recIdents;
                }
              } else if (_source35.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1000___mcc_h531 = _source35.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1001_recursiveGen;
                  bool _1002_recOwned;
                  bool _1003_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1004_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out485;
                  bool _out486;
                  bool _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out485, out _out486, out _out487, out _out488);
                  _1001_recursiveGen = _out485;
                  _1002_recOwned = _out486;
                  _1003_recErased = _out487;
                  _1004_recIdents = _out488;
                  if (!(_1002_recOwned)) {
                    _1001_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1001_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1001_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1002_recOwned;
                  isErased = _1003_recErased;
                  readIdents = _1004_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1005___mcc_h534 = _source35.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1006_recursiveGen;
                  bool _1007_recOwned;
                  bool _1008_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1009_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out489;
                  bool _out490;
                  bool _out491;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out492;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out489, out _out490, out _out491, out _out492);
                  _1006_recursiveGen = _out489;
                  _1007_recOwned = _out490;
                  _1008_recErased = _out491;
                  _1009_recIdents = _out492;
                  if (!(_1007_recOwned)) {
                    _1006_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1006_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1006_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1007_recOwned;
                  isErased = _1008_recErased;
                  readIdents = _1009_recIdents;
                }
              }
            } else if (_source27.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1010___mcc_h537 = _source27.dtor_Tuple_a0;
              DAST._IType _source37 = _665___mcc_h306;
              if (_source37.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1011___mcc_h541 = _source37.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1012___mcc_h542 = _source37.dtor_typeArgs;
                DAST._IResolvedType _1013___mcc_h543 = _source37.dtor_resolved;
                DAST._IResolvedType _source38 = _1013___mcc_h543;
                if (_source38.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1014___mcc_h547 = _source38.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1015_recursiveGen;
                    bool _1016_recOwned;
                    bool _1017_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1018_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out493;
                    bool _out494;
                    bool _out495;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out493, out _out494, out _out495, out _out496);
                    _1015_recursiveGen = _out493;
                    _1016_recOwned = _out494;
                    _1017_recErased = _out495;
                    _1018_recIdents = _out496;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1015_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1016_recOwned;
                    isErased = _1017_recErased;
                    readIdents = _1018_recIdents;
                  }
                } else if (_source38.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1019___mcc_h549 = _source38.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1020_recursiveGen;
                    bool _1021_recOwned;
                    bool _1022_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1023_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out497;
                    bool _out498;
                    bool _out499;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out497, out _out498, out _out499, out _out500);
                    _1020_recursiveGen = _out497;
                    _1021_recOwned = _out498;
                    _1022_recErased = _out499;
                    _1023_recIdents = _out500;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1020_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1021_recOwned;
                    isErased = _1022_recErased;
                    readIdents = _1023_recIdents;
                  }
                } else {
                  DAST._IType _1024___mcc_h551 = _source38.dtor_Newtype_a0;
                  DAST._IType _1025_b = _1024___mcc_h551;
                  {
                    if (object.Equals(_658_fromTpe, _1025_b)) {
                      Dafny.ISequence<Dafny.Rune> _1026_recursiveGen;
                      bool _1027_recOwned;
                      bool _1028_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1029_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out501;
                      bool _out502;
                      bool _out503;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out501, out _out502, out _out503, out _out504);
                      _1026_recursiveGen = _out501;
                      _1027_recOwned = _out502;
                      _1028_recErased = _out503;
                      _1029_recIdents = _out504;
                      Dafny.ISequence<Dafny.Rune> _1030_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out505;
                      _out505 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                      _1030_rhsType = _out505;
                      Dafny.ISequence<Dafny.Rune> _1031_uneraseFn;
                      _1031_uneraseFn = ((_1027_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1030_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1031_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1026_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1027_recOwned;
                      isErased = false;
                      readIdents = _1029_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out506;
                      bool _out507;
                      bool _out508;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1025_b), _1025_b, _657_toTpe), selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                      s = _out506;
                      isOwned = _out507;
                      isErased = _out508;
                      readIdents = _out509;
                    }
                  }
                }
              } else if (_source37.is_Nullable) {
                DAST._IType _1032___mcc_h553 = _source37.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1033_recursiveGen;
                  bool _1034_recOwned;
                  bool _1035_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1036_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out510;
                  bool _out511;
                  bool _out512;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                  _1033_recursiveGen = _out510;
                  _1034_recOwned = _out511;
                  _1035_recErased = _out512;
                  _1036_recIdents = _out513;
                  if (!(_1034_recOwned)) {
                    _1033_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1033_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1033_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1035_recErased;
                  readIdents = _1036_recIdents;
                }
              } else if (_source37.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1037___mcc_h555 = _source37.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1038_recursiveGen;
                  bool _1039_recOwned;
                  bool _1040_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1041_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out514;
                  bool _out515;
                  bool _out516;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516, out _out517);
                  _1038_recursiveGen = _out514;
                  _1039_recOwned = _out515;
                  _1040_recErased = _out516;
                  _1041_recIdents = _out517;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1038_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1039_recOwned;
                  isErased = _1040_recErased;
                  readIdents = _1041_recIdents;
                }
              } else if (_source37.is_Array) {
                DAST._IType _1042___mcc_h557 = _source37.dtor_element;
                BigInteger _1043___mcc_h558 = _source37.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1044_recursiveGen;
                  bool _1045_recOwned;
                  bool _1046_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1047_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out518;
                  bool _out519;
                  bool _out520;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out521;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out518, out _out519, out _out520, out _out521);
                  _1044_recursiveGen = _out518;
                  _1045_recOwned = _out519;
                  _1046_recErased = _out520;
                  _1047_recIdents = _out521;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1044_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1045_recOwned;
                  isErased = _1046_recErased;
                  readIdents = _1047_recIdents;
                }
              } else if (_source37.is_Seq) {
                DAST._IType _1048___mcc_h561 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1049_recursiveGen;
                  bool _1050_recOwned;
                  bool _1051_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1052_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out522;
                  bool _out523;
                  bool _out524;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out525;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out522, out _out523, out _out524, out _out525);
                  _1049_recursiveGen = _out522;
                  _1050_recOwned = _out523;
                  _1051_recErased = _out524;
                  _1052_recIdents = _out525;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1049_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1050_recOwned;
                  isErased = _1051_recErased;
                  readIdents = _1052_recIdents;
                }
              } else if (_source37.is_Set) {
                DAST._IType _1053___mcc_h563 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1054_recursiveGen;
                  bool _1055_recOwned;
                  bool _1056_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1057_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out526;
                  bool _out527;
                  bool _out528;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out526, out _out527, out _out528, out _out529);
                  _1054_recursiveGen = _out526;
                  _1055_recOwned = _out527;
                  _1056_recErased = _out528;
                  _1057_recIdents = _out529;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1054_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1055_recOwned;
                  isErased = _1056_recErased;
                  readIdents = _1057_recIdents;
                }
              } else if (_source37.is_Multiset) {
                DAST._IType _1058___mcc_h565 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1059_recursiveGen;
                  bool _1060_recOwned;
                  bool _1061_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1062_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out530;
                  bool _out531;
                  bool _out532;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out533;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out530, out _out531, out _out532, out _out533);
                  _1059_recursiveGen = _out530;
                  _1060_recOwned = _out531;
                  _1061_recErased = _out532;
                  _1062_recIdents = _out533;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1059_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1060_recOwned;
                  isErased = _1061_recErased;
                  readIdents = _1062_recIdents;
                }
              } else if (_source37.is_Map) {
                DAST._IType _1063___mcc_h567 = _source37.dtor_key;
                DAST._IType _1064___mcc_h568 = _source37.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1065_recursiveGen;
                  bool _1066_recOwned;
                  bool _1067_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1068_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out534;
                  bool _out535;
                  bool _out536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out537;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out534, out _out535, out _out536, out _out537);
                  _1065_recursiveGen = _out534;
                  _1066_recOwned = _out535;
                  _1067_recErased = _out536;
                  _1068_recIdents = _out537;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1065_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1066_recOwned;
                  isErased = _1067_recErased;
                  readIdents = _1068_recIdents;
                }
              } else if (_source37.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1069___mcc_h571 = _source37.dtor_args;
                DAST._IType _1070___mcc_h572 = _source37.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1071_recursiveGen;
                  bool _1072_recOwned;
                  bool _1073_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1074_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out538;
                  bool _out539;
                  bool _out540;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out541;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out538, out _out539, out _out540, out _out541);
                  _1071_recursiveGen = _out538;
                  _1072_recOwned = _out539;
                  _1073_recErased = _out540;
                  _1074_recIdents = _out541;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1071_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1072_recOwned;
                  isErased = _1073_recErased;
                  readIdents = _1074_recIdents;
                }
              } else if (_source37.is_Primitive) {
                DAST._IPrimitive _1075___mcc_h575 = _source37.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1076_recursiveGen;
                  bool _1077_recOwned;
                  bool _1078_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1079_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out542;
                  bool _out543;
                  bool _out544;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out545;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out542, out _out543, out _out544, out _out545);
                  _1076_recursiveGen = _out542;
                  _1077_recOwned = _out543;
                  _1078_recErased = _out544;
                  _1079_recIdents = _out545;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1076_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1077_recOwned;
                  isErased = _1078_recErased;
                  readIdents = _1079_recIdents;
                }
              } else if (_source37.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1080___mcc_h577 = _source37.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1081_recursiveGen;
                  bool _1082_recOwned;
                  bool _1083_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1084_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out546;
                  bool _out547;
                  bool _out548;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out546, out _out547, out _out548, out _out549);
                  _1081_recursiveGen = _out546;
                  _1082_recOwned = _out547;
                  _1083_recErased = _out548;
                  _1084_recIdents = _out549;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1081_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1082_recOwned;
                  isErased = _1083_recErased;
                  readIdents = _1084_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1085___mcc_h579 = _source37.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1086_recursiveGen;
                  bool _1087_recOwned;
                  bool _1088_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1089_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out550;
                  bool _out551;
                  bool _out552;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out553;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out550, out _out551, out _out552, out _out553);
                  _1086_recursiveGen = _out550;
                  _1087_recOwned = _out551;
                  _1088_recErased = _out552;
                  _1089_recIdents = _out553;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1086_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1087_recOwned;
                  isErased = _1088_recErased;
                  readIdents = _1089_recIdents;
                }
              }
            } else if (_source27.is_Array) {
              DAST._IType _1090___mcc_h581 = _source27.dtor_element;
              BigInteger _1091___mcc_h582 = _source27.dtor_dims;
              DAST._IType _source39 = _665___mcc_h306;
              if (_source39.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1092___mcc_h589 = _source39.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1093___mcc_h590 = _source39.dtor_typeArgs;
                DAST._IResolvedType _1094___mcc_h591 = _source39.dtor_resolved;
                DAST._IResolvedType _source40 = _1094___mcc_h591;
                if (_source40.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1095___mcc_h595 = _source40.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1096_recursiveGen;
                    bool _1097_recOwned;
                    bool _1098_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1099_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out554;
                    bool _out555;
                    bool _out556;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out557;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out554, out _out555, out _out556, out _out557);
                    _1096_recursiveGen = _out554;
                    _1097_recOwned = _out555;
                    _1098_recErased = _out556;
                    _1099_recIdents = _out557;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1096_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1097_recOwned;
                    isErased = _1098_recErased;
                    readIdents = _1099_recIdents;
                  }
                } else if (_source40.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1100___mcc_h597 = _source40.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1101_recursiveGen;
                    bool _1102_recOwned;
                    bool _1103_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1104_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out558;
                    bool _out559;
                    bool _out560;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out561;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out558, out _out559, out _out560, out _out561);
                    _1101_recursiveGen = _out558;
                    _1102_recOwned = _out559;
                    _1103_recErased = _out560;
                    _1104_recIdents = _out561;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1101_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1102_recOwned;
                    isErased = _1103_recErased;
                    readIdents = _1104_recIdents;
                  }
                } else {
                  DAST._IType _1105___mcc_h599 = _source40.dtor_Newtype_a0;
                  DAST._IType _1106_b = _1105___mcc_h599;
                  {
                    if (object.Equals(_658_fromTpe, _1106_b)) {
                      Dafny.ISequence<Dafny.Rune> _1107_recursiveGen;
                      bool _1108_recOwned;
                      bool _1109_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1110_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out562;
                      bool _out563;
                      bool _out564;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out562, out _out563, out _out564, out _out565);
                      _1107_recursiveGen = _out562;
                      _1108_recOwned = _out563;
                      _1109_recErased = _out564;
                      _1110_recIdents = _out565;
                      Dafny.ISequence<Dafny.Rune> _1111_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out566;
                      _out566 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                      _1111_rhsType = _out566;
                      Dafny.ISequence<Dafny.Rune> _1112_uneraseFn;
                      _1112_uneraseFn = ((_1108_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1111_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1112_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1107_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1108_recOwned;
                      isErased = false;
                      readIdents = _1110_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out567;
                      bool _out568;
                      bool _out569;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1106_b), _1106_b, _657_toTpe), selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                      s = _out567;
                      isOwned = _out568;
                      isErased = _out569;
                      readIdents = _out570;
                    }
                  }
                }
              } else if (_source39.is_Nullable) {
                DAST._IType _1113___mcc_h601 = _source39.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1114_recursiveGen;
                  bool _1115_recOwned;
                  bool _1116_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1117_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out571;
                  bool _out572;
                  bool _out573;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                  _1114_recursiveGen = _out571;
                  _1115_recOwned = _out572;
                  _1116_recErased = _out573;
                  _1117_recIdents = _out574;
                  if (!(_1115_recOwned)) {
                    _1114_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1114_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1114_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1116_recErased;
                  readIdents = _1117_recIdents;
                }
              } else if (_source39.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1118___mcc_h603 = _source39.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1119_recursiveGen;
                  bool _1120_recOwned;
                  bool _1121_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1122_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out575;
                  bool _out576;
                  bool _out577;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577, out _out578);
                  _1119_recursiveGen = _out575;
                  _1120_recOwned = _out576;
                  _1121_recErased = _out577;
                  _1122_recIdents = _out578;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1119_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1120_recOwned;
                  isErased = _1121_recErased;
                  readIdents = _1122_recIdents;
                }
              } else if (_source39.is_Array) {
                DAST._IType _1123___mcc_h605 = _source39.dtor_element;
                BigInteger _1124___mcc_h606 = _source39.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1125_recursiveGen;
                  bool _1126_recOwned;
                  bool _1127_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1128_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out579;
                  bool _out580;
                  bool _out581;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out582;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out579, out _out580, out _out581, out _out582);
                  _1125_recursiveGen = _out579;
                  _1126_recOwned = _out580;
                  _1127_recErased = _out581;
                  _1128_recIdents = _out582;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1125_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1126_recOwned;
                  isErased = _1127_recErased;
                  readIdents = _1128_recIdents;
                }
              } else if (_source39.is_Seq) {
                DAST._IType _1129___mcc_h609 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1130_recursiveGen;
                  bool _1131_recOwned;
                  bool _1132_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1133_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out583;
                  bool _out584;
                  bool _out585;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out583, out _out584, out _out585, out _out586);
                  _1130_recursiveGen = _out583;
                  _1131_recOwned = _out584;
                  _1132_recErased = _out585;
                  _1133_recIdents = _out586;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1130_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1131_recOwned;
                  isErased = _1132_recErased;
                  readIdents = _1133_recIdents;
                }
              } else if (_source39.is_Set) {
                DAST._IType _1134___mcc_h611 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1135_recursiveGen;
                  bool _1136_recOwned;
                  bool _1137_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1138_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out587;
                  bool _out588;
                  bool _out589;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out590;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out587, out _out588, out _out589, out _out590);
                  _1135_recursiveGen = _out587;
                  _1136_recOwned = _out588;
                  _1137_recErased = _out589;
                  _1138_recIdents = _out590;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1135_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1136_recOwned;
                  isErased = _1137_recErased;
                  readIdents = _1138_recIdents;
                }
              } else if (_source39.is_Multiset) {
                DAST._IType _1139___mcc_h613 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1140_recursiveGen;
                  bool _1141_recOwned;
                  bool _1142_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1143_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out591;
                  bool _out592;
                  bool _out593;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out594;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out591, out _out592, out _out593, out _out594);
                  _1140_recursiveGen = _out591;
                  _1141_recOwned = _out592;
                  _1142_recErased = _out593;
                  _1143_recIdents = _out594;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1140_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1141_recOwned;
                  isErased = _1142_recErased;
                  readIdents = _1143_recIdents;
                }
              } else if (_source39.is_Map) {
                DAST._IType _1144___mcc_h615 = _source39.dtor_key;
                DAST._IType _1145___mcc_h616 = _source39.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1146_recursiveGen;
                  bool _1147_recOwned;
                  bool _1148_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1149_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out595;
                  bool _out596;
                  bool _out597;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out595, out _out596, out _out597, out _out598);
                  _1146_recursiveGen = _out595;
                  _1147_recOwned = _out596;
                  _1148_recErased = _out597;
                  _1149_recIdents = _out598;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1146_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1147_recOwned;
                  isErased = _1148_recErased;
                  readIdents = _1149_recIdents;
                }
              } else if (_source39.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1150___mcc_h619 = _source39.dtor_args;
                DAST._IType _1151___mcc_h620 = _source39.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1152_recursiveGen;
                  bool _1153_recOwned;
                  bool _1154_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1155_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out599;
                  bool _out600;
                  bool _out601;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out599, out _out600, out _out601, out _out602);
                  _1152_recursiveGen = _out599;
                  _1153_recOwned = _out600;
                  _1154_recErased = _out601;
                  _1155_recIdents = _out602;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1152_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1153_recOwned;
                  isErased = _1154_recErased;
                  readIdents = _1155_recIdents;
                }
              } else if (_source39.is_Primitive) {
                DAST._IPrimitive _1156___mcc_h623 = _source39.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1157_recursiveGen;
                  bool _1158_recOwned;
                  bool _1159_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1160_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out603;
                  bool _out604;
                  bool _out605;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out606;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out603, out _out604, out _out605, out _out606);
                  _1157_recursiveGen = _out603;
                  _1158_recOwned = _out604;
                  _1159_recErased = _out605;
                  _1160_recIdents = _out606;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1157_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1158_recOwned;
                  isErased = _1159_recErased;
                  readIdents = _1160_recIdents;
                }
              } else if (_source39.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1161___mcc_h625 = _source39.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1162_recursiveGen;
                  bool _1163_recOwned;
                  bool _1164_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1165_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out607;
                  bool _out608;
                  bool _out609;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out607, out _out608, out _out609, out _out610);
                  _1162_recursiveGen = _out607;
                  _1163_recOwned = _out608;
                  _1164_recErased = _out609;
                  _1165_recIdents = _out610;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1162_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1163_recOwned;
                  isErased = _1164_recErased;
                  readIdents = _1165_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1166___mcc_h627 = _source39.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1167_recursiveGen;
                  bool _1168_recOwned;
                  bool _1169_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1170_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out611;
                  bool _out612;
                  bool _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out611, out _out612, out _out613, out _out614);
                  _1167_recursiveGen = _out611;
                  _1168_recOwned = _out612;
                  _1169_recErased = _out613;
                  _1170_recIdents = _out614;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1167_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1168_recOwned;
                  isErased = _1169_recErased;
                  readIdents = _1170_recIdents;
                }
              }
            } else if (_source27.is_Seq) {
              DAST._IType _1171___mcc_h629 = _source27.dtor_element;
              DAST._IType _source41 = _665___mcc_h306;
              if (_source41.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1172___mcc_h633 = _source41.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1173___mcc_h634 = _source41.dtor_typeArgs;
                DAST._IResolvedType _1174___mcc_h635 = _source41.dtor_resolved;
                DAST._IResolvedType _source42 = _1174___mcc_h635;
                if (_source42.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1175___mcc_h639 = _source42.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1176_recursiveGen;
                    bool _1177_recOwned;
                    bool _1178_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1179_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out615;
                    bool _out616;
                    bool _out617;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out618;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out615, out _out616, out _out617, out _out618);
                    _1176_recursiveGen = _out615;
                    _1177_recOwned = _out616;
                    _1178_recErased = _out617;
                    _1179_recIdents = _out618;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1176_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1177_recOwned;
                    isErased = _1178_recErased;
                    readIdents = _1179_recIdents;
                  }
                } else if (_source42.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1180___mcc_h641 = _source42.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1181_recursiveGen;
                    bool _1182_recOwned;
                    bool _1183_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1184_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out619;
                    bool _out620;
                    bool _out621;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out622;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out619, out _out620, out _out621, out _out622);
                    _1181_recursiveGen = _out619;
                    _1182_recOwned = _out620;
                    _1183_recErased = _out621;
                    _1184_recIdents = _out622;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1181_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1182_recOwned;
                    isErased = _1183_recErased;
                    readIdents = _1184_recIdents;
                  }
                } else {
                  DAST._IType _1185___mcc_h643 = _source42.dtor_Newtype_a0;
                  DAST._IType _1186_b = _1185___mcc_h643;
                  {
                    if (object.Equals(_658_fromTpe, _1186_b)) {
                      Dafny.ISequence<Dafny.Rune> _1187_recursiveGen;
                      bool _1188_recOwned;
                      bool _1189_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1190_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out623;
                      bool _out624;
                      bool _out625;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out623, out _out624, out _out625, out _out626);
                      _1187_recursiveGen = _out623;
                      _1188_recOwned = _out624;
                      _1189_recErased = _out625;
                      _1190_recIdents = _out626;
                      Dafny.ISequence<Dafny.Rune> _1191_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out627;
                      _out627 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                      _1191_rhsType = _out627;
                      Dafny.ISequence<Dafny.Rune> _1192_uneraseFn;
                      _1192_uneraseFn = ((_1188_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1191_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1192_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1187_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1188_recOwned;
                      isErased = false;
                      readIdents = _1190_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out628;
                      bool _out629;
                      bool _out630;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1186_b), _1186_b, _657_toTpe), selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                      s = _out628;
                      isOwned = _out629;
                      isErased = _out630;
                      readIdents = _out631;
                    }
                  }
                }
              } else if (_source41.is_Nullable) {
                DAST._IType _1193___mcc_h645 = _source41.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1194_recursiveGen;
                  bool _1195_recOwned;
                  bool _1196_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1197_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out632;
                  bool _out633;
                  bool _out634;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                  _1194_recursiveGen = _out632;
                  _1195_recOwned = _out633;
                  _1196_recErased = _out634;
                  _1197_recIdents = _out635;
                  if (!(_1195_recOwned)) {
                    _1194_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1194_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1194_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1196_recErased;
                  readIdents = _1197_recIdents;
                }
              } else if (_source41.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1198___mcc_h647 = _source41.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1199_recursiveGen;
                  bool _1200_recOwned;
                  bool _1201_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1202_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out636;
                  bool _out637;
                  bool _out638;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out639;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638, out _out639);
                  _1199_recursiveGen = _out636;
                  _1200_recOwned = _out637;
                  _1201_recErased = _out638;
                  _1202_recIdents = _out639;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1199_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1200_recOwned;
                  isErased = _1201_recErased;
                  readIdents = _1202_recIdents;
                }
              } else if (_source41.is_Array) {
                DAST._IType _1203___mcc_h649 = _source41.dtor_element;
                BigInteger _1204___mcc_h650 = _source41.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1205_recursiveGen;
                  bool _1206_recOwned;
                  bool _1207_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1208_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out640;
                  bool _out641;
                  bool _out642;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out640, out _out641, out _out642, out _out643);
                  _1205_recursiveGen = _out640;
                  _1206_recOwned = _out641;
                  _1207_recErased = _out642;
                  _1208_recIdents = _out643;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1205_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1206_recOwned;
                  isErased = _1207_recErased;
                  readIdents = _1208_recIdents;
                }
              } else if (_source41.is_Seq) {
                DAST._IType _1209___mcc_h653 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1210_recursiveGen;
                  bool _1211_recOwned;
                  bool _1212_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1213_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out644;
                  bool _out645;
                  bool _out646;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out647;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out644, out _out645, out _out646, out _out647);
                  _1210_recursiveGen = _out644;
                  _1211_recOwned = _out645;
                  _1212_recErased = _out646;
                  _1213_recIdents = _out647;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1210_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1211_recOwned;
                  isErased = _1212_recErased;
                  readIdents = _1213_recIdents;
                }
              } else if (_source41.is_Set) {
                DAST._IType _1214___mcc_h655 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1215_recursiveGen;
                  bool _1216_recOwned;
                  bool _1217_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1218_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out648;
                  bool _out649;
                  bool _out650;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out648, out _out649, out _out650, out _out651);
                  _1215_recursiveGen = _out648;
                  _1216_recOwned = _out649;
                  _1217_recErased = _out650;
                  _1218_recIdents = _out651;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1215_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1216_recOwned;
                  isErased = _1217_recErased;
                  readIdents = _1218_recIdents;
                }
              } else if (_source41.is_Multiset) {
                DAST._IType _1219___mcc_h657 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1220_recursiveGen;
                  bool _1221_recOwned;
                  bool _1222_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1223_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out652;
                  bool _out653;
                  bool _out654;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out652, out _out653, out _out654, out _out655);
                  _1220_recursiveGen = _out652;
                  _1221_recOwned = _out653;
                  _1222_recErased = _out654;
                  _1223_recIdents = _out655;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1220_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1221_recOwned;
                  isErased = _1222_recErased;
                  readIdents = _1223_recIdents;
                }
              } else if (_source41.is_Map) {
                DAST._IType _1224___mcc_h659 = _source41.dtor_key;
                DAST._IType _1225___mcc_h660 = _source41.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1226_recursiveGen;
                  bool _1227_recOwned;
                  bool _1228_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1229_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out656;
                  bool _out657;
                  bool _out658;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out659;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out656, out _out657, out _out658, out _out659);
                  _1226_recursiveGen = _out656;
                  _1227_recOwned = _out657;
                  _1228_recErased = _out658;
                  _1229_recIdents = _out659;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1226_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1227_recOwned;
                  isErased = _1228_recErased;
                  readIdents = _1229_recIdents;
                }
              } else if (_source41.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1230___mcc_h663 = _source41.dtor_args;
                DAST._IType _1231___mcc_h664 = _source41.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1232_recursiveGen;
                  bool _1233_recOwned;
                  bool _1234_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1235_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out660;
                  bool _out661;
                  bool _out662;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out663;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out660, out _out661, out _out662, out _out663);
                  _1232_recursiveGen = _out660;
                  _1233_recOwned = _out661;
                  _1234_recErased = _out662;
                  _1235_recIdents = _out663;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1232_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1233_recOwned;
                  isErased = _1234_recErased;
                  readIdents = _1235_recIdents;
                }
              } else if (_source41.is_Primitive) {
                DAST._IPrimitive _1236___mcc_h667 = _source41.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1237_recursiveGen;
                  bool _1238_recOwned;
                  bool _1239_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1240_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out664;
                  bool _out665;
                  bool _out666;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out667;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out664, out _out665, out _out666, out _out667);
                  _1237_recursiveGen = _out664;
                  _1238_recOwned = _out665;
                  _1239_recErased = _out666;
                  _1240_recIdents = _out667;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1237_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1238_recOwned;
                  isErased = _1239_recErased;
                  readIdents = _1240_recIdents;
                }
              } else if (_source41.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1241___mcc_h669 = _source41.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1242_recursiveGen;
                  bool _1243_recOwned;
                  bool _1244_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1245_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out668;
                  bool _out669;
                  bool _out670;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out671;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out668, out _out669, out _out670, out _out671);
                  _1242_recursiveGen = _out668;
                  _1243_recOwned = _out669;
                  _1244_recErased = _out670;
                  _1245_recIdents = _out671;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1242_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1243_recOwned;
                  isErased = _1244_recErased;
                  readIdents = _1245_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1246___mcc_h671 = _source41.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1247_recursiveGen;
                  bool _1248_recOwned;
                  bool _1249_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1250_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out672;
                  bool _out673;
                  bool _out674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out672, out _out673, out _out674, out _out675);
                  _1247_recursiveGen = _out672;
                  _1248_recOwned = _out673;
                  _1249_recErased = _out674;
                  _1250_recIdents = _out675;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1247_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1248_recOwned;
                  isErased = _1249_recErased;
                  readIdents = _1250_recIdents;
                }
              }
            } else if (_source27.is_Set) {
              DAST._IType _1251___mcc_h673 = _source27.dtor_element;
              DAST._IType _source43 = _665___mcc_h306;
              if (_source43.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1252___mcc_h677 = _source43.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1253___mcc_h678 = _source43.dtor_typeArgs;
                DAST._IResolvedType _1254___mcc_h679 = _source43.dtor_resolved;
                DAST._IResolvedType _source44 = _1254___mcc_h679;
                if (_source44.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1255___mcc_h683 = _source44.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1256_recursiveGen;
                    bool _1257_recOwned;
                    bool _1258_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1259_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out676;
                    bool _out677;
                    bool _out678;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out679;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out676, out _out677, out _out678, out _out679);
                    _1256_recursiveGen = _out676;
                    _1257_recOwned = _out677;
                    _1258_recErased = _out678;
                    _1259_recIdents = _out679;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1256_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1257_recOwned;
                    isErased = _1258_recErased;
                    readIdents = _1259_recIdents;
                  }
                } else if (_source44.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1260___mcc_h685 = _source44.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1261_recursiveGen;
                    bool _1262_recOwned;
                    bool _1263_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1264_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out680;
                    bool _out681;
                    bool _out682;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out683;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out680, out _out681, out _out682, out _out683);
                    _1261_recursiveGen = _out680;
                    _1262_recOwned = _out681;
                    _1263_recErased = _out682;
                    _1264_recIdents = _out683;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1261_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1262_recOwned;
                    isErased = _1263_recErased;
                    readIdents = _1264_recIdents;
                  }
                } else {
                  DAST._IType _1265___mcc_h687 = _source44.dtor_Newtype_a0;
                  DAST._IType _1266_b = _1265___mcc_h687;
                  {
                    if (object.Equals(_658_fromTpe, _1266_b)) {
                      Dafny.ISequence<Dafny.Rune> _1267_recursiveGen;
                      bool _1268_recOwned;
                      bool _1269_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1270_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out684;
                      bool _out685;
                      bool _out686;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out684, out _out685, out _out686, out _out687);
                      _1267_recursiveGen = _out684;
                      _1268_recOwned = _out685;
                      _1269_recErased = _out686;
                      _1270_recIdents = _out687;
                      Dafny.ISequence<Dafny.Rune> _1271_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out688;
                      _out688 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                      _1271_rhsType = _out688;
                      Dafny.ISequence<Dafny.Rune> _1272_uneraseFn;
                      _1272_uneraseFn = ((_1268_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1271_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1272_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1267_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1268_recOwned;
                      isErased = false;
                      readIdents = _1270_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out689;
                      bool _out690;
                      bool _out691;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1266_b), _1266_b, _657_toTpe), selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                      s = _out689;
                      isOwned = _out690;
                      isErased = _out691;
                      readIdents = _out692;
                    }
                  }
                }
              } else if (_source43.is_Nullable) {
                DAST._IType _1273___mcc_h689 = _source43.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1274_recursiveGen;
                  bool _1275_recOwned;
                  bool _1276_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1277_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out693;
                  bool _out694;
                  bool _out695;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                  _1274_recursiveGen = _out693;
                  _1275_recOwned = _out694;
                  _1276_recErased = _out695;
                  _1277_recIdents = _out696;
                  if (!(_1275_recOwned)) {
                    _1274_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1274_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1274_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1276_recErased;
                  readIdents = _1277_recIdents;
                }
              } else if (_source43.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1278___mcc_h691 = _source43.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1279_recursiveGen;
                  bool _1280_recOwned;
                  bool _1281_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1282_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out697;
                  bool _out698;
                  bool _out699;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out697, out _out698, out _out699, out _out700);
                  _1279_recursiveGen = _out697;
                  _1280_recOwned = _out698;
                  _1281_recErased = _out699;
                  _1282_recIdents = _out700;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1279_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1280_recOwned;
                  isErased = _1281_recErased;
                  readIdents = _1282_recIdents;
                }
              } else if (_source43.is_Array) {
                DAST._IType _1283___mcc_h693 = _source43.dtor_element;
                BigInteger _1284___mcc_h694 = _source43.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1285_recursiveGen;
                  bool _1286_recOwned;
                  bool _1287_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1288_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out701;
                  bool _out702;
                  bool _out703;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out704;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out701, out _out702, out _out703, out _out704);
                  _1285_recursiveGen = _out701;
                  _1286_recOwned = _out702;
                  _1287_recErased = _out703;
                  _1288_recIdents = _out704;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1285_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1286_recOwned;
                  isErased = _1287_recErased;
                  readIdents = _1288_recIdents;
                }
              } else if (_source43.is_Seq) {
                DAST._IType _1289___mcc_h697 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1290_recursiveGen;
                  bool _1291_recOwned;
                  bool _1292_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1293_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out705;
                  bool _out706;
                  bool _out707;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out708;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out705, out _out706, out _out707, out _out708);
                  _1290_recursiveGen = _out705;
                  _1291_recOwned = _out706;
                  _1292_recErased = _out707;
                  _1293_recIdents = _out708;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1290_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1291_recOwned;
                  isErased = _1292_recErased;
                  readIdents = _1293_recIdents;
                }
              } else if (_source43.is_Set) {
                DAST._IType _1294___mcc_h699 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1295_recursiveGen;
                  bool _1296_recOwned;
                  bool _1297_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1298_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out709;
                  bool _out710;
                  bool _out711;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out709, out _out710, out _out711, out _out712);
                  _1295_recursiveGen = _out709;
                  _1296_recOwned = _out710;
                  _1297_recErased = _out711;
                  _1298_recIdents = _out712;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1295_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1296_recOwned;
                  isErased = _1297_recErased;
                  readIdents = _1298_recIdents;
                }
              } else if (_source43.is_Multiset) {
                DAST._IType _1299___mcc_h701 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1300_recursiveGen;
                  bool _1301_recOwned;
                  bool _1302_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1303_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out713;
                  bool _out714;
                  bool _out715;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out713, out _out714, out _out715, out _out716);
                  _1300_recursiveGen = _out713;
                  _1301_recOwned = _out714;
                  _1302_recErased = _out715;
                  _1303_recIdents = _out716;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1300_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1301_recOwned;
                  isErased = _1302_recErased;
                  readIdents = _1303_recIdents;
                }
              } else if (_source43.is_Map) {
                DAST._IType _1304___mcc_h703 = _source43.dtor_key;
                DAST._IType _1305___mcc_h704 = _source43.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1306_recursiveGen;
                  bool _1307_recOwned;
                  bool _1308_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1309_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out717;
                  bool _out718;
                  bool _out719;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out720;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out717, out _out718, out _out719, out _out720);
                  _1306_recursiveGen = _out717;
                  _1307_recOwned = _out718;
                  _1308_recErased = _out719;
                  _1309_recIdents = _out720;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1306_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1307_recOwned;
                  isErased = _1308_recErased;
                  readIdents = _1309_recIdents;
                }
              } else if (_source43.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1310___mcc_h707 = _source43.dtor_args;
                DAST._IType _1311___mcc_h708 = _source43.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1312_recursiveGen;
                  bool _1313_recOwned;
                  bool _1314_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1315_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out721;
                  bool _out722;
                  bool _out723;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out721, out _out722, out _out723, out _out724);
                  _1312_recursiveGen = _out721;
                  _1313_recOwned = _out722;
                  _1314_recErased = _out723;
                  _1315_recIdents = _out724;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1312_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1313_recOwned;
                  isErased = _1314_recErased;
                  readIdents = _1315_recIdents;
                }
              } else if (_source43.is_Primitive) {
                DAST._IPrimitive _1316___mcc_h711 = _source43.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1317_recursiveGen;
                  bool _1318_recOwned;
                  bool _1319_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1320_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out725;
                  bool _out726;
                  bool _out727;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out728;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out725, out _out726, out _out727, out _out728);
                  _1317_recursiveGen = _out725;
                  _1318_recOwned = _out726;
                  _1319_recErased = _out727;
                  _1320_recIdents = _out728;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1317_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1318_recOwned;
                  isErased = _1319_recErased;
                  readIdents = _1320_recIdents;
                }
              } else if (_source43.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1321___mcc_h713 = _source43.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1322_recursiveGen;
                  bool _1323_recOwned;
                  bool _1324_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1325_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out729;
                  bool _out730;
                  bool _out731;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out732;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out729, out _out730, out _out731, out _out732);
                  _1322_recursiveGen = _out729;
                  _1323_recOwned = _out730;
                  _1324_recErased = _out731;
                  _1325_recIdents = _out732;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1322_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1323_recOwned;
                  isErased = _1324_recErased;
                  readIdents = _1325_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1326___mcc_h715 = _source43.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1327_recursiveGen;
                  bool _1328_recOwned;
                  bool _1329_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1330_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out733;
                  bool _out734;
                  bool _out735;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out733, out _out734, out _out735, out _out736);
                  _1327_recursiveGen = _out733;
                  _1328_recOwned = _out734;
                  _1329_recErased = _out735;
                  _1330_recIdents = _out736;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1327_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1328_recOwned;
                  isErased = _1329_recErased;
                  readIdents = _1330_recIdents;
                }
              }
            } else if (_source27.is_Multiset) {
              DAST._IType _1331___mcc_h717 = _source27.dtor_element;
              DAST._IType _source45 = _665___mcc_h306;
              if (_source45.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1332___mcc_h721 = _source45.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1333___mcc_h722 = _source45.dtor_typeArgs;
                DAST._IResolvedType _1334___mcc_h723 = _source45.dtor_resolved;
                DAST._IResolvedType _source46 = _1334___mcc_h723;
                if (_source46.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1335___mcc_h727 = _source46.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1336_recursiveGen;
                    bool _1337_recOwned;
                    bool _1338_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1339_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out737;
                    bool _out738;
                    bool _out739;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out740;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out737, out _out738, out _out739, out _out740);
                    _1336_recursiveGen = _out737;
                    _1337_recOwned = _out738;
                    _1338_recErased = _out739;
                    _1339_recIdents = _out740;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1336_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1337_recOwned;
                    isErased = _1338_recErased;
                    readIdents = _1339_recIdents;
                  }
                } else if (_source46.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1340___mcc_h729 = _source46.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1341_recursiveGen;
                    bool _1342_recOwned;
                    bool _1343_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1344_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out741;
                    bool _out742;
                    bool _out743;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out744;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out741, out _out742, out _out743, out _out744);
                    _1341_recursiveGen = _out741;
                    _1342_recOwned = _out742;
                    _1343_recErased = _out743;
                    _1344_recIdents = _out744;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1341_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1342_recOwned;
                    isErased = _1343_recErased;
                    readIdents = _1344_recIdents;
                  }
                } else {
                  DAST._IType _1345___mcc_h731 = _source46.dtor_Newtype_a0;
                  DAST._IType _1346_b = _1345___mcc_h731;
                  {
                    if (object.Equals(_658_fromTpe, _1346_b)) {
                      Dafny.ISequence<Dafny.Rune> _1347_recursiveGen;
                      bool _1348_recOwned;
                      bool _1349_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1350_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out745;
                      bool _out746;
                      bool _out747;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out745, out _out746, out _out747, out _out748);
                      _1347_recursiveGen = _out745;
                      _1348_recOwned = _out746;
                      _1349_recErased = _out747;
                      _1350_recIdents = _out748;
                      Dafny.ISequence<Dafny.Rune> _1351_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out749;
                      _out749 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                      _1351_rhsType = _out749;
                      Dafny.ISequence<Dafny.Rune> _1352_uneraseFn;
                      _1352_uneraseFn = ((_1348_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1351_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1352_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1347_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1348_recOwned;
                      isErased = false;
                      readIdents = _1350_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out750;
                      bool _out751;
                      bool _out752;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1346_b), _1346_b, _657_toTpe), selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                      s = _out750;
                      isOwned = _out751;
                      isErased = _out752;
                      readIdents = _out753;
                    }
                  }
                }
              } else if (_source45.is_Nullable) {
                DAST._IType _1353___mcc_h733 = _source45.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1354_recursiveGen;
                  bool _1355_recOwned;
                  bool _1356_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1357_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out754;
                  bool _out755;
                  bool _out756;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                  _1354_recursiveGen = _out754;
                  _1355_recOwned = _out755;
                  _1356_recErased = _out756;
                  _1357_recIdents = _out757;
                  if (!(_1355_recOwned)) {
                    _1354_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1354_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1354_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1356_recErased;
                  readIdents = _1357_recIdents;
                }
              } else if (_source45.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1358___mcc_h735 = _source45.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1359_recursiveGen;
                  bool _1360_recOwned;
                  bool _1361_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1362_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out758;
                  bool _out759;
                  bool _out760;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out758, out _out759, out _out760, out _out761);
                  _1359_recursiveGen = _out758;
                  _1360_recOwned = _out759;
                  _1361_recErased = _out760;
                  _1362_recIdents = _out761;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1359_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1360_recOwned;
                  isErased = _1361_recErased;
                  readIdents = _1362_recIdents;
                }
              } else if (_source45.is_Array) {
                DAST._IType _1363___mcc_h737 = _source45.dtor_element;
                BigInteger _1364___mcc_h738 = _source45.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1365_recursiveGen;
                  bool _1366_recOwned;
                  bool _1367_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1368_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out762;
                  bool _out763;
                  bool _out764;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out765;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out762, out _out763, out _out764, out _out765);
                  _1365_recursiveGen = _out762;
                  _1366_recOwned = _out763;
                  _1367_recErased = _out764;
                  _1368_recIdents = _out765;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1365_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1366_recOwned;
                  isErased = _1367_recErased;
                  readIdents = _1368_recIdents;
                }
              } else if (_source45.is_Seq) {
                DAST._IType _1369___mcc_h741 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1370_recursiveGen;
                  bool _1371_recOwned;
                  bool _1372_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1373_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out766;
                  bool _out767;
                  bool _out768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out769;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out766, out _out767, out _out768, out _out769);
                  _1370_recursiveGen = _out766;
                  _1371_recOwned = _out767;
                  _1372_recErased = _out768;
                  _1373_recIdents = _out769;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1371_recOwned;
                  isErased = _1372_recErased;
                  readIdents = _1373_recIdents;
                }
              } else if (_source45.is_Set) {
                DAST._IType _1374___mcc_h743 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1375_recursiveGen;
                  bool _1376_recOwned;
                  bool _1377_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1378_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out770;
                  bool _out771;
                  bool _out772;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out770, out _out771, out _out772, out _out773);
                  _1375_recursiveGen = _out770;
                  _1376_recOwned = _out771;
                  _1377_recErased = _out772;
                  _1378_recIdents = _out773;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1375_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1376_recOwned;
                  isErased = _1377_recErased;
                  readIdents = _1378_recIdents;
                }
              } else if (_source45.is_Multiset) {
                DAST._IType _1379___mcc_h745 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1380_recursiveGen;
                  bool _1381_recOwned;
                  bool _1382_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1383_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out774;
                  bool _out775;
                  bool _out776;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out774, out _out775, out _out776, out _out777);
                  _1380_recursiveGen = _out774;
                  _1381_recOwned = _out775;
                  _1382_recErased = _out776;
                  _1383_recIdents = _out777;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1380_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1381_recOwned;
                  isErased = _1382_recErased;
                  readIdents = _1383_recIdents;
                }
              } else if (_source45.is_Map) {
                DAST._IType _1384___mcc_h747 = _source45.dtor_key;
                DAST._IType _1385___mcc_h748 = _source45.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1386_recursiveGen;
                  bool _1387_recOwned;
                  bool _1388_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1389_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out778;
                  bool _out779;
                  bool _out780;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out781;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out778, out _out779, out _out780, out _out781);
                  _1386_recursiveGen = _out778;
                  _1387_recOwned = _out779;
                  _1388_recErased = _out780;
                  _1389_recIdents = _out781;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1386_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1387_recOwned;
                  isErased = _1388_recErased;
                  readIdents = _1389_recIdents;
                }
              } else if (_source45.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1390___mcc_h751 = _source45.dtor_args;
                DAST._IType _1391___mcc_h752 = _source45.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1392_recursiveGen;
                  bool _1393_recOwned;
                  bool _1394_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1395_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out782;
                  bool _out783;
                  bool _out784;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out785;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out782, out _out783, out _out784, out _out785);
                  _1392_recursiveGen = _out782;
                  _1393_recOwned = _out783;
                  _1394_recErased = _out784;
                  _1395_recIdents = _out785;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1392_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1393_recOwned;
                  isErased = _1394_recErased;
                  readIdents = _1395_recIdents;
                }
              } else if (_source45.is_Primitive) {
                DAST._IPrimitive _1396___mcc_h755 = _source45.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1397_recursiveGen;
                  bool _1398_recOwned;
                  bool _1399_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1400_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out786;
                  bool _out787;
                  bool _out788;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out789;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out786, out _out787, out _out788, out _out789);
                  _1397_recursiveGen = _out786;
                  _1398_recOwned = _out787;
                  _1399_recErased = _out788;
                  _1400_recIdents = _out789;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1397_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1398_recOwned;
                  isErased = _1399_recErased;
                  readIdents = _1400_recIdents;
                }
              } else if (_source45.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1401___mcc_h757 = _source45.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1402_recursiveGen;
                  bool _1403_recOwned;
                  bool _1404_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1405_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out790;
                  bool _out791;
                  bool _out792;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out793;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out790, out _out791, out _out792, out _out793);
                  _1402_recursiveGen = _out790;
                  _1403_recOwned = _out791;
                  _1404_recErased = _out792;
                  _1405_recIdents = _out793;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1402_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1403_recOwned;
                  isErased = _1404_recErased;
                  readIdents = _1405_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1406___mcc_h759 = _source45.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1407_recursiveGen;
                  bool _1408_recOwned;
                  bool _1409_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1410_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out794;
                  bool _out795;
                  bool _out796;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out794, out _out795, out _out796, out _out797);
                  _1407_recursiveGen = _out794;
                  _1408_recOwned = _out795;
                  _1409_recErased = _out796;
                  _1410_recIdents = _out797;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1407_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1408_recOwned;
                  isErased = _1409_recErased;
                  readIdents = _1410_recIdents;
                }
              }
            } else if (_source27.is_Map) {
              DAST._IType _1411___mcc_h761 = _source27.dtor_key;
              DAST._IType _1412___mcc_h762 = _source27.dtor_value;
              DAST._IType _source47 = _665___mcc_h306;
              if (_source47.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1413___mcc_h769 = _source47.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1414___mcc_h770 = _source47.dtor_typeArgs;
                DAST._IResolvedType _1415___mcc_h771 = _source47.dtor_resolved;
                DAST._IResolvedType _source48 = _1415___mcc_h771;
                if (_source48.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1416___mcc_h775 = _source48.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1417_recursiveGen;
                    bool _1418_recOwned;
                    bool _1419_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1420_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out798;
                    bool _out799;
                    bool _out800;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out801;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out798, out _out799, out _out800, out _out801);
                    _1417_recursiveGen = _out798;
                    _1418_recOwned = _out799;
                    _1419_recErased = _out800;
                    _1420_recIdents = _out801;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1417_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1418_recOwned;
                    isErased = _1419_recErased;
                    readIdents = _1420_recIdents;
                  }
                } else if (_source48.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1421___mcc_h777 = _source48.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1422_recursiveGen;
                    bool _1423_recOwned;
                    bool _1424_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1425_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out802;
                    bool _out803;
                    bool _out804;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out805;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out802, out _out803, out _out804, out _out805);
                    _1422_recursiveGen = _out802;
                    _1423_recOwned = _out803;
                    _1424_recErased = _out804;
                    _1425_recIdents = _out805;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1422_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1423_recOwned;
                    isErased = _1424_recErased;
                    readIdents = _1425_recIdents;
                  }
                } else {
                  DAST._IType _1426___mcc_h779 = _source48.dtor_Newtype_a0;
                  DAST._IType _1427_b = _1426___mcc_h779;
                  {
                    if (object.Equals(_658_fromTpe, _1427_b)) {
                      Dafny.ISequence<Dafny.Rune> _1428_recursiveGen;
                      bool _1429_recOwned;
                      bool _1430_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1431_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out806;
                      bool _out807;
                      bool _out808;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out806, out _out807, out _out808, out _out809);
                      _1428_recursiveGen = _out806;
                      _1429_recOwned = _out807;
                      _1430_recErased = _out808;
                      _1431_recIdents = _out809;
                      Dafny.ISequence<Dafny.Rune> _1432_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out810;
                      _out810 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                      _1432_rhsType = _out810;
                      Dafny.ISequence<Dafny.Rune> _1433_uneraseFn;
                      _1433_uneraseFn = ((_1429_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1432_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1433_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1428_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1429_recOwned;
                      isErased = false;
                      readIdents = _1431_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out811;
                      bool _out812;
                      bool _out813;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1427_b), _1427_b, _657_toTpe), selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                      s = _out811;
                      isOwned = _out812;
                      isErased = _out813;
                      readIdents = _out814;
                    }
                  }
                }
              } else if (_source47.is_Nullable) {
                DAST._IType _1434___mcc_h781 = _source47.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1435_recursiveGen;
                  bool _1436_recOwned;
                  bool _1437_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1438_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out815;
                  bool _out816;
                  bool _out817;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                  _1435_recursiveGen = _out815;
                  _1436_recOwned = _out816;
                  _1437_recErased = _out817;
                  _1438_recIdents = _out818;
                  if (!(_1436_recOwned)) {
                    _1435_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1435_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1435_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1437_recErased;
                  readIdents = _1438_recIdents;
                }
              } else if (_source47.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1439___mcc_h783 = _source47.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1440_recursiveGen;
                  bool _1441_recOwned;
                  bool _1442_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1443_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out819;
                  bool _out820;
                  bool _out821;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821, out _out822);
                  _1440_recursiveGen = _out819;
                  _1441_recOwned = _out820;
                  _1442_recErased = _out821;
                  _1443_recIdents = _out822;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1440_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1441_recOwned;
                  isErased = _1442_recErased;
                  readIdents = _1443_recIdents;
                }
              } else if (_source47.is_Array) {
                DAST._IType _1444___mcc_h785 = _source47.dtor_element;
                BigInteger _1445___mcc_h786 = _source47.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1446_recursiveGen;
                  bool _1447_recOwned;
                  bool _1448_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1449_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out823;
                  bool _out824;
                  bool _out825;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out826;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out823, out _out824, out _out825, out _out826);
                  _1446_recursiveGen = _out823;
                  _1447_recOwned = _out824;
                  _1448_recErased = _out825;
                  _1449_recIdents = _out826;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1446_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1447_recOwned;
                  isErased = _1448_recErased;
                  readIdents = _1449_recIdents;
                }
              } else if (_source47.is_Seq) {
                DAST._IType _1450___mcc_h789 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1451_recursiveGen;
                  bool _1452_recOwned;
                  bool _1453_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1454_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out827;
                  bool _out828;
                  bool _out829;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out830;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out827, out _out828, out _out829, out _out830);
                  _1451_recursiveGen = _out827;
                  _1452_recOwned = _out828;
                  _1453_recErased = _out829;
                  _1454_recIdents = _out830;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1451_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1452_recOwned;
                  isErased = _1453_recErased;
                  readIdents = _1454_recIdents;
                }
              } else if (_source47.is_Set) {
                DAST._IType _1455___mcc_h791 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1456_recursiveGen;
                  bool _1457_recOwned;
                  bool _1458_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1459_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out831;
                  bool _out832;
                  bool _out833;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out834;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out831, out _out832, out _out833, out _out834);
                  _1456_recursiveGen = _out831;
                  _1457_recOwned = _out832;
                  _1458_recErased = _out833;
                  _1459_recIdents = _out834;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1456_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1457_recOwned;
                  isErased = _1458_recErased;
                  readIdents = _1459_recIdents;
                }
              } else if (_source47.is_Multiset) {
                DAST._IType _1460___mcc_h793 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1461_recursiveGen;
                  bool _1462_recOwned;
                  bool _1463_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1464_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out835;
                  bool _out836;
                  bool _out837;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out838;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out835, out _out836, out _out837, out _out838);
                  _1461_recursiveGen = _out835;
                  _1462_recOwned = _out836;
                  _1463_recErased = _out837;
                  _1464_recIdents = _out838;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1461_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1462_recOwned;
                  isErased = _1463_recErased;
                  readIdents = _1464_recIdents;
                }
              } else if (_source47.is_Map) {
                DAST._IType _1465___mcc_h795 = _source47.dtor_key;
                DAST._IType _1466___mcc_h796 = _source47.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1467_recursiveGen;
                  bool _1468_recOwned;
                  bool _1469_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1470_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out839;
                  bool _out840;
                  bool _out841;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out839, out _out840, out _out841, out _out842);
                  _1467_recursiveGen = _out839;
                  _1468_recOwned = _out840;
                  _1469_recErased = _out841;
                  _1470_recIdents = _out842;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1467_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1468_recOwned;
                  isErased = _1469_recErased;
                  readIdents = _1470_recIdents;
                }
              } else if (_source47.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1471___mcc_h799 = _source47.dtor_args;
                DAST._IType _1472___mcc_h800 = _source47.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1473_recursiveGen;
                  bool _1474_recOwned;
                  bool _1475_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1476_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out843;
                  bool _out844;
                  bool _out845;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out846;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out843, out _out844, out _out845, out _out846);
                  _1473_recursiveGen = _out843;
                  _1474_recOwned = _out844;
                  _1475_recErased = _out845;
                  _1476_recIdents = _out846;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1473_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1474_recOwned;
                  isErased = _1475_recErased;
                  readIdents = _1476_recIdents;
                }
              } else if (_source47.is_Primitive) {
                DAST._IPrimitive _1477___mcc_h803 = _source47.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1478_recursiveGen;
                  bool _1479_recOwned;
                  bool _1480_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1481_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out847;
                  bool _out848;
                  bool _out849;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out850;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out847, out _out848, out _out849, out _out850);
                  _1478_recursiveGen = _out847;
                  _1479_recOwned = _out848;
                  _1480_recErased = _out849;
                  _1481_recIdents = _out850;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1478_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1479_recOwned;
                  isErased = _1480_recErased;
                  readIdents = _1481_recIdents;
                }
              } else if (_source47.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1482___mcc_h805 = _source47.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1483_recursiveGen;
                  bool _1484_recOwned;
                  bool _1485_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1486_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out851;
                  bool _out852;
                  bool _out853;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out854;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out851, out _out852, out _out853, out _out854);
                  _1483_recursiveGen = _out851;
                  _1484_recOwned = _out852;
                  _1485_recErased = _out853;
                  _1486_recIdents = _out854;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1483_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1484_recOwned;
                  isErased = _1485_recErased;
                  readIdents = _1486_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1487___mcc_h807 = _source47.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1488_recursiveGen;
                  bool _1489_recOwned;
                  bool _1490_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1491_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out855;
                  bool _out856;
                  bool _out857;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out855, out _out856, out _out857, out _out858);
                  _1488_recursiveGen = _out855;
                  _1489_recOwned = _out856;
                  _1490_recErased = _out857;
                  _1491_recIdents = _out858;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1488_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1489_recOwned;
                  isErased = _1490_recErased;
                  readIdents = _1491_recIdents;
                }
              }
            } else if (_source27.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1492___mcc_h809 = _source27.dtor_args;
              DAST._IType _1493___mcc_h810 = _source27.dtor_result;
              DAST._IType _source49 = _665___mcc_h306;
              if (_source49.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1494___mcc_h817 = _source49.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1495___mcc_h818 = _source49.dtor_typeArgs;
                DAST._IResolvedType _1496___mcc_h819 = _source49.dtor_resolved;
                DAST._IResolvedType _source50 = _1496___mcc_h819;
                if (_source50.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1497___mcc_h823 = _source50.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1498_recursiveGen;
                    bool _1499_recOwned;
                    bool _1500_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1501_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out859;
                    bool _out860;
                    bool _out861;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out862;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out859, out _out860, out _out861, out _out862);
                    _1498_recursiveGen = _out859;
                    _1499_recOwned = _out860;
                    _1500_recErased = _out861;
                    _1501_recIdents = _out862;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1498_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1499_recOwned;
                    isErased = _1500_recErased;
                    readIdents = _1501_recIdents;
                  }
                } else if (_source50.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1502___mcc_h825 = _source50.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1503_recursiveGen;
                    bool _1504_recOwned;
                    bool _1505_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1506_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out863;
                    bool _out864;
                    bool _out865;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out866;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out863, out _out864, out _out865, out _out866);
                    _1503_recursiveGen = _out863;
                    _1504_recOwned = _out864;
                    _1505_recErased = _out865;
                    _1506_recIdents = _out866;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1503_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1504_recOwned;
                    isErased = _1505_recErased;
                    readIdents = _1506_recIdents;
                  }
                } else {
                  DAST._IType _1507___mcc_h827 = _source50.dtor_Newtype_a0;
                  DAST._IType _1508_b = _1507___mcc_h827;
                  {
                    if (object.Equals(_658_fromTpe, _1508_b)) {
                      Dafny.ISequence<Dafny.Rune> _1509_recursiveGen;
                      bool _1510_recOwned;
                      bool _1511_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1512_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out867;
                      bool _out868;
                      bool _out869;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out867, out _out868, out _out869, out _out870);
                      _1509_recursiveGen = _out867;
                      _1510_recOwned = _out868;
                      _1511_recErased = _out869;
                      _1512_recIdents = _out870;
                      Dafny.ISequence<Dafny.Rune> _1513_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out871;
                      _out871 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                      _1513_rhsType = _out871;
                      Dafny.ISequence<Dafny.Rune> _1514_uneraseFn;
                      _1514_uneraseFn = ((_1510_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1513_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1514_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1509_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1510_recOwned;
                      isErased = false;
                      readIdents = _1512_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out872;
                      bool _out873;
                      bool _out874;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1508_b), _1508_b, _657_toTpe), selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                      s = _out872;
                      isOwned = _out873;
                      isErased = _out874;
                      readIdents = _out875;
                    }
                  }
                }
              } else if (_source49.is_Nullable) {
                DAST._IType _1515___mcc_h829 = _source49.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1516_recursiveGen;
                  bool _1517_recOwned;
                  bool _1518_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1519_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out876;
                  bool _out877;
                  bool _out878;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                  _1516_recursiveGen = _out876;
                  _1517_recOwned = _out877;
                  _1518_recErased = _out878;
                  _1519_recIdents = _out879;
                  if (!(_1517_recOwned)) {
                    _1516_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1516_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1516_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1518_recErased;
                  readIdents = _1519_recIdents;
                }
              } else if (_source49.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1520___mcc_h831 = _source49.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1521_recursiveGen;
                  bool _1522_recOwned;
                  bool _1523_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1524_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out880;
                  bool _out881;
                  bool _out882;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882, out _out883);
                  _1521_recursiveGen = _out880;
                  _1522_recOwned = _out881;
                  _1523_recErased = _out882;
                  _1524_recIdents = _out883;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1521_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1522_recOwned;
                  isErased = _1523_recErased;
                  readIdents = _1524_recIdents;
                }
              } else if (_source49.is_Array) {
                DAST._IType _1525___mcc_h833 = _source49.dtor_element;
                BigInteger _1526___mcc_h834 = _source49.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1527_recursiveGen;
                  bool _1528_recOwned;
                  bool _1529_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1530_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out884;
                  bool _out885;
                  bool _out886;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out887;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out884, out _out885, out _out886, out _out887);
                  _1527_recursiveGen = _out884;
                  _1528_recOwned = _out885;
                  _1529_recErased = _out886;
                  _1530_recIdents = _out887;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1527_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1528_recOwned;
                  isErased = _1529_recErased;
                  readIdents = _1530_recIdents;
                }
              } else if (_source49.is_Seq) {
                DAST._IType _1531___mcc_h837 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1532_recursiveGen;
                  bool _1533_recOwned;
                  bool _1534_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1535_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out888;
                  bool _out889;
                  bool _out890;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out891;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out888, out _out889, out _out890, out _out891);
                  _1532_recursiveGen = _out888;
                  _1533_recOwned = _out889;
                  _1534_recErased = _out890;
                  _1535_recIdents = _out891;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1532_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1533_recOwned;
                  isErased = _1534_recErased;
                  readIdents = _1535_recIdents;
                }
              } else if (_source49.is_Set) {
                DAST._IType _1536___mcc_h839 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1537_recursiveGen;
                  bool _1538_recOwned;
                  bool _1539_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1540_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out892;
                  bool _out893;
                  bool _out894;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out895;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out892, out _out893, out _out894, out _out895);
                  _1537_recursiveGen = _out892;
                  _1538_recOwned = _out893;
                  _1539_recErased = _out894;
                  _1540_recIdents = _out895;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1537_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1538_recOwned;
                  isErased = _1539_recErased;
                  readIdents = _1540_recIdents;
                }
              } else if (_source49.is_Multiset) {
                DAST._IType _1541___mcc_h841 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1542_recursiveGen;
                  bool _1543_recOwned;
                  bool _1544_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1545_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out896;
                  bool _out897;
                  bool _out898;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out899;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out896, out _out897, out _out898, out _out899);
                  _1542_recursiveGen = _out896;
                  _1543_recOwned = _out897;
                  _1544_recErased = _out898;
                  _1545_recIdents = _out899;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1542_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1543_recOwned;
                  isErased = _1544_recErased;
                  readIdents = _1545_recIdents;
                }
              } else if (_source49.is_Map) {
                DAST._IType _1546___mcc_h843 = _source49.dtor_key;
                DAST._IType _1547___mcc_h844 = _source49.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1548_recursiveGen;
                  bool _1549_recOwned;
                  bool _1550_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1551_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out900;
                  bool _out901;
                  bool _out902;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out900, out _out901, out _out902, out _out903);
                  _1548_recursiveGen = _out900;
                  _1549_recOwned = _out901;
                  _1550_recErased = _out902;
                  _1551_recIdents = _out903;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1548_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1549_recOwned;
                  isErased = _1550_recErased;
                  readIdents = _1551_recIdents;
                }
              } else if (_source49.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1552___mcc_h847 = _source49.dtor_args;
                DAST._IType _1553___mcc_h848 = _source49.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1554_recursiveGen;
                  bool _1555_recOwned;
                  bool _1556_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1557_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out904;
                  bool _out905;
                  bool _out906;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out904, out _out905, out _out906, out _out907);
                  _1554_recursiveGen = _out904;
                  _1555_recOwned = _out905;
                  _1556_recErased = _out906;
                  _1557_recIdents = _out907;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1554_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1555_recOwned;
                  isErased = _1556_recErased;
                  readIdents = _1557_recIdents;
                }
              } else if (_source49.is_Primitive) {
                DAST._IPrimitive _1558___mcc_h851 = _source49.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1559_recursiveGen;
                  bool _1560_recOwned;
                  bool _1561_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1562_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out908;
                  bool _out909;
                  bool _out910;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out911;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out908, out _out909, out _out910, out _out911);
                  _1559_recursiveGen = _out908;
                  _1560_recOwned = _out909;
                  _1561_recErased = _out910;
                  _1562_recIdents = _out911;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1559_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1560_recOwned;
                  isErased = _1561_recErased;
                  readIdents = _1562_recIdents;
                }
              } else if (_source49.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1563___mcc_h853 = _source49.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1564_recursiveGen;
                  bool _1565_recOwned;
                  bool _1566_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1567_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out912;
                  bool _out913;
                  bool _out914;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out915;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out912, out _out913, out _out914, out _out915);
                  _1564_recursiveGen = _out912;
                  _1565_recOwned = _out913;
                  _1566_recErased = _out914;
                  _1567_recIdents = _out915;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1564_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1565_recOwned;
                  isErased = _1566_recErased;
                  readIdents = _1567_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1568___mcc_h855 = _source49.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1569_recursiveGen;
                  bool _1570_recOwned;
                  bool _1571_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1572_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out916;
                  bool _out917;
                  bool _out918;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out919;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out916, out _out917, out _out918, out _out919);
                  _1569_recursiveGen = _out916;
                  _1570_recOwned = _out917;
                  _1571_recErased = _out918;
                  _1572_recIdents = _out919;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1569_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1570_recOwned;
                  isErased = _1571_recErased;
                  readIdents = _1572_recIdents;
                }
              }
            } else if (_source27.is_Primitive) {
              DAST._IPrimitive _1573___mcc_h857 = _source27.dtor_Primitive_a0;
              DAST._IPrimitive _source51 = _1573___mcc_h857;
              if (_source51.is_Int) {
                DAST._IType _source52 = _665___mcc_h306;
                if (_source52.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1574___mcc_h861 = _source52.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1575___mcc_h862 = _source52.dtor_typeArgs;
                  DAST._IResolvedType _1576___mcc_h863 = _source52.dtor_resolved;
                  DAST._IResolvedType _source53 = _1576___mcc_h863;
                  if (_source53.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1577___mcc_h867 = _source53.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1578_recursiveGen;
                      bool _1579_recOwned;
                      bool _1580_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1581_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out920;
                      bool _out921;
                      bool _out922;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out920, out _out921, out _out922, out _out923);
                      _1578_recursiveGen = _out920;
                      _1579_recOwned = _out921;
                      _1580_recErased = _out922;
                      _1581_recIdents = _out923;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1578_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1579_recOwned;
                      isErased = _1580_recErased;
                      readIdents = _1581_recIdents;
                    }
                  } else if (_source53.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1582___mcc_h869 = _source53.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1583_recursiveGen;
                      bool _1584_recOwned;
                      bool _1585_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1586_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out924;
                      bool _out925;
                      bool _out926;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out927;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out924, out _out925, out _out926, out _out927);
                      _1583_recursiveGen = _out924;
                      _1584_recOwned = _out925;
                      _1585_recErased = _out926;
                      _1586_recIdents = _out927;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1583_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1584_recOwned;
                      isErased = _1585_recErased;
                      readIdents = _1586_recIdents;
                    }
                  } else {
                    DAST._IType _1587___mcc_h871 = _source53.dtor_Newtype_a0;
                    DAST._IType _1588_b = _1587___mcc_h871;
                    {
                      if (object.Equals(_658_fromTpe, _1588_b)) {
                        Dafny.ISequence<Dafny.Rune> _1589_recursiveGen;
                        bool _1590_recOwned;
                        bool _1591_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1592_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out928;
                        bool _out929;
                        bool _out930;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                        DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out928, out _out929, out _out930, out _out931);
                        _1589_recursiveGen = _out928;
                        _1590_recOwned = _out929;
                        _1591_recErased = _out930;
                        _1592_recIdents = _out931;
                        Dafny.ISequence<Dafny.Rune> _1593_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out932;
                        _out932 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                        _1593_rhsType = _out932;
                        Dafny.ISequence<Dafny.Rune> _1594_uneraseFn;
                        _1594_uneraseFn = ((_1590_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1593_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1594_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1589_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1590_recOwned;
                        isErased = false;
                        readIdents = _1592_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out933;
                        bool _out934;
                        bool _out935;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1588_b), _1588_b, _657_toTpe), selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                        s = _out933;
                        isOwned = _out934;
                        isErased = _out935;
                        readIdents = _out936;
                      }
                    }
                  }
                } else if (_source52.is_Nullable) {
                  DAST._IType _1595___mcc_h873 = _source52.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1596_recursiveGen;
                    bool _1597_recOwned;
                    bool _1598_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1599_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out937;
                    bool _out938;
                    bool _out939;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                    _1596_recursiveGen = _out937;
                    _1597_recOwned = _out938;
                    _1598_recErased = _out939;
                    _1599_recIdents = _out940;
                    if (!(_1597_recOwned)) {
                      _1596_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1596_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1596_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1598_recErased;
                    readIdents = _1599_recIdents;
                  }
                } else if (_source52.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1600___mcc_h875 = _source52.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1601_recursiveGen;
                    bool _1602_recOwned;
                    bool _1603_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1604_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out941;
                    bool _out942;
                    bool _out943;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943, out _out944);
                    _1601_recursiveGen = _out941;
                    _1602_recOwned = _out942;
                    _1603_recErased = _out943;
                    _1604_recIdents = _out944;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1601_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1602_recOwned;
                    isErased = _1603_recErased;
                    readIdents = _1604_recIdents;
                  }
                } else if (_source52.is_Array) {
                  DAST._IType _1605___mcc_h877 = _source52.dtor_element;
                  BigInteger _1606___mcc_h878 = _source52.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1607_recursiveGen;
                    bool _1608_recOwned;
                    bool _1609_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1610_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out945;
                    bool _out946;
                    bool _out947;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out948;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out945, out _out946, out _out947, out _out948);
                    _1607_recursiveGen = _out945;
                    _1608_recOwned = _out946;
                    _1609_recErased = _out947;
                    _1610_recIdents = _out948;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1607_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1608_recOwned;
                    isErased = _1609_recErased;
                    readIdents = _1610_recIdents;
                  }
                } else if (_source52.is_Seq) {
                  DAST._IType _1611___mcc_h881 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1612_recursiveGen;
                    bool _1613_recOwned;
                    bool _1614_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1615_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out949;
                    bool _out950;
                    bool _out951;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out952;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out949, out _out950, out _out951, out _out952);
                    _1612_recursiveGen = _out949;
                    _1613_recOwned = _out950;
                    _1614_recErased = _out951;
                    _1615_recIdents = _out952;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1612_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1613_recOwned;
                    isErased = _1614_recErased;
                    readIdents = _1615_recIdents;
                  }
                } else if (_source52.is_Set) {
                  DAST._IType _1616___mcc_h883 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1617_recursiveGen;
                    bool _1618_recOwned;
                    bool _1619_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1620_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out953;
                    bool _out954;
                    bool _out955;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out953, out _out954, out _out955, out _out956);
                    _1617_recursiveGen = _out953;
                    _1618_recOwned = _out954;
                    _1619_recErased = _out955;
                    _1620_recIdents = _out956;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1617_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1618_recOwned;
                    isErased = _1619_recErased;
                    readIdents = _1620_recIdents;
                  }
                } else if (_source52.is_Multiset) {
                  DAST._IType _1621___mcc_h885 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1622_recursiveGen;
                    bool _1623_recOwned;
                    bool _1624_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1625_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out957;
                    bool _out958;
                    bool _out959;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out960;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out957, out _out958, out _out959, out _out960);
                    _1622_recursiveGen = _out957;
                    _1623_recOwned = _out958;
                    _1624_recErased = _out959;
                    _1625_recIdents = _out960;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1622_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1623_recOwned;
                    isErased = _1624_recErased;
                    readIdents = _1625_recIdents;
                  }
                } else if (_source52.is_Map) {
                  DAST._IType _1626___mcc_h887 = _source52.dtor_key;
                  DAST._IType _1627___mcc_h888 = _source52.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1628_recursiveGen;
                    bool _1629_recOwned;
                    bool _1630_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1631_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out961;
                    bool _out962;
                    bool _out963;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out961, out _out962, out _out963, out _out964);
                    _1628_recursiveGen = _out961;
                    _1629_recOwned = _out962;
                    _1630_recErased = _out963;
                    _1631_recIdents = _out964;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1628_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1629_recOwned;
                    isErased = _1630_recErased;
                    readIdents = _1631_recIdents;
                  }
                } else if (_source52.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1632___mcc_h891 = _source52.dtor_args;
                  DAST._IType _1633___mcc_h892 = _source52.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1634_recursiveGen;
                    bool _1635_recOwned;
                    bool _1636_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1637_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out965;
                    bool _out966;
                    bool _out967;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out968;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out965, out _out966, out _out967, out _out968);
                    _1634_recursiveGen = _out965;
                    _1635_recOwned = _out966;
                    _1636_recErased = _out967;
                    _1637_recIdents = _out968;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1634_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1635_recOwned;
                    isErased = _1636_recErased;
                    readIdents = _1637_recIdents;
                  }
                } else if (_source52.is_Primitive) {
                  DAST._IPrimitive _1638___mcc_h895 = _source52.dtor_Primitive_a0;
                  DAST._IPrimitive _source54 = _1638___mcc_h895;
                  if (_source54.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1639_recursiveGen;
                      bool _1640_recOwned;
                      bool _1641_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1642_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out969;
                      bool _out970;
                      bool _out971;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out972;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out969, out _out970, out _out971, out _out972);
                      _1639_recursiveGen = _out969;
                      _1640_recOwned = _out970;
                      _1641_recErased = _out971;
                      _1642_recIdents = _out972;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1639_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1640_recOwned;
                      isErased = _1641_recErased;
                      readIdents = _1642_recIdents;
                    }
                  } else if (_source54.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1643_recursiveGen;
                      bool _1644___v46;
                      bool _1645___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1646_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out973;
                      bool _out974;
                      bool _out975;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out976;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, true, out _out973, out _out974, out _out975, out _out976);
                      _1643_recursiveGen = _out973;
                      _1644___v46 = _out974;
                      _1645___v47 = _out975;
                      _1646_recIdents = _out976;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _1643_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1646_recIdents;
                    }
                  } else if (_source54.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1647_recursiveGen;
                      bool _1648_recOwned;
                      bool _1649_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1650_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out977;
                      bool _out978;
                      bool _out979;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out980;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out977, out _out978, out _out979, out _out980);
                      _1647_recursiveGen = _out977;
                      _1648_recOwned = _out978;
                      _1649_recErased = _out979;
                      _1650_recIdents = _out980;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1647_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1648_recOwned;
                      isErased = _1649_recErased;
                      readIdents = _1650_recIdents;
                    }
                  } else if (_source54.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1651_recursiveGen;
                      bool _1652_recOwned;
                      bool _1653_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1654_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out981;
                      bool _out982;
                      bool _out983;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out981, out _out982, out _out983, out _out984);
                      _1651_recursiveGen = _out981;
                      _1652_recOwned = _out982;
                      _1653_recErased = _out983;
                      _1654_recIdents = _out984;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1651_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1652_recOwned;
                      isErased = _1653_recErased;
                      readIdents = _1654_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1655_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out985;
                      _out985 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                      _1655_rhsType = _out985;
                      Dafny.ISequence<Dafny.Rune> _1656_recursiveGen;
                      bool _1657___v56;
                      bool _1658___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1659_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out986;
                      bool _out987;
                      bool _out988;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, true, out _out986, out _out987, out _out988, out _out989);
                      _1656_recursiveGen = _out986;
                      _1657___v56 = _out987;
                      _1658___v57 = _out988;
                      _1659_recIdents = _out989;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _1656_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1659_recIdents;
                    }
                  }
                } else if (_source52.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1660___mcc_h897 = _source52.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1661_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out990;
                    _out990 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                    _1661_rhsType = _out990;
                    Dafny.ISequence<Dafny.Rune> _1662_recursiveGen;
                    bool _1663___v51;
                    bool _1664___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1665_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out991;
                    bool _out992;
                    bool _out993;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, true, out _out991, out _out992, out _out993, out _out994);
                    _1662_recursiveGen = _out991;
                    _1663___v51 = _out992;
                    _1664___v52 = _out993;
                    _1665_recIdents = _out994;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1661_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _1662_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _1665_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1666___mcc_h899 = _source52.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1667_recursiveGen;
                    bool _1668_recOwned;
                    bool _1669_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1670_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out995;
                    bool _out996;
                    bool _out997;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out995, out _out996, out _out997, out _out998);
                    _1667_recursiveGen = _out995;
                    _1668_recOwned = _out996;
                    _1669_recErased = _out997;
                    _1670_recIdents = _out998;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1667_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1668_recOwned;
                    isErased = _1669_recErased;
                    readIdents = _1670_recIdents;
                  }
                }
              } else if (_source51.is_Real) {
                DAST._IType _source55 = _665___mcc_h306;
                if (_source55.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1671___mcc_h901 = _source55.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1672___mcc_h902 = _source55.dtor_typeArgs;
                  DAST._IResolvedType _1673___mcc_h903 = _source55.dtor_resolved;
                  DAST._IResolvedType _source56 = _1673___mcc_h903;
                  if (_source56.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1674___mcc_h907 = _source56.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1675_recursiveGen;
                      bool _1676_recOwned;
                      bool _1677_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1678_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out999;
                      bool _out1000;
                      bool _out1001;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out999, out _out1000, out _out1001, out _out1002);
                      _1675_recursiveGen = _out999;
                      _1676_recOwned = _out1000;
                      _1677_recErased = _out1001;
                      _1678_recIdents = _out1002;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1675_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1676_recOwned;
                      isErased = _1677_recErased;
                      readIdents = _1678_recIdents;
                    }
                  } else if (_source56.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1679___mcc_h909 = _source56.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1680_recursiveGen;
                      bool _1681_recOwned;
                      bool _1682_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1683_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1003;
                      bool _out1004;
                      bool _out1005;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1006;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1003, out _out1004, out _out1005, out _out1006);
                      _1680_recursiveGen = _out1003;
                      _1681_recOwned = _out1004;
                      _1682_recErased = _out1005;
                      _1683_recIdents = _out1006;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1680_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1681_recOwned;
                      isErased = _1682_recErased;
                      readIdents = _1683_recIdents;
                    }
                  } else {
                    DAST._IType _1684___mcc_h911 = _source56.dtor_Newtype_a0;
                    DAST._IType _1685_b = _1684___mcc_h911;
                    {
                      if (object.Equals(_658_fromTpe, _1685_b)) {
                        Dafny.ISequence<Dafny.Rune> _1686_recursiveGen;
                        bool _1687_recOwned;
                        bool _1688_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1689_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1007;
                        bool _out1008;
                        bool _out1009;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1010;
                        DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1007, out _out1008, out _out1009, out _out1010);
                        _1686_recursiveGen = _out1007;
                        _1687_recOwned = _out1008;
                        _1688_recErased = _out1009;
                        _1689_recIdents = _out1010;
                        Dafny.ISequence<Dafny.Rune> _1690_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1011;
                        _out1011 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                        _1690_rhsType = _out1011;
                        Dafny.ISequence<Dafny.Rune> _1691_uneraseFn;
                        _1691_uneraseFn = ((_1687_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1690_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1691_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1687_recOwned;
                        isErased = false;
                        readIdents = _1689_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1012;
                        bool _out1013;
                        bool _out1014;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1685_b), _1685_b, _657_toTpe), selfIdent, @params, mustOwn, out _out1012, out _out1013, out _out1014, out _out1015);
                        s = _out1012;
                        isOwned = _out1013;
                        isErased = _out1014;
                        readIdents = _out1015;
                      }
                    }
                  }
                } else if (_source55.is_Nullable) {
                  DAST._IType _1692___mcc_h913 = _source55.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1693_recursiveGen;
                    bool _1694_recOwned;
                    bool _1695_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1696_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1016;
                    bool _out1017;
                    bool _out1018;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018, out _out1019);
                    _1693_recursiveGen = _out1016;
                    _1694_recOwned = _out1017;
                    _1695_recErased = _out1018;
                    _1696_recIdents = _out1019;
                    if (!(_1694_recOwned)) {
                      _1693_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1693_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1693_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1695_recErased;
                    readIdents = _1696_recIdents;
                  }
                } else if (_source55.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1697___mcc_h915 = _source55.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1698_recursiveGen;
                    bool _1699_recOwned;
                    bool _1700_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1701_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1020;
                    bool _out1021;
                    bool _out1022;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1023;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1020, out _out1021, out _out1022, out _out1023);
                    _1698_recursiveGen = _out1020;
                    _1699_recOwned = _out1021;
                    _1700_recErased = _out1022;
                    _1701_recIdents = _out1023;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1698_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1699_recOwned;
                    isErased = _1700_recErased;
                    readIdents = _1701_recIdents;
                  }
                } else if (_source55.is_Array) {
                  DAST._IType _1702___mcc_h917 = _source55.dtor_element;
                  BigInteger _1703___mcc_h918 = _source55.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1704_recursiveGen;
                    bool _1705_recOwned;
                    bool _1706_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1707_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1024;
                    bool _out1025;
                    bool _out1026;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1027;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1024, out _out1025, out _out1026, out _out1027);
                    _1704_recursiveGen = _out1024;
                    _1705_recOwned = _out1025;
                    _1706_recErased = _out1026;
                    _1707_recIdents = _out1027;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1704_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1705_recOwned;
                    isErased = _1706_recErased;
                    readIdents = _1707_recIdents;
                  }
                } else if (_source55.is_Seq) {
                  DAST._IType _1708___mcc_h921 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1709_recursiveGen;
                    bool _1710_recOwned;
                    bool _1711_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1712_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1028;
                    bool _out1029;
                    bool _out1030;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1031;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1028, out _out1029, out _out1030, out _out1031);
                    _1709_recursiveGen = _out1028;
                    _1710_recOwned = _out1029;
                    _1711_recErased = _out1030;
                    _1712_recIdents = _out1031;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1709_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1710_recOwned;
                    isErased = _1711_recErased;
                    readIdents = _1712_recIdents;
                  }
                } else if (_source55.is_Set) {
                  DAST._IType _1713___mcc_h923 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1714_recursiveGen;
                    bool _1715_recOwned;
                    bool _1716_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1717_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1032;
                    bool _out1033;
                    bool _out1034;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1035;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1032, out _out1033, out _out1034, out _out1035);
                    _1714_recursiveGen = _out1032;
                    _1715_recOwned = _out1033;
                    _1716_recErased = _out1034;
                    _1717_recIdents = _out1035;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1714_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1715_recOwned;
                    isErased = _1716_recErased;
                    readIdents = _1717_recIdents;
                  }
                } else if (_source55.is_Multiset) {
                  DAST._IType _1718___mcc_h925 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1719_recursiveGen;
                    bool _1720_recOwned;
                    bool _1721_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1722_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1036;
                    bool _out1037;
                    bool _out1038;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1039;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1036, out _out1037, out _out1038, out _out1039);
                    _1719_recursiveGen = _out1036;
                    _1720_recOwned = _out1037;
                    _1721_recErased = _out1038;
                    _1722_recIdents = _out1039;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1719_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1720_recOwned;
                    isErased = _1721_recErased;
                    readIdents = _1722_recIdents;
                  }
                } else if (_source55.is_Map) {
                  DAST._IType _1723___mcc_h927 = _source55.dtor_key;
                  DAST._IType _1724___mcc_h928 = _source55.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1725_recursiveGen;
                    bool _1726_recOwned;
                    bool _1727_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1728_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1040;
                    bool _out1041;
                    bool _out1042;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1040, out _out1041, out _out1042, out _out1043);
                    _1725_recursiveGen = _out1040;
                    _1726_recOwned = _out1041;
                    _1727_recErased = _out1042;
                    _1728_recIdents = _out1043;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1725_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1726_recOwned;
                    isErased = _1727_recErased;
                    readIdents = _1728_recIdents;
                  }
                } else if (_source55.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1729___mcc_h931 = _source55.dtor_args;
                  DAST._IType _1730___mcc_h932 = _source55.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1731_recursiveGen;
                    bool _1732_recOwned;
                    bool _1733_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1734_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1044;
                    bool _out1045;
                    bool _out1046;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1047;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1044, out _out1045, out _out1046, out _out1047);
                    _1731_recursiveGen = _out1044;
                    _1732_recOwned = _out1045;
                    _1733_recErased = _out1046;
                    _1734_recIdents = _out1047;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1732_recOwned;
                    isErased = _1733_recErased;
                    readIdents = _1734_recIdents;
                  }
                } else if (_source55.is_Primitive) {
                  DAST._IPrimitive _1735___mcc_h935 = _source55.dtor_Primitive_a0;
                  DAST._IPrimitive _source57 = _1735___mcc_h935;
                  if (_source57.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1736_recursiveGen;
                      bool _1737___v48;
                      bool _1738___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1739_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1048;
                      bool _out1049;
                      bool _out1050;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1051;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, false, out _out1048, out _out1049, out _out1050, out _out1051);
                      _1736_recursiveGen = _out1048;
                      _1737___v48 = _out1049;
                      _1738___v49 = _out1050;
                      _1739_recIdents = _out1051;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _1736_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1739_recIdents;
                    }
                  } else if (_source57.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1740_recursiveGen;
                      bool _1741_recOwned;
                      bool _1742_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1743_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1052;
                      bool _out1053;
                      bool _out1054;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1052, out _out1053, out _out1054, out _out1055);
                      _1740_recursiveGen = _out1052;
                      _1741_recOwned = _out1053;
                      _1742_recErased = _out1054;
                      _1743_recIdents = _out1055;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1740_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1741_recOwned;
                      isErased = _1742_recErased;
                      readIdents = _1743_recIdents;
                    }
                  } else if (_source57.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1744_recursiveGen;
                      bool _1745_recOwned;
                      bool _1746_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1747_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1056;
                      bool _out1057;
                      bool _out1058;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1059;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1056, out _out1057, out _out1058, out _out1059);
                      _1744_recursiveGen = _out1056;
                      _1745_recOwned = _out1057;
                      _1746_recErased = _out1058;
                      _1747_recIdents = _out1059;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1744_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1745_recOwned;
                      isErased = _1746_recErased;
                      readIdents = _1747_recIdents;
                    }
                  } else if (_source57.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1748_recursiveGen;
                      bool _1749_recOwned;
                      bool _1750_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1751_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1060;
                      bool _out1061;
                      bool _out1062;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1063;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1060, out _out1061, out _out1062, out _out1063);
                      _1748_recursiveGen = _out1060;
                      _1749_recOwned = _out1061;
                      _1750_recErased = _out1062;
                      _1751_recIdents = _out1063;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1748_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1749_recOwned;
                      isErased = _1750_recErased;
                      readIdents = _1751_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1752_recursiveGen;
                      bool _1753_recOwned;
                      bool _1754_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1755_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1064;
                      bool _out1065;
                      bool _out1066;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1067;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1064, out _out1065, out _out1066, out _out1067);
                      _1752_recursiveGen = _out1064;
                      _1753_recOwned = _out1065;
                      _1754_recErased = _out1066;
                      _1755_recIdents = _out1067;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1752_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1753_recOwned;
                      isErased = _1754_recErased;
                      readIdents = _1755_recIdents;
                    }
                  }
                } else if (_source55.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1756___mcc_h937 = _source55.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1757_recursiveGen;
                    bool _1758_recOwned;
                    bool _1759_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1760_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1068;
                    bool _out1069;
                    bool _out1070;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1071;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1068, out _out1069, out _out1070, out _out1071);
                    _1757_recursiveGen = _out1068;
                    _1758_recOwned = _out1069;
                    _1759_recErased = _out1070;
                    _1760_recIdents = _out1071;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1757_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1758_recOwned;
                    isErased = _1759_recErased;
                    readIdents = _1760_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1761___mcc_h939 = _source55.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1762_recursiveGen;
                    bool _1763_recOwned;
                    bool _1764_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1765_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1072;
                    bool _out1073;
                    bool _out1074;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1072, out _out1073, out _out1074, out _out1075);
                    _1762_recursiveGen = _out1072;
                    _1763_recOwned = _out1073;
                    _1764_recErased = _out1074;
                    _1765_recIdents = _out1075;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1762_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1763_recOwned;
                    isErased = _1764_recErased;
                    readIdents = _1765_recIdents;
                  }
                }
              } else if (_source51.is_String) {
                DAST._IType _source58 = _665___mcc_h306;
                if (_source58.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1766___mcc_h941 = _source58.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1767___mcc_h942 = _source58.dtor_typeArgs;
                  DAST._IResolvedType _1768___mcc_h943 = _source58.dtor_resolved;
                  DAST._IResolvedType _source59 = _1768___mcc_h943;
                  if (_source59.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1769___mcc_h947 = _source59.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1770_recursiveGen;
                      bool _1771_recOwned;
                      bool _1772_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1773_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1076;
                      bool _out1077;
                      bool _out1078;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078, out _out1079);
                      _1770_recursiveGen = _out1076;
                      _1771_recOwned = _out1077;
                      _1772_recErased = _out1078;
                      _1773_recIdents = _out1079;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1770_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1771_recOwned;
                      isErased = _1772_recErased;
                      readIdents = _1773_recIdents;
                    }
                  } else if (_source59.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1774___mcc_h949 = _source59.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1775_recursiveGen;
                      bool _1776_recOwned;
                      bool _1777_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1778_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1080;
                      bool _out1081;
                      bool _out1082;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1083;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1080, out _out1081, out _out1082, out _out1083);
                      _1775_recursiveGen = _out1080;
                      _1776_recOwned = _out1081;
                      _1777_recErased = _out1082;
                      _1778_recIdents = _out1083;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1775_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1776_recOwned;
                      isErased = _1777_recErased;
                      readIdents = _1778_recIdents;
                    }
                  } else {
                    DAST._IType _1779___mcc_h951 = _source59.dtor_Newtype_a0;
                    DAST._IType _1780_b = _1779___mcc_h951;
                    {
                      if (object.Equals(_658_fromTpe, _1780_b)) {
                        Dafny.ISequence<Dafny.Rune> _1781_recursiveGen;
                        bool _1782_recOwned;
                        bool _1783_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1784_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1084;
                        bool _out1085;
                        bool _out1086;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                        DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1084, out _out1085, out _out1086, out _out1087);
                        _1781_recursiveGen = _out1084;
                        _1782_recOwned = _out1085;
                        _1783_recErased = _out1086;
                        _1784_recIdents = _out1087;
                        Dafny.ISequence<Dafny.Rune> _1785_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1088;
                        _out1088 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                        _1785_rhsType = _out1088;
                        Dafny.ISequence<Dafny.Rune> _1786_uneraseFn;
                        _1786_uneraseFn = ((_1782_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1785_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1786_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1781_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1782_recOwned;
                        isErased = false;
                        readIdents = _1784_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1089;
                        bool _out1090;
                        bool _out1091;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1780_b), _1780_b, _657_toTpe), selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                        s = _out1089;
                        isOwned = _out1090;
                        isErased = _out1091;
                        readIdents = _out1092;
                      }
                    }
                  }
                } else if (_source58.is_Nullable) {
                  DAST._IType _1787___mcc_h953 = _source58.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1788_recursiveGen;
                    bool _1789_recOwned;
                    bool _1790_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1791_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1093;
                    bool _out1094;
                    bool _out1095;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                    _1788_recursiveGen = _out1093;
                    _1789_recOwned = _out1094;
                    _1790_recErased = _out1095;
                    _1791_recIdents = _out1096;
                    if (!(_1789_recOwned)) {
                      _1788_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1788_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1788_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1790_recErased;
                    readIdents = _1791_recIdents;
                  }
                } else if (_source58.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1792___mcc_h955 = _source58.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1793_recursiveGen;
                    bool _1794_recOwned;
                    bool _1795_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1796_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1097;
                    bool _out1098;
                    bool _out1099;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099, out _out1100);
                    _1793_recursiveGen = _out1097;
                    _1794_recOwned = _out1098;
                    _1795_recErased = _out1099;
                    _1796_recIdents = _out1100;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1793_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1794_recOwned;
                    isErased = _1795_recErased;
                    readIdents = _1796_recIdents;
                  }
                } else if (_source58.is_Array) {
                  DAST._IType _1797___mcc_h957 = _source58.dtor_element;
                  BigInteger _1798___mcc_h958 = _source58.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1799_recursiveGen;
                    bool _1800_recOwned;
                    bool _1801_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1802_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1101;
                    bool _out1102;
                    bool _out1103;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1104;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1101, out _out1102, out _out1103, out _out1104);
                    _1799_recursiveGen = _out1101;
                    _1800_recOwned = _out1102;
                    _1801_recErased = _out1103;
                    _1802_recIdents = _out1104;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1799_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1800_recOwned;
                    isErased = _1801_recErased;
                    readIdents = _1802_recIdents;
                  }
                } else if (_source58.is_Seq) {
                  DAST._IType _1803___mcc_h961 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1804_recursiveGen;
                    bool _1805_recOwned;
                    bool _1806_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1807_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1105;
                    bool _out1106;
                    bool _out1107;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1105, out _out1106, out _out1107, out _out1108);
                    _1804_recursiveGen = _out1105;
                    _1805_recOwned = _out1106;
                    _1806_recErased = _out1107;
                    _1807_recIdents = _out1108;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1804_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1805_recOwned;
                    isErased = _1806_recErased;
                    readIdents = _1807_recIdents;
                  }
                } else if (_source58.is_Set) {
                  DAST._IType _1808___mcc_h963 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1809_recursiveGen;
                    bool _1810_recOwned;
                    bool _1811_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1812_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1109;
                    bool _out1110;
                    bool _out1111;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1112;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1109, out _out1110, out _out1111, out _out1112);
                    _1809_recursiveGen = _out1109;
                    _1810_recOwned = _out1110;
                    _1811_recErased = _out1111;
                    _1812_recIdents = _out1112;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1809_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1810_recOwned;
                    isErased = _1811_recErased;
                    readIdents = _1812_recIdents;
                  }
                } else if (_source58.is_Multiset) {
                  DAST._IType _1813___mcc_h965 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1814_recursiveGen;
                    bool _1815_recOwned;
                    bool _1816_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1817_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1113;
                    bool _out1114;
                    bool _out1115;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1116;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1113, out _out1114, out _out1115, out _out1116);
                    _1814_recursiveGen = _out1113;
                    _1815_recOwned = _out1114;
                    _1816_recErased = _out1115;
                    _1817_recIdents = _out1116;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1814_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1815_recOwned;
                    isErased = _1816_recErased;
                    readIdents = _1817_recIdents;
                  }
                } else if (_source58.is_Map) {
                  DAST._IType _1818___mcc_h967 = _source58.dtor_key;
                  DAST._IType _1819___mcc_h968 = _source58.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1820_recursiveGen;
                    bool _1821_recOwned;
                    bool _1822_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1823_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1117;
                    bool _out1118;
                    bool _out1119;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1117, out _out1118, out _out1119, out _out1120);
                    _1820_recursiveGen = _out1117;
                    _1821_recOwned = _out1118;
                    _1822_recErased = _out1119;
                    _1823_recIdents = _out1120;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1820_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1821_recOwned;
                    isErased = _1822_recErased;
                    readIdents = _1823_recIdents;
                  }
                } else if (_source58.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1824___mcc_h971 = _source58.dtor_args;
                  DAST._IType _1825___mcc_h972 = _source58.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1826_recursiveGen;
                    bool _1827_recOwned;
                    bool _1828_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1829_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1121;
                    bool _out1122;
                    bool _out1123;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1124;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1121, out _out1122, out _out1123, out _out1124);
                    _1826_recursiveGen = _out1121;
                    _1827_recOwned = _out1122;
                    _1828_recErased = _out1123;
                    _1829_recIdents = _out1124;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1826_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1827_recOwned;
                    isErased = _1828_recErased;
                    readIdents = _1829_recIdents;
                  }
                } else if (_source58.is_Primitive) {
                  DAST._IPrimitive _1830___mcc_h975 = _source58.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1831_recursiveGen;
                    bool _1832_recOwned;
                    bool _1833_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1834_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1125;
                    bool _out1126;
                    bool _out1127;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1128;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1125, out _out1126, out _out1127, out _out1128);
                    _1831_recursiveGen = _out1125;
                    _1832_recOwned = _out1126;
                    _1833_recErased = _out1127;
                    _1834_recIdents = _out1128;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1831_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1832_recOwned;
                    isErased = _1833_recErased;
                    readIdents = _1834_recIdents;
                  }
                } else if (_source58.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1835___mcc_h977 = _source58.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1836_recursiveGen;
                    bool _1837_recOwned;
                    bool _1838_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1839_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1129;
                    bool _out1130;
                    bool _out1131;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1132;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1129, out _out1130, out _out1131, out _out1132);
                    _1836_recursiveGen = _out1129;
                    _1837_recOwned = _out1130;
                    _1838_recErased = _out1131;
                    _1839_recIdents = _out1132;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1836_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1837_recOwned;
                    isErased = _1838_recErased;
                    readIdents = _1839_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1840___mcc_h979 = _source58.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1841_recursiveGen;
                    bool _1842_recOwned;
                    bool _1843_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1844_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1133;
                    bool _out1134;
                    bool _out1135;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1133, out _out1134, out _out1135, out _out1136);
                    _1841_recursiveGen = _out1133;
                    _1842_recOwned = _out1134;
                    _1843_recErased = _out1135;
                    _1844_recIdents = _out1136;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1841_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1842_recOwned;
                    isErased = _1843_recErased;
                    readIdents = _1844_recIdents;
                  }
                }
              } else if (_source51.is_Bool) {
                DAST._IType _source60 = _665___mcc_h306;
                if (_source60.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1845___mcc_h981 = _source60.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1846___mcc_h982 = _source60.dtor_typeArgs;
                  DAST._IResolvedType _1847___mcc_h983 = _source60.dtor_resolved;
                  DAST._IResolvedType _source61 = _1847___mcc_h983;
                  if (_source61.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1848___mcc_h987 = _source61.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1849_recursiveGen;
                      bool _1850_recOwned;
                      bool _1851_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1852_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1137;
                      bool _out1138;
                      bool _out1139;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1140;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1137, out _out1138, out _out1139, out _out1140);
                      _1849_recursiveGen = _out1137;
                      _1850_recOwned = _out1138;
                      _1851_recErased = _out1139;
                      _1852_recIdents = _out1140;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1849_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1850_recOwned;
                      isErased = _1851_recErased;
                      readIdents = _1852_recIdents;
                    }
                  } else if (_source61.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1853___mcc_h989 = _source61.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1854_recursiveGen;
                      bool _1855_recOwned;
                      bool _1856_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1857_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1141;
                      bool _out1142;
                      bool _out1143;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1144;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1141, out _out1142, out _out1143, out _out1144);
                      _1854_recursiveGen = _out1141;
                      _1855_recOwned = _out1142;
                      _1856_recErased = _out1143;
                      _1857_recIdents = _out1144;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1854_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1855_recOwned;
                      isErased = _1856_recErased;
                      readIdents = _1857_recIdents;
                    }
                  } else {
                    DAST._IType _1858___mcc_h991 = _source61.dtor_Newtype_a0;
                    DAST._IType _1859_b = _1858___mcc_h991;
                    {
                      if (object.Equals(_658_fromTpe, _1859_b)) {
                        Dafny.ISequence<Dafny.Rune> _1860_recursiveGen;
                        bool _1861_recOwned;
                        bool _1862_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1863_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1145;
                        bool _out1146;
                        bool _out1147;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
                        DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1145, out _out1146, out _out1147, out _out1148);
                        _1860_recursiveGen = _out1145;
                        _1861_recOwned = _out1146;
                        _1862_recErased = _out1147;
                        _1863_recIdents = _out1148;
                        Dafny.ISequence<Dafny.Rune> _1864_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1149;
                        _out1149 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                        _1864_rhsType = _out1149;
                        Dafny.ISequence<Dafny.Rune> _1865_uneraseFn;
                        _1865_uneraseFn = ((_1861_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1864_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1865_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1860_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1861_recOwned;
                        isErased = false;
                        readIdents = _1863_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1150;
                        bool _out1151;
                        bool _out1152;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1859_b), _1859_b, _657_toTpe), selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                        s = _out1150;
                        isOwned = _out1151;
                        isErased = _out1152;
                        readIdents = _out1153;
                      }
                    }
                  }
                } else if (_source60.is_Nullable) {
                  DAST._IType _1866___mcc_h993 = _source60.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1867_recursiveGen;
                    bool _1868_recOwned;
                    bool _1869_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1870_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1154;
                    bool _out1155;
                    bool _out1156;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                    _1867_recursiveGen = _out1154;
                    _1868_recOwned = _out1155;
                    _1869_recErased = _out1156;
                    _1870_recIdents = _out1157;
                    if (!(_1868_recOwned)) {
                      _1867_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1867_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1867_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1869_recErased;
                    readIdents = _1870_recIdents;
                  }
                } else if (_source60.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1871___mcc_h995 = _source60.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1872_recursiveGen;
                    bool _1873_recOwned;
                    bool _1874_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1875_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1158;
                    bool _out1159;
                    bool _out1160;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1158, out _out1159, out _out1160, out _out1161);
                    _1872_recursiveGen = _out1158;
                    _1873_recOwned = _out1159;
                    _1874_recErased = _out1160;
                    _1875_recIdents = _out1161;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1872_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1873_recOwned;
                    isErased = _1874_recErased;
                    readIdents = _1875_recIdents;
                  }
                } else if (_source60.is_Array) {
                  DAST._IType _1876___mcc_h997 = _source60.dtor_element;
                  BigInteger _1877___mcc_h998 = _source60.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1878_recursiveGen;
                    bool _1879_recOwned;
                    bool _1880_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1881_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1162;
                    bool _out1163;
                    bool _out1164;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1165;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1162, out _out1163, out _out1164, out _out1165);
                    _1878_recursiveGen = _out1162;
                    _1879_recOwned = _out1163;
                    _1880_recErased = _out1164;
                    _1881_recIdents = _out1165;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1878_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1879_recOwned;
                    isErased = _1880_recErased;
                    readIdents = _1881_recIdents;
                  }
                } else if (_source60.is_Seq) {
                  DAST._IType _1882___mcc_h1001 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1883_recursiveGen;
                    bool _1884_recOwned;
                    bool _1885_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1886_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1166;
                    bool _out1167;
                    bool _out1168;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1166, out _out1167, out _out1168, out _out1169);
                    _1883_recursiveGen = _out1166;
                    _1884_recOwned = _out1167;
                    _1885_recErased = _out1168;
                    _1886_recIdents = _out1169;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1883_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1884_recOwned;
                    isErased = _1885_recErased;
                    readIdents = _1886_recIdents;
                  }
                } else if (_source60.is_Set) {
                  DAST._IType _1887___mcc_h1003 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1888_recursiveGen;
                    bool _1889_recOwned;
                    bool _1890_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1891_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1170;
                    bool _out1171;
                    bool _out1172;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1173;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1170, out _out1171, out _out1172, out _out1173);
                    _1888_recursiveGen = _out1170;
                    _1889_recOwned = _out1171;
                    _1890_recErased = _out1172;
                    _1891_recIdents = _out1173;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1888_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1889_recOwned;
                    isErased = _1890_recErased;
                    readIdents = _1891_recIdents;
                  }
                } else if (_source60.is_Multiset) {
                  DAST._IType _1892___mcc_h1005 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1893_recursiveGen;
                    bool _1894_recOwned;
                    bool _1895_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1896_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1174;
                    bool _out1175;
                    bool _out1176;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1177;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1174, out _out1175, out _out1176, out _out1177);
                    _1893_recursiveGen = _out1174;
                    _1894_recOwned = _out1175;
                    _1895_recErased = _out1176;
                    _1896_recIdents = _out1177;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1893_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1894_recOwned;
                    isErased = _1895_recErased;
                    readIdents = _1896_recIdents;
                  }
                } else if (_source60.is_Map) {
                  DAST._IType _1897___mcc_h1007 = _source60.dtor_key;
                  DAST._IType _1898___mcc_h1008 = _source60.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1899_recursiveGen;
                    bool _1900_recOwned;
                    bool _1901_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1902_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1178;
                    bool _out1179;
                    bool _out1180;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1178, out _out1179, out _out1180, out _out1181);
                    _1899_recursiveGen = _out1178;
                    _1900_recOwned = _out1179;
                    _1901_recErased = _out1180;
                    _1902_recIdents = _out1181;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1899_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1900_recOwned;
                    isErased = _1901_recErased;
                    readIdents = _1902_recIdents;
                  }
                } else if (_source60.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1903___mcc_h1011 = _source60.dtor_args;
                  DAST._IType _1904___mcc_h1012 = _source60.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1905_recursiveGen;
                    bool _1906_recOwned;
                    bool _1907_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1908_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1182;
                    bool _out1183;
                    bool _out1184;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1185;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1182, out _out1183, out _out1184, out _out1185);
                    _1905_recursiveGen = _out1182;
                    _1906_recOwned = _out1183;
                    _1907_recErased = _out1184;
                    _1908_recIdents = _out1185;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1905_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1906_recOwned;
                    isErased = _1907_recErased;
                    readIdents = _1908_recIdents;
                  }
                } else if (_source60.is_Primitive) {
                  DAST._IPrimitive _1909___mcc_h1015 = _source60.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1910_recursiveGen;
                    bool _1911_recOwned;
                    bool _1912_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1913_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1186;
                    bool _out1187;
                    bool _out1188;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1189;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1186, out _out1187, out _out1188, out _out1189);
                    _1910_recursiveGen = _out1186;
                    _1911_recOwned = _out1187;
                    _1912_recErased = _out1188;
                    _1913_recIdents = _out1189;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1910_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1911_recOwned;
                    isErased = _1912_recErased;
                    readIdents = _1913_recIdents;
                  }
                } else if (_source60.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1914___mcc_h1017 = _source60.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1915_recursiveGen;
                    bool _1916_recOwned;
                    bool _1917_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1918_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1190;
                    bool _out1191;
                    bool _out1192;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1193;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1190, out _out1191, out _out1192, out _out1193);
                    _1915_recursiveGen = _out1190;
                    _1916_recOwned = _out1191;
                    _1917_recErased = _out1192;
                    _1918_recIdents = _out1193;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1915_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1916_recOwned;
                    isErased = _1917_recErased;
                    readIdents = _1918_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1919___mcc_h1019 = _source60.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1920_recursiveGen;
                    bool _1921_recOwned;
                    bool _1922_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1923_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1194;
                    bool _out1195;
                    bool _out1196;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1197;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1194, out _out1195, out _out1196, out _out1197);
                    _1920_recursiveGen = _out1194;
                    _1921_recOwned = _out1195;
                    _1922_recErased = _out1196;
                    _1923_recIdents = _out1197;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1920_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1921_recOwned;
                    isErased = _1922_recErased;
                    readIdents = _1923_recIdents;
                  }
                }
              } else {
                DAST._IType _source62 = _665___mcc_h306;
                if (_source62.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1924___mcc_h1021 = _source62.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1925___mcc_h1022 = _source62.dtor_typeArgs;
                  DAST._IResolvedType _1926___mcc_h1023 = _source62.dtor_resolved;
                  DAST._IResolvedType _source63 = _1926___mcc_h1023;
                  if (_source63.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1927___mcc_h1027 = _source63.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1928_recursiveGen;
                      bool _1929_recOwned;
                      bool _1930_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1931_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1198;
                      bool _out1199;
                      bool _out1200;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1201;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1198, out _out1199, out _out1200, out _out1201);
                      _1928_recursiveGen = _out1198;
                      _1929_recOwned = _out1199;
                      _1930_recErased = _out1200;
                      _1931_recIdents = _out1201;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1928_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1929_recOwned;
                      isErased = _1930_recErased;
                      readIdents = _1931_recIdents;
                    }
                  } else if (_source63.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1932___mcc_h1029 = _source63.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1933_recursiveGen;
                      bool _1934_recOwned;
                      bool _1935_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1936_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1202;
                      bool _out1203;
                      bool _out1204;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1205;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1202, out _out1203, out _out1204, out _out1205);
                      _1933_recursiveGen = _out1202;
                      _1934_recOwned = _out1203;
                      _1935_recErased = _out1204;
                      _1936_recIdents = _out1205;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1933_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1934_recOwned;
                      isErased = _1935_recErased;
                      readIdents = _1936_recIdents;
                    }
                  } else {
                    DAST._IType _1937___mcc_h1031 = _source63.dtor_Newtype_a0;
                    DAST._IType _1938_b = _1937___mcc_h1031;
                    {
                      if (object.Equals(_658_fromTpe, _1938_b)) {
                        Dafny.ISequence<Dafny.Rune> _1939_recursiveGen;
                        bool _1940_recOwned;
                        bool _1941_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1942_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1206;
                        bool _out1207;
                        bool _out1208;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                        DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1206, out _out1207, out _out1208, out _out1209);
                        _1939_recursiveGen = _out1206;
                        _1940_recOwned = _out1207;
                        _1941_recErased = _out1208;
                        _1942_recIdents = _out1209;
                        Dafny.ISequence<Dafny.Rune> _1943_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1210;
                        _out1210 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                        _1943_rhsType = _out1210;
                        Dafny.ISequence<Dafny.Rune> _1944_uneraseFn;
                        _1944_uneraseFn = ((_1940_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1943_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1944_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1939_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1940_recOwned;
                        isErased = false;
                        readIdents = _1942_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1211;
                        bool _out1212;
                        bool _out1213;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _1938_b), _1938_b, _657_toTpe), selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                        s = _out1211;
                        isOwned = _out1212;
                        isErased = _out1213;
                        readIdents = _out1214;
                      }
                    }
                  }
                } else if (_source62.is_Nullable) {
                  DAST._IType _1945___mcc_h1033 = _source62.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1946_recursiveGen;
                    bool _1947_recOwned;
                    bool _1948_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1949_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1215;
                    bool _out1216;
                    bool _out1217;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                    _1946_recursiveGen = _out1215;
                    _1947_recOwned = _out1216;
                    _1948_recErased = _out1217;
                    _1949_recIdents = _out1218;
                    if (!(_1947_recOwned)) {
                      _1946_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1946_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1946_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1948_recErased;
                    readIdents = _1949_recIdents;
                  }
                } else if (_source62.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1950___mcc_h1035 = _source62.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1951_recursiveGen;
                    bool _1952_recOwned;
                    bool _1953_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1954_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1219;
                    bool _out1220;
                    bool _out1221;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1219, out _out1220, out _out1221, out _out1222);
                    _1951_recursiveGen = _out1219;
                    _1952_recOwned = _out1220;
                    _1953_recErased = _out1221;
                    _1954_recIdents = _out1222;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1951_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1952_recOwned;
                    isErased = _1953_recErased;
                    readIdents = _1954_recIdents;
                  }
                } else if (_source62.is_Array) {
                  DAST._IType _1955___mcc_h1037 = _source62.dtor_element;
                  BigInteger _1956___mcc_h1038 = _source62.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1957_recursiveGen;
                    bool _1958_recOwned;
                    bool _1959_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1960_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1223;
                    bool _out1224;
                    bool _out1225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1223, out _out1224, out _out1225, out _out1226);
                    _1957_recursiveGen = _out1223;
                    _1958_recOwned = _out1224;
                    _1959_recErased = _out1225;
                    _1960_recIdents = _out1226;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1957_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1958_recOwned;
                    isErased = _1959_recErased;
                    readIdents = _1960_recIdents;
                  }
                } else if (_source62.is_Seq) {
                  DAST._IType _1961___mcc_h1041 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1962_recursiveGen;
                    bool _1963_recOwned;
                    bool _1964_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1965_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1227;
                    bool _out1228;
                    bool _out1229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1230;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1227, out _out1228, out _out1229, out _out1230);
                    _1962_recursiveGen = _out1227;
                    _1963_recOwned = _out1228;
                    _1964_recErased = _out1229;
                    _1965_recIdents = _out1230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1963_recOwned;
                    isErased = _1964_recErased;
                    readIdents = _1965_recIdents;
                  }
                } else if (_source62.is_Set) {
                  DAST._IType _1966___mcc_h1043 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1967_recursiveGen;
                    bool _1968_recOwned;
                    bool _1969_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1970_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1231;
                    bool _out1232;
                    bool _out1233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1234;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1231, out _out1232, out _out1233, out _out1234);
                    _1967_recursiveGen = _out1231;
                    _1968_recOwned = _out1232;
                    _1969_recErased = _out1233;
                    _1970_recIdents = _out1234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1967_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1968_recOwned;
                    isErased = _1969_recErased;
                    readIdents = _1970_recIdents;
                  }
                } else if (_source62.is_Multiset) {
                  DAST._IType _1971___mcc_h1045 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1972_recursiveGen;
                    bool _1973_recOwned;
                    bool _1974_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1975_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1235;
                    bool _out1236;
                    bool _out1237;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1235, out _out1236, out _out1237, out _out1238);
                    _1972_recursiveGen = _out1235;
                    _1973_recOwned = _out1236;
                    _1974_recErased = _out1237;
                    _1975_recIdents = _out1238;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1972_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1973_recOwned;
                    isErased = _1974_recErased;
                    readIdents = _1975_recIdents;
                  }
                } else if (_source62.is_Map) {
                  DAST._IType _1976___mcc_h1047 = _source62.dtor_key;
                  DAST._IType _1977___mcc_h1048 = _source62.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1978_recursiveGen;
                    bool _1979_recOwned;
                    bool _1980_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1981_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1239;
                    bool _out1240;
                    bool _out1241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1239, out _out1240, out _out1241, out _out1242);
                    _1978_recursiveGen = _out1239;
                    _1979_recOwned = _out1240;
                    _1980_recErased = _out1241;
                    _1981_recIdents = _out1242;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1978_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1979_recOwned;
                    isErased = _1980_recErased;
                    readIdents = _1981_recIdents;
                  }
                } else if (_source62.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1982___mcc_h1051 = _source62.dtor_args;
                  DAST._IType _1983___mcc_h1052 = _source62.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1984_recursiveGen;
                    bool _1985_recOwned;
                    bool _1986_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1987_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1243;
                    bool _out1244;
                    bool _out1245;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1246;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1243, out _out1244, out _out1245, out _out1246);
                    _1984_recursiveGen = _out1243;
                    _1985_recOwned = _out1244;
                    _1986_recErased = _out1245;
                    _1987_recIdents = _out1246;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1984_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1985_recOwned;
                    isErased = _1986_recErased;
                    readIdents = _1987_recIdents;
                  }
                } else if (_source62.is_Primitive) {
                  DAST._IPrimitive _1988___mcc_h1055 = _source62.dtor_Primitive_a0;
                  DAST._IPrimitive _source64 = _1988___mcc_h1055;
                  if (_source64.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1989_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1247;
                      _out1247 = DCOMP.COMP.GenType(_658_fromTpe, true, false);
                      _1989_rhsType = _out1247;
                      Dafny.ISequence<Dafny.Rune> _1990_recursiveGen;
                      bool _1991___v58;
                      bool _1992___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1993_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1248;
                      bool _out1249;
                      bool _out1250;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, true, out _out1248, out _out1249, out _out1250, out _out1251);
                      _1990_recursiveGen = _out1248;
                      _1991___v58 = _out1249;
                      _1992___v59 = _out1250;
                      _1993_recIdents = _out1251;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _1990_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1993_recIdents;
                    }
                  } else if (_source64.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1994_recursiveGen;
                      bool _1995_recOwned;
                      bool _1996_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1997_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1252;
                      bool _out1253;
                      bool _out1254;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                      _1994_recursiveGen = _out1252;
                      _1995_recOwned = _out1253;
                      _1996_recErased = _out1254;
                      _1997_recIdents = _out1255;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1994_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1995_recOwned;
                      isErased = _1996_recErased;
                      readIdents = _1997_recIdents;
                    }
                  } else if (_source64.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1998_recursiveGen;
                      bool _1999_recOwned;
                      bool _2000_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2001_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1256;
                      bool _out1257;
                      bool _out1258;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1256, out _out1257, out _out1258, out _out1259);
                      _1998_recursiveGen = _out1256;
                      _1999_recOwned = _out1257;
                      _2000_recErased = _out1258;
                      _2001_recIdents = _out1259;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1999_recOwned;
                      isErased = _2000_recErased;
                      readIdents = _2001_recIdents;
                    }
                  } else if (_source64.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2002_recursiveGen;
                      bool _2003_recOwned;
                      bool _2004_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2005_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1260;
                      bool _out1261;
                      bool _out1262;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1263;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1260, out _out1261, out _out1262, out _out1263);
                      _2002_recursiveGen = _out1260;
                      _2003_recOwned = _out1261;
                      _2004_recErased = _out1262;
                      _2005_recIdents = _out1263;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2002_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2003_recOwned;
                      isErased = _2004_recErased;
                      readIdents = _2005_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2006_recursiveGen;
                      bool _2007_recOwned;
                      bool _2008_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2009_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1264;
                      bool _out1265;
                      bool _out1266;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1264, out _out1265, out _out1266, out _out1267);
                      _2006_recursiveGen = _out1264;
                      _2007_recOwned = _out1265;
                      _2008_recErased = _out1266;
                      _2009_recIdents = _out1267;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2006_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2007_recOwned;
                      isErased = _2008_recErased;
                      readIdents = _2009_recIdents;
                    }
                  }
                } else if (_source62.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2010___mcc_h1057 = _source62.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2011_recursiveGen;
                    bool _2012_recOwned;
                    bool _2013_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2014_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1268;
                    bool _out1269;
                    bool _out1270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1268, out _out1269, out _out1270, out _out1271);
                    _2011_recursiveGen = _out1268;
                    _2012_recOwned = _out1269;
                    _2013_recErased = _out1270;
                    _2014_recIdents = _out1271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2011_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2012_recOwned;
                    isErased = _2013_recErased;
                    readIdents = _2014_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2015___mcc_h1059 = _source62.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2016_recursiveGen;
                    bool _2017_recOwned;
                    bool _2018_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2019_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1272;
                    bool _out1273;
                    bool _out1274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1275;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1272, out _out1273, out _out1274, out _out1275);
                    _2016_recursiveGen = _out1272;
                    _2017_recOwned = _out1273;
                    _2018_recErased = _out1274;
                    _2019_recIdents = _out1275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2016_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2017_recOwned;
                    isErased = _2018_recErased;
                    readIdents = _2019_recIdents;
                  }
                }
              }
            } else if (_source27.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2020___mcc_h1061 = _source27.dtor_Passthrough_a0;
              DAST._IType _source65 = _665___mcc_h306;
              if (_source65.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2021___mcc_h1065 = _source65.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2022___mcc_h1066 = _source65.dtor_typeArgs;
                DAST._IResolvedType _2023___mcc_h1067 = _source65.dtor_resolved;
                DAST._IResolvedType _source66 = _2023___mcc_h1067;
                if (_source66.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2024___mcc_h1071 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2025_recursiveGen;
                    bool _2026_recOwned;
                    bool _2027_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2028_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1276;
                    bool _out1277;
                    bool _out1278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1279;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1276, out _out1277, out _out1278, out _out1279);
                    _2025_recursiveGen = _out1276;
                    _2026_recOwned = _out1277;
                    _2027_recErased = _out1278;
                    _2028_recIdents = _out1279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2025_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2026_recOwned;
                    isErased = _2027_recErased;
                    readIdents = _2028_recIdents;
                  }
                } else if (_source66.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2029___mcc_h1073 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2030_recursiveGen;
                    bool _2031_recOwned;
                    bool _2032_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2033_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1280;
                    bool _out1281;
                    bool _out1282;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1283;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1280, out _out1281, out _out1282, out _out1283);
                    _2030_recursiveGen = _out1280;
                    _2031_recOwned = _out1281;
                    _2032_recErased = _out1282;
                    _2033_recIdents = _out1283;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2030_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2031_recOwned;
                    isErased = _2032_recErased;
                    readIdents = _2033_recIdents;
                  }
                } else {
                  DAST._IType _2034___mcc_h1075 = _source66.dtor_Newtype_a0;
                  DAST._IType _2035_b = _2034___mcc_h1075;
                  {
                    if (object.Equals(_658_fromTpe, _2035_b)) {
                      Dafny.ISequence<Dafny.Rune> _2036_recursiveGen;
                      bool _2037_recOwned;
                      bool _2038_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2039_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1284;
                      bool _out1285;
                      bool _out1286;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1287;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1284, out _out1285, out _out1286, out _out1287);
                      _2036_recursiveGen = _out1284;
                      _2037_recOwned = _out1285;
                      _2038_recErased = _out1286;
                      _2039_recIdents = _out1287;
                      Dafny.ISequence<Dafny.Rune> _2040_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1288;
                      _out1288 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                      _2040_rhsType = _out1288;
                      Dafny.ISequence<Dafny.Rune> _2041_uneraseFn;
                      _2041_uneraseFn = ((_2037_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2040_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2041_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2036_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2037_recOwned;
                      isErased = false;
                      readIdents = _2039_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1289;
                      bool _out1290;
                      bool _out1291;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _2035_b), _2035_b, _657_toTpe), selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                      s = _out1289;
                      isOwned = _out1290;
                      isErased = _out1291;
                      readIdents = _out1292;
                    }
                  }
                }
              } else if (_source65.is_Nullable) {
                DAST._IType _2042___mcc_h1077 = _source65.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2043_recursiveGen;
                  bool _2044_recOwned;
                  bool _2045_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2046_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1293;
                  bool _out1294;
                  bool _out1295;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                  _2043_recursiveGen = _out1293;
                  _2044_recOwned = _out1294;
                  _2045_recErased = _out1295;
                  _2046_recIdents = _out1296;
                  if (!(_2044_recOwned)) {
                    _2043_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2043_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2043_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2045_recErased;
                  readIdents = _2046_recIdents;
                }
              } else if (_source65.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2047___mcc_h1079 = _source65.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2048_recursiveGen;
                  bool _2049_recOwned;
                  bool _2050_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2051_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1297;
                  bool _out1298;
                  bool _out1299;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1297, out _out1298, out _out1299, out _out1300);
                  _2048_recursiveGen = _out1297;
                  _2049_recOwned = _out1298;
                  _2050_recErased = _out1299;
                  _2051_recIdents = _out1300;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2048_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2049_recOwned;
                  isErased = _2050_recErased;
                  readIdents = _2051_recIdents;
                }
              } else if (_source65.is_Array) {
                DAST._IType _2052___mcc_h1081 = _source65.dtor_element;
                BigInteger _2053___mcc_h1082 = _source65.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2054_recursiveGen;
                  bool _2055_recOwned;
                  bool _2056_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2057_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1301;
                  bool _out1302;
                  bool _out1303;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1304;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1301, out _out1302, out _out1303, out _out1304);
                  _2054_recursiveGen = _out1301;
                  _2055_recOwned = _out1302;
                  _2056_recErased = _out1303;
                  _2057_recIdents = _out1304;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2054_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2055_recOwned;
                  isErased = _2056_recErased;
                  readIdents = _2057_recIdents;
                }
              } else if (_source65.is_Seq) {
                DAST._IType _2058___mcc_h1085 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2059_recursiveGen;
                  bool _2060_recOwned;
                  bool _2061_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2062_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1305;
                  bool _out1306;
                  bool _out1307;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1305, out _out1306, out _out1307, out _out1308);
                  _2059_recursiveGen = _out1305;
                  _2060_recOwned = _out1306;
                  _2061_recErased = _out1307;
                  _2062_recIdents = _out1308;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2059_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2060_recOwned;
                  isErased = _2061_recErased;
                  readIdents = _2062_recIdents;
                }
              } else if (_source65.is_Set) {
                DAST._IType _2063___mcc_h1087 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2064_recursiveGen;
                  bool _2065_recOwned;
                  bool _2066_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2067_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1309;
                  bool _out1310;
                  bool _out1311;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1312;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1309, out _out1310, out _out1311, out _out1312);
                  _2064_recursiveGen = _out1309;
                  _2065_recOwned = _out1310;
                  _2066_recErased = _out1311;
                  _2067_recIdents = _out1312;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2064_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2065_recOwned;
                  isErased = _2066_recErased;
                  readIdents = _2067_recIdents;
                }
              } else if (_source65.is_Multiset) {
                DAST._IType _2068___mcc_h1089 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2069_recursiveGen;
                  bool _2070_recOwned;
                  bool _2071_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2072_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1313;
                  bool _out1314;
                  bool _out1315;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1316;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1313, out _out1314, out _out1315, out _out1316);
                  _2069_recursiveGen = _out1313;
                  _2070_recOwned = _out1314;
                  _2071_recErased = _out1315;
                  _2072_recIdents = _out1316;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2069_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2070_recOwned;
                  isErased = _2071_recErased;
                  readIdents = _2072_recIdents;
                }
              } else if (_source65.is_Map) {
                DAST._IType _2073___mcc_h1091 = _source65.dtor_key;
                DAST._IType _2074___mcc_h1092 = _source65.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2075_recursiveGen;
                  bool _2076_recOwned;
                  bool _2077_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2078_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1317;
                  bool _out1318;
                  bool _out1319;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1317, out _out1318, out _out1319, out _out1320);
                  _2075_recursiveGen = _out1317;
                  _2076_recOwned = _out1318;
                  _2077_recErased = _out1319;
                  _2078_recIdents = _out1320;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2075_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2076_recOwned;
                  isErased = _2077_recErased;
                  readIdents = _2078_recIdents;
                }
              } else if (_source65.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2079___mcc_h1095 = _source65.dtor_args;
                DAST._IType _2080___mcc_h1096 = _source65.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2081_recursiveGen;
                  bool _2082_recOwned;
                  bool _2083_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2084_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1321;
                  bool _out1322;
                  bool _out1323;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1324;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1321, out _out1322, out _out1323, out _out1324);
                  _2081_recursiveGen = _out1321;
                  _2082_recOwned = _out1322;
                  _2083_recErased = _out1323;
                  _2084_recIdents = _out1324;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2081_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2082_recOwned;
                  isErased = _2083_recErased;
                  readIdents = _2084_recIdents;
                }
              } else if (_source65.is_Primitive) {
                DAST._IPrimitive _2085___mcc_h1099 = _source65.dtor_Primitive_a0;
                DAST._IPrimitive _source67 = _2085___mcc_h1099;
                if (_source67.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2086_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1325;
                    _out1325 = DCOMP.COMP.GenType(_658_fromTpe, true, false);
                    _2086_rhsType = _out1325;
                    Dafny.ISequence<Dafny.Rune> _2087_recursiveGen;
                    bool _2088___v54;
                    bool _2089___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2090_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1326;
                    bool _out1327;
                    bool _out1328;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, true, out _out1326, out _out1327, out _out1328, out _out1329);
                    _2087_recursiveGen = _out1326;
                    _2088___v54 = _out1327;
                    _2089___v55 = _out1328;
                    _2090_recIdents = _out1329;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2087_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2090_recIdents;
                  }
                } else if (_source67.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2091_recursiveGen;
                    bool _2092_recOwned;
                    bool _2093_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2094_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1330;
                    bool _out1331;
                    bool _out1332;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                    _2091_recursiveGen = _out1330;
                    _2092_recOwned = _out1331;
                    _2093_recErased = _out1332;
                    _2094_recIdents = _out1333;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2091_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2092_recOwned;
                    isErased = _2093_recErased;
                    readIdents = _2094_recIdents;
                  }
                } else if (_source67.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2095_recursiveGen;
                    bool _2096_recOwned;
                    bool _2097_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2098_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1334;
                    bool _out1335;
                    bool _out1336;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1334, out _out1335, out _out1336, out _out1337);
                    _2095_recursiveGen = _out1334;
                    _2096_recOwned = _out1335;
                    _2097_recErased = _out1336;
                    _2098_recIdents = _out1337;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2095_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2096_recOwned;
                    isErased = _2097_recErased;
                    readIdents = _2098_recIdents;
                  }
                } else if (_source67.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2099_recursiveGen;
                    bool _2100_recOwned;
                    bool _2101_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2102_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1338;
                    bool _out1339;
                    bool _out1340;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1341;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1338, out _out1339, out _out1340, out _out1341);
                    _2099_recursiveGen = _out1338;
                    _2100_recOwned = _out1339;
                    _2101_recErased = _out1340;
                    _2102_recIdents = _out1341;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2099_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2100_recOwned;
                    isErased = _2101_recErased;
                    readIdents = _2102_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2103_recursiveGen;
                    bool _2104_recOwned;
                    bool _2105_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2106_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1342;
                    bool _out1343;
                    bool _out1344;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1345;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1342, out _out1343, out _out1344, out _out1345);
                    _2103_recursiveGen = _out1342;
                    _2104_recOwned = _out1343;
                    _2105_recErased = _out1344;
                    _2106_recIdents = _out1345;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2103_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2104_recOwned;
                    isErased = _2105_recErased;
                    readIdents = _2106_recIdents;
                  }
                }
              } else if (_source65.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2107___mcc_h1101 = _source65.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2108_recursiveGen;
                  bool _2109___v62;
                  bool _2110___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2111_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1346;
                  bool _out1347;
                  bool _out1348;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1349;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, true, out _out1346, out _out1347, out _out1348, out _out1349);
                  _2108_recursiveGen = _out1346;
                  _2109___v62 = _out1347;
                  _2110___v63 = _out1348;
                  _2111_recIdents = _out1349;
                  Dafny.ISequence<Dafny.Rune> _2112_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1350;
                  _out1350 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                  _2112_toTpeGen = _out1350;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2108_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2112_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2111_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2113___mcc_h1103 = _source65.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2114_recursiveGen;
                  bool _2115_recOwned;
                  bool _2116_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2117_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1351;
                  bool _out1352;
                  bool _out1353;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                  _2114_recursiveGen = _out1351;
                  _2115_recOwned = _out1352;
                  _2116_recErased = _out1353;
                  _2117_recIdents = _out1354;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2114_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2115_recOwned;
                  isErased = _2116_recErased;
                  readIdents = _2117_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2118___mcc_h1105 = _source27.dtor_TypeArg_a0;
              DAST._IType _source68 = _665___mcc_h306;
              if (_source68.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2119___mcc_h1109 = _source68.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2120___mcc_h1110 = _source68.dtor_typeArgs;
                DAST._IResolvedType _2121___mcc_h1111 = _source68.dtor_resolved;
                DAST._IResolvedType _source69 = _2121___mcc_h1111;
                if (_source69.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2122___mcc_h1115 = _source69.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2123_recursiveGen;
                    bool _2124_recOwned;
                    bool _2125_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2126_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1355;
                    bool _out1356;
                    bool _out1357;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1355, out _out1356, out _out1357, out _out1358);
                    _2123_recursiveGen = _out1355;
                    _2124_recOwned = _out1356;
                    _2125_recErased = _out1357;
                    _2126_recIdents = _out1358;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2123_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2124_recOwned;
                    isErased = _2125_recErased;
                    readIdents = _2126_recIdents;
                  }
                } else if (_source69.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2127___mcc_h1117 = _source69.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2128_recursiveGen;
                    bool _2129_recOwned;
                    bool _2130_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2131_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1359;
                    bool _out1360;
                    bool _out1361;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1362;
                    DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1359, out _out1360, out _out1361, out _out1362);
                    _2128_recursiveGen = _out1359;
                    _2129_recOwned = _out1360;
                    _2130_recErased = _out1361;
                    _2131_recIdents = _out1362;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2128_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2129_recOwned;
                    isErased = _2130_recErased;
                    readIdents = _2131_recIdents;
                  }
                } else {
                  DAST._IType _2132___mcc_h1119 = _source69.dtor_Newtype_a0;
                  DAST._IType _2133_b = _2132___mcc_h1119;
                  {
                    if (object.Equals(_658_fromTpe, _2133_b)) {
                      Dafny.ISequence<Dafny.Rune> _2134_recursiveGen;
                      bool _2135_recOwned;
                      bool _2136_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2137_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1363;
                      bool _out1364;
                      bool _out1365;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1366;
                      DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1363, out _out1364, out _out1365, out _out1366);
                      _2134_recursiveGen = _out1363;
                      _2135_recOwned = _out1364;
                      _2136_recErased = _out1365;
                      _2137_recIdents = _out1366;
                      Dafny.ISequence<Dafny.Rune> _2138_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1367;
                      _out1367 = DCOMP.COMP.GenType(_657_toTpe, true, false);
                      _2138_rhsType = _out1367;
                      Dafny.ISequence<Dafny.Rune> _2139_uneraseFn;
                      _2139_uneraseFn = ((_2135_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2138_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2139_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2134_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2135_recOwned;
                      isErased = false;
                      readIdents = _2137_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1368;
                      bool _out1369;
                      bool _out1370;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_659_expr, _658_fromTpe, _2133_b), _2133_b, _657_toTpe), selfIdent, @params, mustOwn, out _out1368, out _out1369, out _out1370, out _out1371);
                      s = _out1368;
                      isOwned = _out1369;
                      isErased = _out1370;
                      readIdents = _out1371;
                    }
                  }
                }
              } else if (_source68.is_Nullable) {
                DAST._IType _2140___mcc_h1121 = _source68.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2141_recursiveGen;
                  bool _2142_recOwned;
                  bool _2143_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2144_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1372;
                  bool _out1373;
                  bool _out1374;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1375;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1372, out _out1373, out _out1374, out _out1375);
                  _2141_recursiveGen = _out1372;
                  _2142_recOwned = _out1373;
                  _2143_recErased = _out1374;
                  _2144_recIdents = _out1375;
                  if (!(_2142_recOwned)) {
                    _2141_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2141_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2141_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2143_recErased;
                  readIdents = _2144_recIdents;
                }
              } else if (_source68.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2145___mcc_h1123 = _source68.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2146_recursiveGen;
                  bool _2147_recOwned;
                  bool _2148_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2149_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1376;
                  bool _out1377;
                  bool _out1378;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1376, out _out1377, out _out1378, out _out1379);
                  _2146_recursiveGen = _out1376;
                  _2147_recOwned = _out1377;
                  _2148_recErased = _out1378;
                  _2149_recIdents = _out1379;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2146_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2147_recOwned;
                  isErased = _2148_recErased;
                  readIdents = _2149_recIdents;
                }
              } else if (_source68.is_Array) {
                DAST._IType _2150___mcc_h1125 = _source68.dtor_element;
                BigInteger _2151___mcc_h1126 = _source68.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2152_recursiveGen;
                  bool _2153_recOwned;
                  bool _2154_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2155_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1380;
                  bool _out1381;
                  bool _out1382;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1383;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1380, out _out1381, out _out1382, out _out1383);
                  _2152_recursiveGen = _out1380;
                  _2153_recOwned = _out1381;
                  _2154_recErased = _out1382;
                  _2155_recIdents = _out1383;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2152_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2153_recOwned;
                  isErased = _2154_recErased;
                  readIdents = _2155_recIdents;
                }
              } else if (_source68.is_Seq) {
                DAST._IType _2156___mcc_h1129 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2157_recursiveGen;
                  bool _2158_recOwned;
                  bool _2159_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2160_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1384;
                  bool _out1385;
                  bool _out1386;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1387;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1384, out _out1385, out _out1386, out _out1387);
                  _2157_recursiveGen = _out1384;
                  _2158_recOwned = _out1385;
                  _2159_recErased = _out1386;
                  _2160_recIdents = _out1387;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2158_recOwned;
                  isErased = _2159_recErased;
                  readIdents = _2160_recIdents;
                }
              } else if (_source68.is_Set) {
                DAST._IType _2161___mcc_h1131 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2162_recursiveGen;
                  bool _2163_recOwned;
                  bool _2164_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2165_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1388;
                  bool _out1389;
                  bool _out1390;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1391;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1388, out _out1389, out _out1390, out _out1391);
                  _2162_recursiveGen = _out1388;
                  _2163_recOwned = _out1389;
                  _2164_recErased = _out1390;
                  _2165_recIdents = _out1391;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2162_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2163_recOwned;
                  isErased = _2164_recErased;
                  readIdents = _2165_recIdents;
                }
              } else if (_source68.is_Multiset) {
                DAST._IType _2166___mcc_h1133 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2167_recursiveGen;
                  bool _2168_recOwned;
                  bool _2169_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2170_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1392;
                  bool _out1393;
                  bool _out1394;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1395;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1392, out _out1393, out _out1394, out _out1395);
                  _2167_recursiveGen = _out1392;
                  _2168_recOwned = _out1393;
                  _2169_recErased = _out1394;
                  _2170_recIdents = _out1395;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2167_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2168_recOwned;
                  isErased = _2169_recErased;
                  readIdents = _2170_recIdents;
                }
              } else if (_source68.is_Map) {
                DAST._IType _2171___mcc_h1135 = _source68.dtor_key;
                DAST._IType _2172___mcc_h1136 = _source68.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2173_recursiveGen;
                  bool _2174_recOwned;
                  bool _2175_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2176_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1396;
                  bool _out1397;
                  bool _out1398;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1396, out _out1397, out _out1398, out _out1399);
                  _2173_recursiveGen = _out1396;
                  _2174_recOwned = _out1397;
                  _2175_recErased = _out1398;
                  _2176_recIdents = _out1399;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2173_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2174_recOwned;
                  isErased = _2175_recErased;
                  readIdents = _2176_recIdents;
                }
              } else if (_source68.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2177___mcc_h1139 = _source68.dtor_args;
                DAST._IType _2178___mcc_h1140 = _source68.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2179_recursiveGen;
                  bool _2180_recOwned;
                  bool _2181_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2182_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1400;
                  bool _out1401;
                  bool _out1402;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1400, out _out1401, out _out1402, out _out1403);
                  _2179_recursiveGen = _out1400;
                  _2180_recOwned = _out1401;
                  _2181_recErased = _out1402;
                  _2182_recIdents = _out1403;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2179_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2180_recOwned;
                  isErased = _2181_recErased;
                  readIdents = _2182_recIdents;
                }
              } else if (_source68.is_Primitive) {
                DAST._IPrimitive _2183___mcc_h1143 = _source68.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2184_recursiveGen;
                  bool _2185_recOwned;
                  bool _2186_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2187_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1404;
                  bool _out1405;
                  bool _out1406;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1407;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1404, out _out1405, out _out1406, out _out1407);
                  _2184_recursiveGen = _out1404;
                  _2185_recOwned = _out1405;
                  _2186_recErased = _out1406;
                  _2187_recIdents = _out1407;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2184_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2185_recOwned;
                  isErased = _2186_recErased;
                  readIdents = _2187_recIdents;
                }
              } else if (_source68.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2188___mcc_h1145 = _source68.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2189_recursiveGen;
                  bool _2190_recOwned;
                  bool _2191_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2192_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1408;
                  bool _out1409;
                  bool _out1410;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1411;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1408, out _out1409, out _out1410, out _out1411);
                  _2189_recursiveGen = _out1408;
                  _2190_recOwned = _out1409;
                  _2191_recErased = _out1410;
                  _2192_recIdents = _out1411;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2189_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2190_recOwned;
                  isErased = _2191_recErased;
                  readIdents = _2192_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2193___mcc_h1147 = _source68.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2194_recursiveGen;
                  bool _2195_recOwned;
                  bool _2196_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2197_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1412;
                  bool _out1413;
                  bool _out1414;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1415;
                  DCOMP.COMP.GenExpr(_659_expr, selfIdent, @params, mustOwn, out _out1412, out _out1413, out _out1414, out _out1415);
                  _2194_recursiveGen = _out1412;
                  _2195_recOwned = _out1413;
                  _2196_recErased = _out1414;
                  _2197_recIdents = _out1415;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2194_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2195_recOwned;
                  isErased = _2196_recErased;
                  readIdents = _2197_recIdents;
                }
              }
            }
          }
        }
      } else if (_source20.is_SeqConstruct) {
        DAST._IExpression _2198___mcc_h26 = _source20.dtor_length;
        DAST._IExpression _2199___mcc_h27 = _source20.dtor_elem;
        DAST._IExpression _2200_expr = _2199___mcc_h27;
        DAST._IExpression _2201_length = _2198___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2202_recursiveGen;
          bool _2203___v65;
          bool _2204_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2205_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1416;
          bool _out1417;
          bool _out1418;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1419;
          DCOMP.COMP.GenExpr(_2200_expr, selfIdent, @params, true, out _out1416, out _out1417, out _out1418, out _out1419);
          _2202_recursiveGen = _out1416;
          _2203___v65 = _out1417;
          _2204_eErased = _out1418;
          _2205_recIdents = _out1419;
          Dafny.ISequence<Dafny.Rune> _2206_lengthGen;
          bool _2207___v66;
          bool _2208_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2209_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1420;
          bool _out1421;
          bool _out1422;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1423;
          DCOMP.COMP.GenExpr(_2201_length, selfIdent, @params, true, out _out1420, out _out1421, out _out1422, out _out1423);
          _2206_lengthGen = _out1420;
          _2207___v66 = _out1421;
          _2208_lengthErased = _out1422;
          _2209_lengthIdents = _out1423;
          if (!(_2208_lengthErased)) {
            _2206_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2206_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2202_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2206_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2205_recIdents, _2209_lengthIdents);
          isOwned = true;
          isErased = _2204_eErased;
        }
      } else if (_source20.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2210___mcc_h28 = _source20.dtor_elements;
        DAST._IType _2211___mcc_h29 = _source20.dtor_typ;
        DAST._IType _2212_typ = _2211___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2213_exprs = _2210___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2214_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1424;
          _out1424 = DCOMP.COMP.GenType(_2212_typ, false, false);
          _2214_genTpe = _out1424;
          BigInteger _2215_i;
          _2215_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2215_i = BigInteger.Zero;
          while ((_2215_i) < (new BigInteger((_2213_exprs).Count))) {
            if ((_2215_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2216_recursiveGen;
            bool _2217___v67;
            bool _2218_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2219_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1425;
            bool _out1426;
            bool _out1427;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
            DCOMP.COMP.GenExpr((_2213_exprs).Select(_2215_i), selfIdent, @params, true, out _out1425, out _out1426, out _out1427, out _out1428);
            _2216_recursiveGen = _out1425;
            _2217___v67 = _out1426;
            _2218_isErased = _out1427;
            _2219_recIdents = _out1428;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2219_recIdents);
            if (_2218_isErased) {
              _2216_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2216_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2216_recursiveGen);
            _2215_i = (_2215_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2214_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2220___mcc_h30 = _source20.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2221_exprs = _2220___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2222_generatedValues;
          _2222_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2223_i;
          _2223_i = BigInteger.Zero;
          bool _2224_allErased;
          _2224_allErased = true;
          while ((_2223_i) < (new BigInteger((_2221_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2225_recursiveGen;
            bool _2226___v68;
            bool _2227_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2228_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1429;
            bool _out1430;
            bool _out1431;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
            DCOMP.COMP.GenExpr((_2221_exprs).Select(_2223_i), selfIdent, @params, true, out _out1429, out _out1430, out _out1431, out _out1432);
            _2225_recursiveGen = _out1429;
            _2226___v68 = _out1430;
            _2227_isErased = _out1431;
            _2228_recIdents = _out1432;
            _2224_allErased = (_2224_allErased) && (_2227_isErased);
            _2222_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2222_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2225_recursiveGen, _2227_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2228_recIdents);
            _2223_i = (_2223_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2223_i = BigInteger.Zero;
          while ((_2223_i) < (new BigInteger((_2222_generatedValues).Count))) {
            if ((_2223_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2229_gen;
            _2229_gen = ((_2222_generatedValues).Select(_2223_i)).dtor__0;
            if ((((_2222_generatedValues).Select(_2223_i)).dtor__1) && (!(_2224_allErased))) {
              _2229_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2229_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2229_gen);
            _2223_i = (_2223_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2224_allErased;
        }
      } else if (_source20.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2230___mcc_h31 = _source20.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2231_mapElems = _2230___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2232_generatedValues;
          _2232_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2233_i;
          _2233_i = BigInteger.Zero;
          bool _2234_allErased;
          _2234_allErased = true;
          while ((_2233_i) < (new BigInteger((_2231_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2235_recursiveGenKey;
            bool _2236___v69;
            bool _2237_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2238_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1433;
            bool _out1434;
            bool _out1435;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
            DCOMP.COMP.GenExpr(((_2231_mapElems).Select(_2233_i)).dtor__0, selfIdent, @params, true, out _out1433, out _out1434, out _out1435, out _out1436);
            _2235_recursiveGenKey = _out1433;
            _2236___v69 = _out1434;
            _2237_isErasedKey = _out1435;
            _2238_recIdentsKey = _out1436;
            Dafny.ISequence<Dafny.Rune> _2239_recursiveGenValue;
            bool _2240___v70;
            bool _2241_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2242_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1437;
            bool _out1438;
            bool _out1439;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1440;
            DCOMP.COMP.GenExpr(((_2231_mapElems).Select(_2233_i)).dtor__1, selfIdent, @params, true, out _out1437, out _out1438, out _out1439, out _out1440);
            _2239_recursiveGenValue = _out1437;
            _2240___v70 = _out1438;
            _2241_isErasedValue = _out1439;
            _2242_recIdentsValue = _out1440;
            _2234_allErased = ((_2234_allErased) && (_2237_isErasedKey)) && (_2241_isErasedValue);
            _2232_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2232_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2235_recursiveGenKey, _2239_recursiveGenValue, _2237_isErasedKey, _2241_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2238_recIdentsKey), _2242_recIdentsValue);
            _2233_i = (_2233_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2233_i = BigInteger.Zero;
          while ((_2233_i) < (new BigInteger((_2232_generatedValues).Count))) {
            if ((_2233_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2243_genKey;
            _2243_genKey = ((_2232_generatedValues).Select(_2233_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _2244_genValue;
            _2244_genValue = ((_2232_generatedValues).Select(_2233_i)).dtor__1;
            if ((((_2232_generatedValues).Select(_2233_i)).dtor__2) && (!(_2234_allErased))) {
              _2243_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2243_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2232_generatedValues).Select(_2233_i)).dtor__3) && (!(_2234_allErased))) {
              _2244_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2244_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2243_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2244_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2233_i = (_2233_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2234_allErased;
        }
      } else if (_source20.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source70 = selfIdent;
          if (_source70.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2245___mcc_h1149 = _source70.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2246_id = _2245___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_2246_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_2246_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2246_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2246_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source20.is_Ite) {
        DAST._IExpression _2247___mcc_h32 = _source20.dtor_cond;
        DAST._IExpression _2248___mcc_h33 = _source20.dtor_thn;
        DAST._IExpression _2249___mcc_h34 = _source20.dtor_els;
        DAST._IExpression _2250_f = _2249___mcc_h34;
        DAST._IExpression _2251_t = _2248___mcc_h33;
        DAST._IExpression _2252_cond = _2247___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _2253_condString;
          bool _2254___v71;
          bool _2255_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2256_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1441;
          bool _out1442;
          bool _out1443;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
          DCOMP.COMP.GenExpr(_2252_cond, selfIdent, @params, true, out _out1441, out _out1442, out _out1443, out _out1444);
          _2253_condString = _out1441;
          _2254___v71 = _out1442;
          _2255_condErased = _out1443;
          _2256_recIdentsCond = _out1444;
          if (!(_2255_condErased)) {
            _2253_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2253_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _2257___v72;
          bool _2258_tHasToBeOwned;
          bool _2259___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2260___v74;
          Dafny.ISequence<Dafny.Rune> _out1445;
          bool _out1446;
          bool _out1447;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1448;
          DCOMP.COMP.GenExpr(_2251_t, selfIdent, @params, mustOwn, out _out1445, out _out1446, out _out1447, out _out1448);
          _2257___v72 = _out1445;
          _2258_tHasToBeOwned = _out1446;
          _2259___v73 = _out1447;
          _2260___v74 = _out1448;
          Dafny.ISequence<Dafny.Rune> _2261_fString;
          bool _2262_fOwned;
          bool _2263_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2264_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1449;
          bool _out1450;
          bool _out1451;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1452;
          DCOMP.COMP.GenExpr(_2250_f, selfIdent, @params, _2258_tHasToBeOwned, out _out1449, out _out1450, out _out1451, out _out1452);
          _2261_fString = _out1449;
          _2262_fOwned = _out1450;
          _2263_fErased = _out1451;
          _2264_recIdentsF = _out1452;
          Dafny.ISequence<Dafny.Rune> _2265_tString;
          bool _2266___v75;
          bool _2267_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2268_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1453;
          bool _out1454;
          bool _out1455;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1456;
          DCOMP.COMP.GenExpr(_2251_t, selfIdent, @params, _2262_fOwned, out _out1453, out _out1454, out _out1455, out _out1456);
          _2265_tString = _out1453;
          _2266___v75 = _out1454;
          _2267_tErased = _out1455;
          _2268_recIdentsT = _out1456;
          if ((!(_2263_fErased)) || (!(_2267_tErased))) {
            if (_2263_fErased) {
              _2261_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2261_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_2267_tErased) {
              _2265_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2265_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _2253_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2265_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _2261_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _2262_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2256_recIdentsCond, _2268_recIdentsT), _2264_recIdentsF);
          isErased = (_2263_fErased) || (_2267_tErased);
        }
      } else if (_source20.is_UnOp) {
        DAST._IUnaryOp _2269___mcc_h35 = _source20.dtor_unOp;
        DAST._IExpression _2270___mcc_h36 = _source20.dtor_expr;
        DAST._IUnaryOp _source71 = _2269___mcc_h35;
        if (_source71.is_Not) {
          DAST._IExpression _2271_e = _2270___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2272_recursiveGen;
            bool _2273___v76;
            bool _2274_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2275_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1457;
            bool _out1458;
            bool _out1459;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1460;
            DCOMP.COMP.GenExpr(_2271_e, selfIdent, @params, true, out _out1457, out _out1458, out _out1459, out _out1460);
            _2272_recursiveGen = _out1457;
            _2273___v76 = _out1458;
            _2274_recErased = _out1459;
            _2275_recIdents = _out1460;
            if (!(_2274_recErased)) {
              _2272_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2272_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2272_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2275_recIdents;
            isErased = true;
          }
        } else if (_source71.is_BitwiseNot) {
          DAST._IExpression _2276_e = _2270___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2277_recursiveGen;
            bool _2278___v77;
            bool _2279_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2280_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1461;
            bool _out1462;
            bool _out1463;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1464;
            DCOMP.COMP.GenExpr(_2276_e, selfIdent, @params, true, out _out1461, out _out1462, out _out1463, out _out1464);
            _2277_recursiveGen = _out1461;
            _2278___v77 = _out1462;
            _2279_recErased = _out1463;
            _2280_recIdents = _out1464;
            if (!(_2279_recErased)) {
              _2277_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2277_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _2277_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2280_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _2281_e = _2270___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2282_recursiveGen;
            bool _2283_recOwned;
            bool _2284_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2285_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1465;
            bool _out1466;
            bool _out1467;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1468;
            DCOMP.COMP.GenExpr(_2281_e, selfIdent, @params, false, out _out1465, out _out1466, out _out1467, out _out1468);
            _2282_recursiveGen = _out1465;
            _2283_recOwned = _out1466;
            _2284_recErased = _out1467;
            _2285_recIdents = _out1468;
            if (!(_2284_recErased)) {
              Dafny.ISequence<Dafny.Rune> _2286_eraseFn;
              _2286_eraseFn = ((_2283_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _2282_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2286_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2282_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2282_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _2285_recIdents;
            isErased = true;
          }
        }
      } else if (_source20.is_BinOp) {
        DAST._IBinOp _2287___mcc_h37 = _source20.dtor_op;
        DAST._IExpression _2288___mcc_h38 = _source20.dtor_left;
        DAST._IExpression _2289___mcc_h39 = _source20.dtor_right;
        DAST._IExpression _2290_r = _2289___mcc_h39;
        DAST._IExpression _2291_l = _2288___mcc_h38;
        DAST._IBinOp _2292_op = _2287___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _2293_left;
          bool _2294___v78;
          bool _2295_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2296_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1469;
          bool _out1470;
          bool _out1471;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1472;
          DCOMP.COMP.GenExpr(_2291_l, selfIdent, @params, true, out _out1469, out _out1470, out _out1471, out _out1472);
          _2293_left = _out1469;
          _2294___v78 = _out1470;
          _2295_leftErased = _out1471;
          _2296_recIdentsL = _out1472;
          Dafny.ISequence<Dafny.Rune> _2297_right;
          bool _2298___v79;
          bool _2299_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2300_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1473;
          bool _out1474;
          bool _out1475;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1476;
          DCOMP.COMP.GenExpr(_2290_r, selfIdent, @params, true, out _out1473, out _out1474, out _out1475, out _out1476);
          _2297_right = _out1473;
          _2298___v79 = _out1474;
          _2299_rightErased = _out1475;
          _2300_recIdentsR = _out1476;
          DAST._IBinOp _source72 = _2292_op;
          if (_source72.is_Eq) {
            bool _2301___mcc_h1150 = _source72.dtor_referential;
            bool _2302___mcc_h1151 = _source72.dtor_nullable;
            {
              if (!(_2295_leftErased)) {
                _2293_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2299_rightErased)) {
                _2297_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source73 = _2292_op;
              if (_source73.is_Eq) {
                bool _2303___mcc_h1160 = _source73.dtor_referential;
                bool _2304___mcc_h1161 = _source73.dtor_nullable;
                bool _2305_nullable = _2304___mcc_h1161;
                bool _2306_referential = _2303___mcc_h1160;
                {
                  if (_2306_referential) {
                    if (_2305_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2297_right);
                  }
                }
              } else if (_source73.is_Neq) {
                bool _2307___mcc_h1162 = _source73.dtor_referential;
                bool _2308___mcc_h1163 = _source73.dtor_nullable;
                bool _2309_nullable = _2308___mcc_h1163;
                bool _2310_referential = _2307___mcc_h1162;
                {
                  if (_2310_referential) {
                    if (_2309_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2297_right);
                  }
                }
              } else if (_source73.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2311___mcc_h1164 = _source73.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2312_op = _2311___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2312_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Neq) {
            bool _2313___mcc_h1154 = _source72.dtor_referential;
            bool _2314___mcc_h1155 = _source72.dtor_nullable;
            {
              if (!(_2295_leftErased)) {
                _2293_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2299_rightErased)) {
                _2297_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source74 = _2292_op;
              if (_source74.is_Eq) {
                bool _2315___mcc_h1165 = _source74.dtor_referential;
                bool _2316___mcc_h1166 = _source74.dtor_nullable;
                bool _2317_nullable = _2316___mcc_h1166;
                bool _2318_referential = _2315___mcc_h1165;
                {
                  if (_2318_referential) {
                    if (_2317_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2297_right);
                  }
                }
              } else if (_source74.is_Neq) {
                bool _2319___mcc_h1167 = _source74.dtor_referential;
                bool _2320___mcc_h1168 = _source74.dtor_nullable;
                bool _2321_nullable = _2320___mcc_h1168;
                bool _2322_referential = _2319___mcc_h1167;
                {
                  if (_2322_referential) {
                    if (_2321_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2297_right);
                  }
                }
              } else if (_source74.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2323___mcc_h1169 = _source74.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2324_op = _2323___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2324_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Div) {
            {
              if (!(_2295_leftErased)) {
                _2293_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2299_rightErased)) {
                _2297_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source75 = _2292_op;
              if (_source75.is_Eq) {
                bool _2325___mcc_h1170 = _source75.dtor_referential;
                bool _2326___mcc_h1171 = _source75.dtor_nullable;
                bool _2327_nullable = _2326___mcc_h1171;
                bool _2328_referential = _2325___mcc_h1170;
                {
                  if (_2328_referential) {
                    if (_2327_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2297_right);
                  }
                }
              } else if (_source75.is_Neq) {
                bool _2329___mcc_h1172 = _source75.dtor_referential;
                bool _2330___mcc_h1173 = _source75.dtor_nullable;
                bool _2331_nullable = _2330___mcc_h1173;
                bool _2332_referential = _2329___mcc_h1172;
                {
                  if (_2332_referential) {
                    if (_2331_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2297_right);
                  }
                }
              } else if (_source75.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2333___mcc_h1174 = _source75.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2334_op = _2333___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2334_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_EuclidianDiv) {
            {
              if (!(_2295_leftErased)) {
                _2293_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2299_rightErased)) {
                _2297_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source76 = _2292_op;
              if (_source76.is_Eq) {
                bool _2335___mcc_h1175 = _source76.dtor_referential;
                bool _2336___mcc_h1176 = _source76.dtor_nullable;
                bool _2337_nullable = _2336___mcc_h1176;
                bool _2338_referential = _2335___mcc_h1175;
                {
                  if (_2338_referential) {
                    if (_2337_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2297_right);
                  }
                }
              } else if (_source76.is_Neq) {
                bool _2339___mcc_h1177 = _source76.dtor_referential;
                bool _2340___mcc_h1178 = _source76.dtor_nullable;
                bool _2341_nullable = _2340___mcc_h1178;
                bool _2342_referential = _2339___mcc_h1177;
                {
                  if (_2342_referential) {
                    if (_2341_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2297_right);
                  }
                }
              } else if (_source76.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2343___mcc_h1179 = _source76.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2344_op = _2343___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2344_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Mod) {
            {
              if (!(_2295_leftErased)) {
                _2293_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2299_rightErased)) {
                _2297_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source77 = _2292_op;
              if (_source77.is_Eq) {
                bool _2345___mcc_h1180 = _source77.dtor_referential;
                bool _2346___mcc_h1181 = _source77.dtor_nullable;
                bool _2347_nullable = _2346___mcc_h1181;
                bool _2348_referential = _2345___mcc_h1180;
                {
                  if (_2348_referential) {
                    if (_2347_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2297_right);
                  }
                }
              } else if (_source77.is_Neq) {
                bool _2349___mcc_h1182 = _source77.dtor_referential;
                bool _2350___mcc_h1183 = _source77.dtor_nullable;
                bool _2351_nullable = _2350___mcc_h1183;
                bool _2352_referential = _2349___mcc_h1182;
                {
                  if (_2352_referential) {
                    if (_2351_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2297_right);
                  }
                }
              } else if (_source77.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2353___mcc_h1184 = _source77.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2354_op = _2353___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2354_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_EuclidianMod) {
            {
              if (!(_2295_leftErased)) {
                _2293_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2299_rightErased)) {
                _2297_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source78 = _2292_op;
              if (_source78.is_Eq) {
                bool _2355___mcc_h1185 = _source78.dtor_referential;
                bool _2356___mcc_h1186 = _source78.dtor_nullable;
                bool _2357_nullable = _2356___mcc_h1186;
                bool _2358_referential = _2355___mcc_h1185;
                {
                  if (_2358_referential) {
                    if (_2357_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2297_right);
                  }
                }
              } else if (_source78.is_Neq) {
                bool _2359___mcc_h1187 = _source78.dtor_referential;
                bool _2360___mcc_h1188 = _source78.dtor_nullable;
                bool _2361_nullable = _2360___mcc_h1188;
                bool _2362_referential = _2359___mcc_h1187;
                {
                  if (_2362_referential) {
                    if (_2361_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2297_right);
                  }
                }
              } else if (_source78.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2363___mcc_h1189 = _source78.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2364_op = _2363___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2364_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _2297_right);
            }
          } else if (_source72.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2297_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source72.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source72.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source72.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2365___mcc_h1158 = _source72.dtor_Passthrough_a0;
            {
              if (!(_2295_leftErased)) {
                _2293_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2299_rightErased)) {
                _2297_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source79 = _2292_op;
              if (_source79.is_Eq) {
                bool _2366___mcc_h1190 = _source79.dtor_referential;
                bool _2367___mcc_h1191 = _source79.dtor_nullable;
                bool _2368_nullable = _2367___mcc_h1191;
                bool _2369_referential = _2366___mcc_h1190;
                {
                  if (_2369_referential) {
                    if (_2368_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2297_right);
                  }
                }
              } else if (_source79.is_Neq) {
                bool _2370___mcc_h1192 = _source79.dtor_referential;
                bool _2371___mcc_h1193 = _source79.dtor_nullable;
                bool _2372_nullable = _2371___mcc_h1193;
                bool _2373_referential = _2370___mcc_h1192;
                {
                  if (_2373_referential) {
                    if (_2372_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2293_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2297_right);
                  }
                }
              } else if (_source79.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2374___mcc_h1194 = _source79.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2375_op = _2374___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2293_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2375_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2297_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2296_recIdentsL, _2300_recIdentsR);
          isErased = true;
        }
      } else if (_source20.is_ArrayLen) {
        DAST._IExpression _2376___mcc_h40 = _source20.dtor_expr;
        BigInteger _2377___mcc_h41 = _source20.dtor_dim;
        BigInteger _2378_dim = _2377___mcc_h41;
        DAST._IExpression _2379_expr = _2376___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _2380_recursiveGen;
          bool _2381___v81;
          bool _2382_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2383_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1477;
          bool _out1478;
          bool _out1479;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1480;
          DCOMP.COMP.GenExpr(_2379_expr, selfIdent, @params, true, out _out1477, out _out1478, out _out1479, out _out1480);
          _2380_recursiveGen = _out1477;
          _2381___v81 = _out1478;
          _2382_recErased = _out1479;
          _2383_recIdents = _out1480;
          if ((_2378_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2380_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _2384_i;
            _2384_i = BigInteger.One;
            while ((_2384_i) < (_2378_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _2384_i = (_2384_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2380_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _2383_recIdents;
          isErased = true;
        }
      } else if (_source20.is_Select) {
        DAST._IExpression _2385___mcc_h42 = _source20.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2386___mcc_h43 = _source20.dtor_field;
        bool _2387___mcc_h44 = _source20.dtor_isConstant;
        bool _2388___mcc_h45 = _source20.dtor_onDatatype;
        DAST._IExpression _source80 = _2385___mcc_h42;
        if (_source80.is_Literal) {
          DAST._ILiteral _2389___mcc_h46 = _source80.dtor_Literal_a0;
          bool _2390_isDatatype = _2388___mcc_h45;
          bool _2391_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2392_field = _2386___mcc_h43;
          DAST._IExpression _2393_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2394_onString;
            bool _2395_onOwned;
            bool _2396_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2397_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1481;
            bool _out1482;
            bool _out1483;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
            DCOMP.COMP.GenExpr(_2393_on, selfIdent, @params, false, out _out1481, out _out1482, out _out1483, out _out1484);
            _2394_onString = _out1481;
            _2395_onOwned = _out1482;
            _2396_onErased = _out1483;
            _2397_recIdents = _out1484;
            if ((_2390_isDatatype) || (_2391_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2394_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2392_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2391_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2394_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2392_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2397_recIdents;
          }
        } else if (_source80.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _2398___mcc_h48 = _source80.dtor_Ident_a0;
          bool _2399_isDatatype = _2388___mcc_h45;
          bool _2400_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2401_field = _2386___mcc_h43;
          DAST._IExpression _2402_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2403_onString;
            bool _2404_onOwned;
            bool _2405_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2406_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1485;
            bool _out1486;
            bool _out1487;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1488;
            DCOMP.COMP.GenExpr(_2402_on, selfIdent, @params, false, out _out1485, out _out1486, out _out1487, out _out1488);
            _2403_onString = _out1485;
            _2404_onOwned = _out1486;
            _2405_onErased = _out1487;
            _2406_recIdents = _out1488;
            if ((_2399_isDatatype) || (_2400_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2403_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2401_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2400_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2403_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2401_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2406_recIdents;
          }
        } else if (_source80.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2407___mcc_h50 = _source80.dtor_Companion_a0;
          bool _2408_isDatatype = _2388___mcc_h45;
          bool _2409_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2410_field = _2386___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2411_c = _2407___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _2412_onString;
            bool _2413_onOwned;
            bool _2414_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2415_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1489;
            bool _out1490;
            bool _out1491;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_2411_c), selfIdent, @params, false, out _out1489, out _out1490, out _out1491, out _out1492);
            _2412_onString = _out1489;
            _2413_onOwned = _out1490;
            _2414_onErased = _out1491;
            _2415_recIdents = _out1492;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2412_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2410_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _2415_recIdents;
          }
        } else if (_source80.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _2416___mcc_h52 = _source80.dtor_Tuple_a0;
          bool _2417_isDatatype = _2388___mcc_h45;
          bool _2418_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2419_field = _2386___mcc_h43;
          DAST._IExpression _2420_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2421_onString;
            bool _2422_onOwned;
            bool _2423_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2424_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1493;
            bool _out1494;
            bool _out1495;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1496;
            DCOMP.COMP.GenExpr(_2420_on, selfIdent, @params, false, out _out1493, out _out1494, out _out1495, out _out1496);
            _2421_onString = _out1493;
            _2422_onOwned = _out1494;
            _2423_onErased = _out1495;
            _2424_recIdents = _out1496;
            if ((_2417_isDatatype) || (_2418_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2421_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2419_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2418_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2421_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2419_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2424_recIdents;
          }
        } else if (_source80.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2425___mcc_h54 = _source80.dtor_path;
          Dafny.ISequence<DAST._IType> _2426___mcc_h55 = _source80.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2427___mcc_h56 = _source80.dtor_args;
          bool _2428_isDatatype = _2388___mcc_h45;
          bool _2429_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2430_field = _2386___mcc_h43;
          DAST._IExpression _2431_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2432_onString;
            bool _2433_onOwned;
            bool _2434_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2435_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1497;
            bool _out1498;
            bool _out1499;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1500;
            DCOMP.COMP.GenExpr(_2431_on, selfIdent, @params, false, out _out1497, out _out1498, out _out1499, out _out1500);
            _2432_onString = _out1497;
            _2433_onOwned = _out1498;
            _2434_onErased = _out1499;
            _2435_recIdents = _out1500;
            if ((_2428_isDatatype) || (_2429_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2432_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2430_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2429_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2432_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2430_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2435_recIdents;
          }
        } else if (_source80.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _2436___mcc_h60 = _source80.dtor_dims;
          DAST._IType _2437___mcc_h61 = _source80.dtor_typ;
          bool _2438_isDatatype = _2388___mcc_h45;
          bool _2439_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2440_field = _2386___mcc_h43;
          DAST._IExpression _2441_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2442_onString;
            bool _2443_onOwned;
            bool _2444_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2445_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1501;
            bool _out1502;
            bool _out1503;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1504;
            DCOMP.COMP.GenExpr(_2441_on, selfIdent, @params, false, out _out1501, out _out1502, out _out1503, out _out1504);
            _2442_onString = _out1501;
            _2443_onOwned = _out1502;
            _2444_onErased = _out1503;
            _2445_recIdents = _out1504;
            if ((_2438_isDatatype) || (_2439_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2442_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2440_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2439_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2442_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2440_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2445_recIdents;
          }
        } else if (_source80.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2446___mcc_h64 = _source80.dtor_path;
          Dafny.ISequence<DAST._IType> _2447___mcc_h65 = _source80.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _2448___mcc_h66 = _source80.dtor_variant;
          bool _2449___mcc_h67 = _source80.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2450___mcc_h68 = _source80.dtor_contents;
          bool _2451_isDatatype = _2388___mcc_h45;
          bool _2452_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2453_field = _2386___mcc_h43;
          DAST._IExpression _2454_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2455_onString;
            bool _2456_onOwned;
            bool _2457_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2458_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1505;
            bool _out1506;
            bool _out1507;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1508;
            DCOMP.COMP.GenExpr(_2454_on, selfIdent, @params, false, out _out1505, out _out1506, out _out1507, out _out1508);
            _2455_onString = _out1505;
            _2456_onOwned = _out1506;
            _2457_onErased = _out1507;
            _2458_recIdents = _out1508;
            if ((_2451_isDatatype) || (_2452_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2455_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2453_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2452_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2455_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2453_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2458_recIdents;
          }
        } else if (_source80.is_Convert) {
          DAST._IExpression _2459___mcc_h74 = _source80.dtor_value;
          DAST._IType _2460___mcc_h75 = _source80.dtor_from;
          DAST._IType _2461___mcc_h76 = _source80.dtor_typ;
          bool _2462_isDatatype = _2388___mcc_h45;
          bool _2463_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2464_field = _2386___mcc_h43;
          DAST._IExpression _2465_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2466_onString;
            bool _2467_onOwned;
            bool _2468_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2469_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1509;
            bool _out1510;
            bool _out1511;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
            DCOMP.COMP.GenExpr(_2465_on, selfIdent, @params, false, out _out1509, out _out1510, out _out1511, out _out1512);
            _2466_onString = _out1509;
            _2467_onOwned = _out1510;
            _2468_onErased = _out1511;
            _2469_recIdents = _out1512;
            if ((_2462_isDatatype) || (_2463_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2466_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2464_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2463_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2466_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2464_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2469_recIdents;
          }
        } else if (_source80.is_SeqConstruct) {
          DAST._IExpression _2470___mcc_h80 = _source80.dtor_length;
          DAST._IExpression _2471___mcc_h81 = _source80.dtor_elem;
          bool _2472_isDatatype = _2388___mcc_h45;
          bool _2473_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2474_field = _2386___mcc_h43;
          DAST._IExpression _2475_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2476_onString;
            bool _2477_onOwned;
            bool _2478_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2479_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1513;
            bool _out1514;
            bool _out1515;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1516;
            DCOMP.COMP.GenExpr(_2475_on, selfIdent, @params, false, out _out1513, out _out1514, out _out1515, out _out1516);
            _2476_onString = _out1513;
            _2477_onOwned = _out1514;
            _2478_onErased = _out1515;
            _2479_recIdents = _out1516;
            if ((_2472_isDatatype) || (_2473_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2476_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2474_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2473_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2476_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2474_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2479_recIdents;
          }
        } else if (_source80.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _2480___mcc_h84 = _source80.dtor_elements;
          DAST._IType _2481___mcc_h85 = _source80.dtor_typ;
          bool _2482_isDatatype = _2388___mcc_h45;
          bool _2483_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2484_field = _2386___mcc_h43;
          DAST._IExpression _2485_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2486_onString;
            bool _2487_onOwned;
            bool _2488_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2489_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1517;
            bool _out1518;
            bool _out1519;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
            DCOMP.COMP.GenExpr(_2485_on, selfIdent, @params, false, out _out1517, out _out1518, out _out1519, out _out1520);
            _2486_onString = _out1517;
            _2487_onOwned = _out1518;
            _2488_onErased = _out1519;
            _2489_recIdents = _out1520;
            if ((_2482_isDatatype) || (_2483_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2486_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2484_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2483_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2486_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2484_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2489_recIdents;
          }
        } else if (_source80.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _2490___mcc_h88 = _source80.dtor_elements;
          bool _2491_isDatatype = _2388___mcc_h45;
          bool _2492_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2493_field = _2386___mcc_h43;
          DAST._IExpression _2494_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2495_onString;
            bool _2496_onOwned;
            bool _2497_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2498_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1521;
            bool _out1522;
            bool _out1523;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1524;
            DCOMP.COMP.GenExpr(_2494_on, selfIdent, @params, false, out _out1521, out _out1522, out _out1523, out _out1524);
            _2495_onString = _out1521;
            _2496_onOwned = _out1522;
            _2497_onErased = _out1523;
            _2498_recIdents = _out1524;
            if ((_2491_isDatatype) || (_2492_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2495_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2493_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2492_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2495_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2493_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2498_recIdents;
          }
        } else if (_source80.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2499___mcc_h90 = _source80.dtor_mapElems;
          bool _2500_isDatatype = _2388___mcc_h45;
          bool _2501_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2502_field = _2386___mcc_h43;
          DAST._IExpression _2503_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2504_onString;
            bool _2505_onOwned;
            bool _2506_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2507_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1525;
            bool _out1526;
            bool _out1527;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1528;
            DCOMP.COMP.GenExpr(_2503_on, selfIdent, @params, false, out _out1525, out _out1526, out _out1527, out _out1528);
            _2504_onString = _out1525;
            _2505_onOwned = _out1526;
            _2506_onErased = _out1527;
            _2507_recIdents = _out1528;
            if ((_2500_isDatatype) || (_2501_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2504_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2502_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2501_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2504_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2502_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2507_recIdents;
          }
        } else if (_source80.is_This) {
          bool _2508_isDatatype = _2388___mcc_h45;
          bool _2509_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2510_field = _2386___mcc_h43;
          DAST._IExpression _2511_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2512_onString;
            bool _2513_onOwned;
            bool _2514_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2515_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1529;
            bool _out1530;
            bool _out1531;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
            DCOMP.COMP.GenExpr(_2511_on, selfIdent, @params, false, out _out1529, out _out1530, out _out1531, out _out1532);
            _2512_onString = _out1529;
            _2513_onOwned = _out1530;
            _2514_onErased = _out1531;
            _2515_recIdents = _out1532;
            if ((_2508_isDatatype) || (_2509_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2512_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2510_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2509_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2512_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2510_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2515_recIdents;
          }
        } else if (_source80.is_Ite) {
          DAST._IExpression _2516___mcc_h92 = _source80.dtor_cond;
          DAST._IExpression _2517___mcc_h93 = _source80.dtor_thn;
          DAST._IExpression _2518___mcc_h94 = _source80.dtor_els;
          bool _2519_isDatatype = _2388___mcc_h45;
          bool _2520_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2521_field = _2386___mcc_h43;
          DAST._IExpression _2522_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2523_onString;
            bool _2524_onOwned;
            bool _2525_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2526_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1533;
            bool _out1534;
            bool _out1535;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1536;
            DCOMP.COMP.GenExpr(_2522_on, selfIdent, @params, false, out _out1533, out _out1534, out _out1535, out _out1536);
            _2523_onString = _out1533;
            _2524_onOwned = _out1534;
            _2525_onErased = _out1535;
            _2526_recIdents = _out1536;
            if ((_2519_isDatatype) || (_2520_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2523_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2521_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2520_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2523_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2521_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2526_recIdents;
          }
        } else if (_source80.is_UnOp) {
          DAST._IUnaryOp _2527___mcc_h98 = _source80.dtor_unOp;
          DAST._IExpression _2528___mcc_h99 = _source80.dtor_expr;
          bool _2529_isDatatype = _2388___mcc_h45;
          bool _2530_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2531_field = _2386___mcc_h43;
          DAST._IExpression _2532_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2533_onString;
            bool _2534_onOwned;
            bool _2535_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2536_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1537;
            bool _out1538;
            bool _out1539;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
            DCOMP.COMP.GenExpr(_2532_on, selfIdent, @params, false, out _out1537, out _out1538, out _out1539, out _out1540);
            _2533_onString = _out1537;
            _2534_onOwned = _out1538;
            _2535_onErased = _out1539;
            _2536_recIdents = _out1540;
            if ((_2529_isDatatype) || (_2530_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2533_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2531_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2530_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2533_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2531_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2536_recIdents;
          }
        } else if (_source80.is_BinOp) {
          DAST._IBinOp _2537___mcc_h102 = _source80.dtor_op;
          DAST._IExpression _2538___mcc_h103 = _source80.dtor_left;
          DAST._IExpression _2539___mcc_h104 = _source80.dtor_right;
          bool _2540_isDatatype = _2388___mcc_h45;
          bool _2541_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2542_field = _2386___mcc_h43;
          DAST._IExpression _2543_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2544_onString;
            bool _2545_onOwned;
            bool _2546_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2547_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1541;
            bool _out1542;
            bool _out1543;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1544;
            DCOMP.COMP.GenExpr(_2543_on, selfIdent, @params, false, out _out1541, out _out1542, out _out1543, out _out1544);
            _2544_onString = _out1541;
            _2545_onOwned = _out1542;
            _2546_onErased = _out1543;
            _2547_recIdents = _out1544;
            if ((_2540_isDatatype) || (_2541_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2544_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2542_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2541_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2544_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2542_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2547_recIdents;
          }
        } else if (_source80.is_ArrayLen) {
          DAST._IExpression _2548___mcc_h108 = _source80.dtor_expr;
          BigInteger _2549___mcc_h109 = _source80.dtor_dim;
          bool _2550_isDatatype = _2388___mcc_h45;
          bool _2551_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2552_field = _2386___mcc_h43;
          DAST._IExpression _2553_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2554_onString;
            bool _2555_onOwned;
            bool _2556_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2557_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1545;
            bool _out1546;
            bool _out1547;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
            DCOMP.COMP.GenExpr(_2553_on, selfIdent, @params, false, out _out1545, out _out1546, out _out1547, out _out1548);
            _2554_onString = _out1545;
            _2555_onOwned = _out1546;
            _2556_onErased = _out1547;
            _2557_recIdents = _out1548;
            if ((_2550_isDatatype) || (_2551_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2554_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2552_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2551_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2554_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2552_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2557_recIdents;
          }
        } else if (_source80.is_Select) {
          DAST._IExpression _2558___mcc_h112 = _source80.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2559___mcc_h113 = _source80.dtor_field;
          bool _2560___mcc_h114 = _source80.dtor_isConstant;
          bool _2561___mcc_h115 = _source80.dtor_onDatatype;
          bool _2562_isDatatype = _2388___mcc_h45;
          bool _2563_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2564_field = _2386___mcc_h43;
          DAST._IExpression _2565_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2566_onString;
            bool _2567_onOwned;
            bool _2568_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2569_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1549;
            bool _out1550;
            bool _out1551;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
            DCOMP.COMP.GenExpr(_2565_on, selfIdent, @params, false, out _out1549, out _out1550, out _out1551, out _out1552);
            _2566_onString = _out1549;
            _2567_onOwned = _out1550;
            _2568_onErased = _out1551;
            _2569_recIdents = _out1552;
            if ((_2562_isDatatype) || (_2563_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2566_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2564_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2563_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2566_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2564_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2569_recIdents;
          }
        } else if (_source80.is_SelectFn) {
          DAST._IExpression _2570___mcc_h120 = _source80.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2571___mcc_h121 = _source80.dtor_field;
          bool _2572___mcc_h122 = _source80.dtor_onDatatype;
          bool _2573___mcc_h123 = _source80.dtor_isStatic;
          BigInteger _2574___mcc_h124 = _source80.dtor_arity;
          bool _2575_isDatatype = _2388___mcc_h45;
          bool _2576_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2577_field = _2386___mcc_h43;
          DAST._IExpression _2578_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2579_onString;
            bool _2580_onOwned;
            bool _2581_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2582_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1553;
            bool _out1554;
            bool _out1555;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1556;
            DCOMP.COMP.GenExpr(_2578_on, selfIdent, @params, false, out _out1553, out _out1554, out _out1555, out _out1556);
            _2579_onString = _out1553;
            _2580_onOwned = _out1554;
            _2581_onErased = _out1555;
            _2582_recIdents = _out1556;
            if ((_2575_isDatatype) || (_2576_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2579_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2577_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2576_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2579_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2577_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2582_recIdents;
          }
        } else if (_source80.is_Index) {
          DAST._IExpression _2583___mcc_h130 = _source80.dtor_expr;
          DAST._ICollKind _2584___mcc_h131 = _source80.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _2585___mcc_h132 = _source80.dtor_indices;
          bool _2586_isDatatype = _2388___mcc_h45;
          bool _2587_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2588_field = _2386___mcc_h43;
          DAST._IExpression _2589_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2590_onString;
            bool _2591_onOwned;
            bool _2592_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2593_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1557;
            bool _out1558;
            bool _out1559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
            DCOMP.COMP.GenExpr(_2589_on, selfIdent, @params, false, out _out1557, out _out1558, out _out1559, out _out1560);
            _2590_onString = _out1557;
            _2591_onOwned = _out1558;
            _2592_onErased = _out1559;
            _2593_recIdents = _out1560;
            if ((_2586_isDatatype) || (_2587_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2590_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2588_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2587_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2590_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2588_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2593_recIdents;
          }
        } else if (_source80.is_IndexRange) {
          DAST._IExpression _2594___mcc_h136 = _source80.dtor_expr;
          bool _2595___mcc_h137 = _source80.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _2596___mcc_h138 = _source80.dtor_low;
          DAST._IOptional<DAST._IExpression> _2597___mcc_h139 = _source80.dtor_high;
          bool _2598_isDatatype = _2388___mcc_h45;
          bool _2599_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2600_field = _2386___mcc_h43;
          DAST._IExpression _2601_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2602_onString;
            bool _2603_onOwned;
            bool _2604_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2605_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1561;
            bool _out1562;
            bool _out1563;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1564;
            DCOMP.COMP.GenExpr(_2601_on, selfIdent, @params, false, out _out1561, out _out1562, out _out1563, out _out1564);
            _2602_onString = _out1561;
            _2603_onOwned = _out1562;
            _2604_onErased = _out1563;
            _2605_recIdents = _out1564;
            if ((_2598_isDatatype) || (_2599_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2602_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2600_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2599_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2602_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2600_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2605_recIdents;
          }
        } else if (_source80.is_TupleSelect) {
          DAST._IExpression _2606___mcc_h144 = _source80.dtor_expr;
          BigInteger _2607___mcc_h145 = _source80.dtor_index;
          bool _2608_isDatatype = _2388___mcc_h45;
          bool _2609_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2610_field = _2386___mcc_h43;
          DAST._IExpression _2611_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2612_onString;
            bool _2613_onOwned;
            bool _2614_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2615_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1565;
            bool _out1566;
            bool _out1567;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1568;
            DCOMP.COMP.GenExpr(_2611_on, selfIdent, @params, false, out _out1565, out _out1566, out _out1567, out _out1568);
            _2612_onString = _out1565;
            _2613_onOwned = _out1566;
            _2614_onErased = _out1567;
            _2615_recIdents = _out1568;
            if ((_2608_isDatatype) || (_2609_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2612_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2610_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2609_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2612_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2610_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2615_recIdents;
          }
        } else if (_source80.is_Call) {
          DAST._IExpression _2616___mcc_h148 = _source80.dtor_on;
          Dafny.ISequence<Dafny.Rune> _2617___mcc_h149 = _source80.dtor_name;
          Dafny.ISequence<DAST._IType> _2618___mcc_h150 = _source80.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2619___mcc_h151 = _source80.dtor_args;
          bool _2620_isDatatype = _2388___mcc_h45;
          bool _2621_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2622_field = _2386___mcc_h43;
          DAST._IExpression _2623_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2624_onString;
            bool _2625_onOwned;
            bool _2626_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2627_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1569;
            bool _out1570;
            bool _out1571;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
            DCOMP.COMP.GenExpr(_2623_on, selfIdent, @params, false, out _out1569, out _out1570, out _out1571, out _out1572);
            _2624_onString = _out1569;
            _2625_onOwned = _out1570;
            _2626_onErased = _out1571;
            _2627_recIdents = _out1572;
            if ((_2620_isDatatype) || (_2621_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2624_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2622_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2621_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2624_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2622_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2627_recIdents;
          }
        } else if (_source80.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _2628___mcc_h156 = _source80.dtor_params;
          DAST._IType _2629___mcc_h157 = _source80.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _2630___mcc_h158 = _source80.dtor_body;
          bool _2631_isDatatype = _2388___mcc_h45;
          bool _2632_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2633_field = _2386___mcc_h43;
          DAST._IExpression _2634_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2635_onString;
            bool _2636_onOwned;
            bool _2637_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2638_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1573;
            bool _out1574;
            bool _out1575;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1576;
            DCOMP.COMP.GenExpr(_2634_on, selfIdent, @params, false, out _out1573, out _out1574, out _out1575, out _out1576);
            _2635_onString = _out1573;
            _2636_onOwned = _out1574;
            _2637_onErased = _out1575;
            _2638_recIdents = _out1576;
            if ((_2631_isDatatype) || (_2632_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2635_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2633_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2632_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2635_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2633_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2638_recIdents;
          }
        } else if (_source80.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2639___mcc_h162 = _source80.dtor_values;
          DAST._IType _2640___mcc_h163 = _source80.dtor_retType;
          DAST._IExpression _2641___mcc_h164 = _source80.dtor_expr;
          bool _2642_isDatatype = _2388___mcc_h45;
          bool _2643_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2644_field = _2386___mcc_h43;
          DAST._IExpression _2645_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2646_onString;
            bool _2647_onOwned;
            bool _2648_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2649_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1577;
            bool _out1578;
            bool _out1579;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
            DCOMP.COMP.GenExpr(_2645_on, selfIdent, @params, false, out _out1577, out _out1578, out _out1579, out _out1580);
            _2646_onString = _out1577;
            _2647_onOwned = _out1578;
            _2648_onErased = _out1579;
            _2649_recIdents = _out1580;
            if ((_2642_isDatatype) || (_2643_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2646_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2644_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2643_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2646_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2644_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2649_recIdents;
          }
        } else if (_source80.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _2650___mcc_h168 = _source80.dtor_name;
          DAST._IType _2651___mcc_h169 = _source80.dtor_typ;
          DAST._IExpression _2652___mcc_h170 = _source80.dtor_value;
          DAST._IExpression _2653___mcc_h171 = _source80.dtor_iifeBody;
          bool _2654_isDatatype = _2388___mcc_h45;
          bool _2655_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2656_field = _2386___mcc_h43;
          DAST._IExpression _2657_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2658_onString;
            bool _2659_onOwned;
            bool _2660_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2661_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1581;
            bool _out1582;
            bool _out1583;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1584;
            DCOMP.COMP.GenExpr(_2657_on, selfIdent, @params, false, out _out1581, out _out1582, out _out1583, out _out1584);
            _2658_onString = _out1581;
            _2659_onOwned = _out1582;
            _2660_onErased = _out1583;
            _2661_recIdents = _out1584;
            if ((_2654_isDatatype) || (_2655_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2658_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2656_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2655_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2658_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2656_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2661_recIdents;
          }
        } else if (_source80.is_Apply) {
          DAST._IExpression _2662___mcc_h176 = _source80.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _2663___mcc_h177 = _source80.dtor_args;
          bool _2664_isDatatype = _2388___mcc_h45;
          bool _2665_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2666_field = _2386___mcc_h43;
          DAST._IExpression _2667_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2668_onString;
            bool _2669_onOwned;
            bool _2670_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2671_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1585;
            bool _out1586;
            bool _out1587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1588;
            DCOMP.COMP.GenExpr(_2667_on, selfIdent, @params, false, out _out1585, out _out1586, out _out1587, out _out1588);
            _2668_onString = _out1585;
            _2669_onOwned = _out1586;
            _2670_onErased = _out1587;
            _2671_recIdents = _out1588;
            if ((_2664_isDatatype) || (_2665_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2668_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2666_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2665_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2668_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2666_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2671_recIdents;
          }
        } else if (_source80.is_TypeTest) {
          DAST._IExpression _2672___mcc_h180 = _source80.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2673___mcc_h181 = _source80.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _2674___mcc_h182 = _source80.dtor_variant;
          bool _2675_isDatatype = _2388___mcc_h45;
          bool _2676_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2677_field = _2386___mcc_h43;
          DAST._IExpression _2678_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2679_onString;
            bool _2680_onOwned;
            bool _2681_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2682_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1589;
            bool _out1590;
            bool _out1591;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1592;
            DCOMP.COMP.GenExpr(_2678_on, selfIdent, @params, false, out _out1589, out _out1590, out _out1591, out _out1592);
            _2679_onString = _out1589;
            _2680_onOwned = _out1590;
            _2681_onErased = _out1591;
            _2682_recIdents = _out1592;
            if ((_2675_isDatatype) || (_2676_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2679_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2677_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2676_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2679_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2677_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2682_recIdents;
          }
        } else if (_source80.is_InitializationValue) {
          DAST._IType _2683___mcc_h186 = _source80.dtor_typ;
          bool _2684_isDatatype = _2388___mcc_h45;
          bool _2685_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2686_field = _2386___mcc_h43;
          DAST._IExpression _2687_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2688_onString;
            bool _2689_onOwned;
            bool _2690_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2691_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1593;
            bool _out1594;
            bool _out1595;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1596;
            DCOMP.COMP.GenExpr(_2687_on, selfIdent, @params, false, out _out1593, out _out1594, out _out1595, out _out1596);
            _2688_onString = _out1593;
            _2689_onOwned = _out1594;
            _2690_onErased = _out1595;
            _2691_recIdents = _out1596;
            if ((_2684_isDatatype) || (_2685_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2688_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2686_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2685_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2688_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2686_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2691_recIdents;
          }
        } else if (_source80.is_BoolBoundedPool) {
          bool _2692_isDatatype = _2388___mcc_h45;
          bool _2693_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2694_field = _2386___mcc_h43;
          DAST._IExpression _2695_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2696_onString;
            bool _2697_onOwned;
            bool _2698_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2699_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1597;
            bool _out1598;
            bool _out1599;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1600;
            DCOMP.COMP.GenExpr(_2695_on, selfIdent, @params, false, out _out1597, out _out1598, out _out1599, out _out1600);
            _2696_onString = _out1597;
            _2697_onOwned = _out1598;
            _2698_onErased = _out1599;
            _2699_recIdents = _out1600;
            if ((_2692_isDatatype) || (_2693_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2696_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2694_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2693_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2696_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2694_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2699_recIdents;
          }
        } else if (_source80.is_SetBoundedPool) {
          DAST._IExpression _2700___mcc_h188 = _source80.dtor_of;
          bool _2701_isDatatype = _2388___mcc_h45;
          bool _2702_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2703_field = _2386___mcc_h43;
          DAST._IExpression _2704_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2705_onString;
            bool _2706_onOwned;
            bool _2707_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2708_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1601;
            bool _out1602;
            bool _out1603;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1604;
            DCOMP.COMP.GenExpr(_2704_on, selfIdent, @params, false, out _out1601, out _out1602, out _out1603, out _out1604);
            _2705_onString = _out1601;
            _2706_onOwned = _out1602;
            _2707_onErased = _out1603;
            _2708_recIdents = _out1604;
            if ((_2701_isDatatype) || (_2702_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2705_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2703_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2702_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2705_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2703_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2708_recIdents;
          }
        } else if (_source80.is_SeqBoundedPool) {
          DAST._IExpression _2709___mcc_h190 = _source80.dtor_of;
          bool _2710___mcc_h191 = _source80.dtor_includeDuplicates;
          bool _2711_isDatatype = _2388___mcc_h45;
          bool _2712_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2713_field = _2386___mcc_h43;
          DAST._IExpression _2714_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2715_onString;
            bool _2716_onOwned;
            bool _2717_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2718_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1605;
            bool _out1606;
            bool _out1607;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
            DCOMP.COMP.GenExpr(_2714_on, selfIdent, @params, false, out _out1605, out _out1606, out _out1607, out _out1608);
            _2715_onString = _out1605;
            _2716_onOwned = _out1606;
            _2717_onErased = _out1607;
            _2718_recIdents = _out1608;
            if ((_2711_isDatatype) || (_2712_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2715_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2713_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2712_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2715_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2713_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2718_recIdents;
          }
        } else {
          DAST._IExpression _2719___mcc_h194 = _source80.dtor_lo;
          DAST._IExpression _2720___mcc_h195 = _source80.dtor_hi;
          bool _2721_isDatatype = _2388___mcc_h45;
          bool _2722_isConstant = _2387___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2723_field = _2386___mcc_h43;
          DAST._IExpression _2724_on = _2385___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2725_onString;
            bool _2726_onOwned;
            bool _2727_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2728_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1609;
            bool _out1610;
            bool _out1611;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1612;
            DCOMP.COMP.GenExpr(_2724_on, selfIdent, @params, false, out _out1609, out _out1610, out _out1611, out _out1612);
            _2725_onString = _out1609;
            _2726_onOwned = _out1610;
            _2727_onErased = _out1611;
            _2728_recIdents = _out1612;
            if ((_2721_isDatatype) || (_2722_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2725_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2723_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2722_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2725_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2723_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2728_recIdents;
          }
        }
      } else if (_source20.is_SelectFn) {
        DAST._IExpression _2729___mcc_h198 = _source20.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2730___mcc_h199 = _source20.dtor_field;
        bool _2731___mcc_h200 = _source20.dtor_onDatatype;
        bool _2732___mcc_h201 = _source20.dtor_isStatic;
        BigInteger _2733___mcc_h202 = _source20.dtor_arity;
        BigInteger _2734_arity = _2733___mcc_h202;
        bool _2735_isStatic = _2732___mcc_h201;
        bool _2736_isDatatype = _2731___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _2737_field = _2730___mcc_h199;
        DAST._IExpression _2738_on = _2729___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _2739_onString;
          bool _2740_onOwned;
          bool _2741___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2742_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1613;
          bool _out1614;
          bool _out1615;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1616;
          DCOMP.COMP.GenExpr(_2738_on, selfIdent, @params, false, out _out1613, out _out1614, out _out1615, out _out1616);
          _2739_onString = _out1613;
          _2740_onOwned = _out1614;
          _2741___v82 = _out1615;
          _2742_recIdents = _out1616;
          if (_2735_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2739_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2737_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _2739_onString), ((_2740_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _2743_args;
            _2743_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _2744_i;
            _2744_i = BigInteger.Zero;
            while ((_2744_i) < (_2734_arity)) {
              if ((_2744_i).Sign == 1) {
                _2743_args = Dafny.Sequence<Dafny.Rune>.Concat(_2743_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _2743_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2743_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_2744_i));
              _2744_i = (_2744_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _2743_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _2737_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2743_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _2745_typeShape;
          _2745_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _2746_i;
          _2746_i = BigInteger.Zero;
          while ((_2746_i) < (_2734_arity)) {
            if ((_2746_i).Sign == 1) {
              _2745_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2745_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _2745_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2745_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _2746_i = (_2746_i) + (BigInteger.One);
          }
          _2745_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2745_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _2745_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _2742_recIdents;
        }
      } else if (_source20.is_Index) {
        DAST._IExpression _2747___mcc_h203 = _source20.dtor_expr;
        DAST._ICollKind _2748___mcc_h204 = _source20.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _2749___mcc_h205 = _source20.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2750_indices = _2749___mcc_h205;
        DAST._ICollKind _2751_collKind = _2748___mcc_h204;
        DAST._IExpression _2752_on = _2747___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _2753_onString;
          bool _2754_onOwned;
          bool _2755_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2756_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1617;
          bool _out1618;
          bool _out1619;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1620;
          DCOMP.COMP.GenExpr(_2752_on, selfIdent, @params, false, out _out1617, out _out1618, out _out1619, out _out1620);
          _2753_onString = _out1617;
          _2754_onOwned = _out1618;
          _2755_onErased = _out1619;
          _2756_recIdents = _out1620;
          readIdents = _2756_recIdents;
          s = _2753_onString;
          BigInteger _2757_i;
          _2757_i = BigInteger.Zero;
          while ((_2757_i) < (new BigInteger((_2750_indices).Count))) {
            if (object.Equals(_2751_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_2751_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _2758_idx;
              bool _2759_idxOwned;
              bool _2760_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2761_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1621;
              bool _out1622;
              bool _out1623;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1624;
              DCOMP.COMP.GenExpr((_2750_indices).Select(_2757_i), selfIdent, @params, false, out _out1621, out _out1622, out _out1623, out _out1624);
              _2758_idx = _out1621;
              _2759_idxOwned = _out1622;
              _2760_idxErased = _out1623;
              _2761_recIdentsIdx = _out1624;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_2759_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2758_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2761_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _2762_idx;
              bool _2763___v83;
              bool _2764_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2765_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1625;
              bool _out1626;
              bool _out1627;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
              DCOMP.COMP.GenExpr((_2750_indices).Select(_2757_i), selfIdent, @params, true, out _out1625, out _out1626, out _out1627, out _out1628);
              _2762_idx = _out1625;
              _2763___v83 = _out1626;
              _2764_idxErased = _out1627;
              _2765_recIdentsIdx = _out1628;
              if (!(_2764_idxErased)) {
                _2762_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2762_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _2762_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2765_recIdentsIdx);
            }
            _2757_i = (_2757_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _2755_onErased;
        }
      } else if (_source20.is_IndexRange) {
        DAST._IExpression _2766___mcc_h206 = _source20.dtor_expr;
        bool _2767___mcc_h207 = _source20.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _2768___mcc_h208 = _source20.dtor_low;
        DAST._IOptional<DAST._IExpression> _2769___mcc_h209 = _source20.dtor_high;
        DAST._IOptional<DAST._IExpression> _2770_high = _2769___mcc_h209;
        DAST._IOptional<DAST._IExpression> _2771_low = _2768___mcc_h208;
        bool _2772_isArray = _2767___mcc_h207;
        DAST._IExpression _2773_on = _2766___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _2774_onString;
          bool _2775_onOwned;
          bool _2776_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2777_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1629;
          bool _out1630;
          bool _out1631;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1632;
          DCOMP.COMP.GenExpr(_2773_on, selfIdent, @params, false, out _out1629, out _out1630, out _out1631, out _out1632);
          _2774_onString = _out1629;
          _2775_onOwned = _out1630;
          _2776_onErased = _out1631;
          _2777_recIdents = _out1632;
          readIdents = _2777_recIdents;
          s = _2774_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2778_lowString;
          _2778_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source81 = _2771_low;
          if (_source81.is_Some) {
            DAST._IExpression _2779___mcc_h1195 = _source81.dtor_Some_a0;
            DAST._IExpression _2780_l = _2779___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _2781_lString;
              bool _2782___v84;
              bool _2783_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2784_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1633;
              bool _out1634;
              bool _out1635;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
              DCOMP.COMP.GenExpr(_2780_l, selfIdent, @params, true, out _out1633, out _out1634, out _out1635, out _out1636);
              _2781_lString = _out1633;
              _2782___v84 = _out1634;
              _2783_lErased = _out1635;
              _2784_recIdentsL = _out1636;
              if (!(_2783_lErased)) {
                _2781_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2781_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2778_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2781_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2784_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2785_highString;
          _2785_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source82 = _2770_high;
          if (_source82.is_Some) {
            DAST._IExpression _2786___mcc_h1196 = _source82.dtor_Some_a0;
            DAST._IExpression _2787_h = _2786___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _2788_hString;
              bool _2789___v85;
              bool _2790_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2791_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1637;
              bool _out1638;
              bool _out1639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1640;
              DCOMP.COMP.GenExpr(_2787_h, selfIdent, @params, true, out _out1637, out _out1638, out _out1639, out _out1640);
              _2788_hString = _out1637;
              _2789___v85 = _out1638;
              _2790_hErased = _out1639;
              _2791_recIdentsH = _out1640;
              if (!(_2790_hErased)) {
                _2788_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2788_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2785_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2788_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2791_recIdentsH);
            }
          } else {
          }
          if (_2772_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source83) => {
            if (_source83.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2792___mcc_h1197 = _source83.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2793_l = _2792___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2793_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2778_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source84) => {
            if (_source84.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2794___mcc_h1198 = _source84.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2795_h = _2794___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2795_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2785_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _2776_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source20.is_TupleSelect) {
        DAST._IExpression _2796___mcc_h210 = _source20.dtor_expr;
        BigInteger _2797___mcc_h211 = _source20.dtor_index;
        BigInteger _2798_idx = _2797___mcc_h211;
        DAST._IExpression _2799_on = _2796___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _2800_onString;
          bool _2801___v86;
          bool _2802_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2803_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1641;
          bool _out1642;
          bool _out1643;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1644;
          DCOMP.COMP.GenExpr(_2799_on, selfIdent, @params, false, out _out1641, out _out1642, out _out1643, out _out1644);
          _2800_onString = _out1641;
          _2801___v86 = _out1642;
          _2802_tupErased = _out1643;
          _2803_recIdents = _out1644;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2800_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_2798_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _2802_tupErased;
          readIdents = _2803_recIdents;
        }
      } else if (_source20.is_Call) {
        DAST._IExpression _2804___mcc_h212 = _source20.dtor_on;
        Dafny.ISequence<Dafny.Rune> _2805___mcc_h213 = _source20.dtor_name;
        Dafny.ISequence<DAST._IType> _2806___mcc_h214 = _source20.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2807___mcc_h215 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2808_args = _2807___mcc_h215;
        Dafny.ISequence<DAST._IType> _2809_typeArgs = _2806___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _2810_name = _2805___mcc_h213;
        DAST._IExpression _2811_on = _2804___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2812_typeArgString;
          _2812_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2809_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2813_typeI;
            _2813_typeI = BigInteger.Zero;
            _2812_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_2813_typeI) < (new BigInteger((_2809_typeArgs).Count))) {
              if ((_2813_typeI).Sign == 1) {
                _2812_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2812_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _2814_typeString;
              Dafny.ISequence<Dafny.Rune> _out1645;
              _out1645 = DCOMP.COMP.GenType((_2809_typeArgs).Select(_2813_typeI), false, false);
              _2814_typeString = _out1645;
              _2812_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2812_typeArgString, _2814_typeString);
              _2813_typeI = (_2813_typeI) + (BigInteger.One);
            }
            _2812_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2812_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _2815_argString;
          _2815_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2816_i;
          _2816_i = BigInteger.Zero;
          while ((_2816_i) < (new BigInteger((_2808_args).Count))) {
            if ((_2816_i).Sign == 1) {
              _2815_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2815_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2817_argExpr;
            bool _2818_isOwned;
            bool _2819_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2820_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1646;
            bool _out1647;
            bool _out1648;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
            DCOMP.COMP.GenExpr((_2808_args).Select(_2816_i), selfIdent, @params, false, out _out1646, out _out1647, out _out1648, out _out1649);
            _2817_argExpr = _out1646;
            _2818_isOwned = _out1647;
            _2819_argErased = _out1648;
            _2820_argIdents = _out1649;
            if (_2818_isOwned) {
              _2817_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _2817_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_2819_argErased)) {
              _2817_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _2817_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _2817_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _2817_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2815_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2815_argString, _2817_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2820_argIdents);
            _2816_i = (_2816_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2821_enclosingString;
          bool _2822___v87;
          bool _2823___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2824_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1650;
          bool _out1651;
          bool _out1652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
          DCOMP.COMP.GenExpr(_2811_on, selfIdent, @params, false, out _out1650, out _out1651, out _out1652, out _out1653);
          _2821_enclosingString = _out1650;
          _2822___v87 = _out1651;
          _2823___v88 = _out1652;
          _2824_recIdents = _out1653;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2824_recIdents);
          DAST._IExpression _source85 = _2811_on;
          if (_source85.is_Literal) {
            DAST._ILiteral _2825___mcc_h1199 = _source85.dtor_Literal_a0;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2826___mcc_h1201 = _source85.dtor_Ident_a0;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2827___mcc_h1203 = _source85.dtor_Companion_a0;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2821_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2828___mcc_h1205 = _source85.dtor_Tuple_a0;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2829___mcc_h1207 = _source85.dtor_path;
            Dafny.ISequence<DAST._IType> _2830___mcc_h1208 = _source85.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2831___mcc_h1209 = _source85.dtor_args;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2832___mcc_h1213 = _source85.dtor_dims;
            DAST._IType _2833___mcc_h1214 = _source85.dtor_typ;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2834___mcc_h1217 = _source85.dtor_path;
            Dafny.ISequence<DAST._IType> _2835___mcc_h1218 = _source85.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2836___mcc_h1219 = _source85.dtor_variant;
            bool _2837___mcc_h1220 = _source85.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2838___mcc_h1221 = _source85.dtor_contents;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_Convert) {
            DAST._IExpression _2839___mcc_h1227 = _source85.dtor_value;
            DAST._IType _2840___mcc_h1228 = _source85.dtor_from;
            DAST._IType _2841___mcc_h1229 = _source85.dtor_typ;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_SeqConstruct) {
            DAST._IExpression _2842___mcc_h1233 = _source85.dtor_length;
            DAST._IExpression _2843___mcc_h1234 = _source85.dtor_elem;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2844___mcc_h1237 = _source85.dtor_elements;
            DAST._IType _2845___mcc_h1238 = _source85.dtor_typ;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2846___mcc_h1241 = _source85.dtor_elements;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2847___mcc_h1243 = _source85.dtor_mapElems;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_This) {
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_Ite) {
            DAST._IExpression _2848___mcc_h1245 = _source85.dtor_cond;
            DAST._IExpression _2849___mcc_h1246 = _source85.dtor_thn;
            DAST._IExpression _2850___mcc_h1247 = _source85.dtor_els;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_UnOp) {
            DAST._IUnaryOp _2851___mcc_h1251 = _source85.dtor_unOp;
            DAST._IExpression _2852___mcc_h1252 = _source85.dtor_expr;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_BinOp) {
            DAST._IBinOp _2853___mcc_h1255 = _source85.dtor_op;
            DAST._IExpression _2854___mcc_h1256 = _source85.dtor_left;
            DAST._IExpression _2855___mcc_h1257 = _source85.dtor_right;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_ArrayLen) {
            DAST._IExpression _2856___mcc_h1261 = _source85.dtor_expr;
            BigInteger _2857___mcc_h1262 = _source85.dtor_dim;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_Select) {
            DAST._IExpression _2858___mcc_h1265 = _source85.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2859___mcc_h1266 = _source85.dtor_field;
            bool _2860___mcc_h1267 = _source85.dtor_isConstant;
            bool _2861___mcc_h1268 = _source85.dtor_onDatatype;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_SelectFn) {
            DAST._IExpression _2862___mcc_h1273 = _source85.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2863___mcc_h1274 = _source85.dtor_field;
            bool _2864___mcc_h1275 = _source85.dtor_onDatatype;
            bool _2865___mcc_h1276 = _source85.dtor_isStatic;
            BigInteger _2866___mcc_h1277 = _source85.dtor_arity;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_Index) {
            DAST._IExpression _2867___mcc_h1283 = _source85.dtor_expr;
            DAST._ICollKind _2868___mcc_h1284 = _source85.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2869___mcc_h1285 = _source85.dtor_indices;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_IndexRange) {
            DAST._IExpression _2870___mcc_h1289 = _source85.dtor_expr;
            bool _2871___mcc_h1290 = _source85.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _2872___mcc_h1291 = _source85.dtor_low;
            DAST._IOptional<DAST._IExpression> _2873___mcc_h1292 = _source85.dtor_high;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_TupleSelect) {
            DAST._IExpression _2874___mcc_h1297 = _source85.dtor_expr;
            BigInteger _2875___mcc_h1298 = _source85.dtor_index;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_Call) {
            DAST._IExpression _2876___mcc_h1301 = _source85.dtor_on;
            Dafny.ISequence<Dafny.Rune> _2877___mcc_h1302 = _source85.dtor_name;
            Dafny.ISequence<DAST._IType> _2878___mcc_h1303 = _source85.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2879___mcc_h1304 = _source85.dtor_args;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2880___mcc_h1309 = _source85.dtor_params;
            DAST._IType _2881___mcc_h1310 = _source85.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2882___mcc_h1311 = _source85.dtor_body;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2883___mcc_h1315 = _source85.dtor_values;
            DAST._IType _2884___mcc_h1316 = _source85.dtor_retType;
            DAST._IExpression _2885___mcc_h1317 = _source85.dtor_expr;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2886___mcc_h1321 = _source85.dtor_name;
            DAST._IType _2887___mcc_h1322 = _source85.dtor_typ;
            DAST._IExpression _2888___mcc_h1323 = _source85.dtor_value;
            DAST._IExpression _2889___mcc_h1324 = _source85.dtor_iifeBody;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_Apply) {
            DAST._IExpression _2890___mcc_h1329 = _source85.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2891___mcc_h1330 = _source85.dtor_args;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_TypeTest) {
            DAST._IExpression _2892___mcc_h1333 = _source85.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2893___mcc_h1334 = _source85.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2894___mcc_h1335 = _source85.dtor_variant;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_InitializationValue) {
            DAST._IType _2895___mcc_h1339 = _source85.dtor_typ;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_BoolBoundedPool) {
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_SetBoundedPool) {
            DAST._IExpression _2896___mcc_h1341 = _source85.dtor_of;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else if (_source85.is_SeqBoundedPool) {
            DAST._IExpression _2897___mcc_h1343 = _source85.dtor_of;
            bool _2898___mcc_h1344 = _source85.dtor_includeDuplicates;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          } else {
            DAST._IExpression _2899___mcc_h1347 = _source85.dtor_lo;
            DAST._IExpression _2900___mcc_h1348 = _source85.dtor_hi;
            {
              _2821_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2810_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2821_enclosingString, _2812_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2815_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _2901___mcc_h216 = _source20.dtor_params;
        DAST._IType _2902___mcc_h217 = _source20.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _2903___mcc_h218 = _source20.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2904_body = _2903___mcc_h218;
        DAST._IType _2905_retType = _2902___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _2906_params = _2901___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2907_paramNames;
          _2907_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2908_i;
          _2908_i = BigInteger.Zero;
          while ((_2908_i) < (new BigInteger((_2906_params).Count))) {
            _2907_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2907_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_2906_params).Select(_2908_i)).dtor_name));
            _2908_i = (_2908_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2909_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2910_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1654;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1655;
          DCOMP.COMP.GenStmts(_2904_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _2907_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1654, out _out1655);
          _2909_recursiveGen = _out1654;
          _2910_recIdents = _out1655;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2911_allReadCloned;
          _2911_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_2910_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _2912_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_2910_recIdents).Elements) {
              _2912_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_2910_recIdents).Contains(_2912_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_2912_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _2911_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_2911_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_2907_paramNames).Contains(_2912_next))) {
              _2911_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2911_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_2912_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_2912_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2912_next));
            }
            _2910_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2910_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2912_next));
          }
          Dafny.ISequence<Dafny.Rune> _2913_paramsString;
          _2913_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _2914_paramTypes;
          _2914_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2908_i = BigInteger.Zero;
          while ((_2908_i) < (new BigInteger((_2906_params).Count))) {
            if ((_2908_i).Sign == 1) {
              _2913_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2913_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _2914_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_2914_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2915_typStr;
            Dafny.ISequence<Dafny.Rune> _out1656;
            _out1656 = DCOMP.COMP.GenType(((_2906_params).Select(_2908_i)).dtor_typ, false, true);
            _2915_typStr = _out1656;
            _2913_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2913_paramsString, ((_2906_params).Select(_2908_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _2915_typStr);
            _2914_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2914_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _2915_typStr);
            _2908_i = (_2908_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2916_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1657;
          _out1657 = DCOMP.COMP.GenType(_2905_retType, false, true);
          _2916_retTypeGen = _out1657;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _2914_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _2916_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _2911_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _2913_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _2916_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2909_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2917___mcc_h219 = _source20.dtor_values;
        DAST._IType _2918___mcc_h220 = _source20.dtor_retType;
        DAST._IExpression _2919___mcc_h221 = _source20.dtor_expr;
        DAST._IExpression _2920_expr = _2919___mcc_h221;
        DAST._IType _2921_retType = _2918___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2922_values = _2917___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2923_paramNames;
          _2923_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2924_paramNamesSet;
          _2924_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2925_i;
          _2925_i = BigInteger.Zero;
          while ((_2925_i) < (new BigInteger((_2922_values).Count))) {
            _2923_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2923_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2922_values).Select(_2925_i)).dtor__0).dtor_name));
            _2924_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2924_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2922_values).Select(_2925_i)).dtor__0).dtor_name));
            _2925_i = (_2925_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _2926_paramsString;
          _2926_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2925_i = BigInteger.Zero;
          while ((_2925_i) < (new BigInteger((_2922_values).Count))) {
            if ((_2925_i).Sign == 1) {
              _2926_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2926_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2927_typStr;
            Dafny.ISequence<Dafny.Rune> _out1658;
            _out1658 = DCOMP.COMP.GenType((((_2922_values).Select(_2925_i)).dtor__0).dtor_typ, false, true);
            _2927_typStr = _out1658;
            Dafny.ISequence<Dafny.Rune> _2928_valueGen;
            bool _2929___v91;
            bool _2930_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2931_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1659;
            bool _out1660;
            bool _out1661;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
            DCOMP.COMP.GenExpr(((_2922_values).Select(_2925_i)).dtor__1, selfIdent, @params, true, out _out1659, out _out1660, out _out1661, out _out1662);
            _2928_valueGen = _out1659;
            _2929___v91 = _out1660;
            _2930_valueErased = _out1661;
            _2931_recIdents = _out1662;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_2922_values).Select(_2925_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2927_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2931_recIdents);
            if (_2930_valueErased) {
              _2928_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2928_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2928_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _2925_i = (_2925_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2932_recGen;
          bool _2933_recOwned;
          bool _2934_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2935_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1663;
          bool _out1664;
          bool _out1665;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
          DCOMP.COMP.GenExpr(_2920_expr, selfIdent, _2923_paramNames, mustOwn, out _out1663, out _out1664, out _out1665, out _out1666);
          _2932_recGen = _out1663;
          _2933_recOwned = _out1664;
          _2934_recErased = _out1665;
          _2935_recIdents = _out1666;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2935_recIdents, _2924_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2932_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _2933_recOwned;
          isErased = _2934_recErased;
        }
      } else if (_source20.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _2936___mcc_h222 = _source20.dtor_name;
        DAST._IType _2937___mcc_h223 = _source20.dtor_typ;
        DAST._IExpression _2938___mcc_h224 = _source20.dtor_value;
        DAST._IExpression _2939___mcc_h225 = _source20.dtor_iifeBody;
        DAST._IExpression _2940_iifeBody = _2939___mcc_h225;
        DAST._IExpression _2941_value = _2938___mcc_h224;
        DAST._IType _2942_tpe = _2937___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _2943_name = _2936___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _2944_valueGen;
          bool _2945___v92;
          bool _2946_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2947_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1667;
          bool _out1668;
          bool _out1669;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1670;
          DCOMP.COMP.GenExpr(_2941_value, selfIdent, @params, true, out _out1667, out _out1668, out _out1669, out _out1670);
          _2944_valueGen = _out1667;
          _2945___v92 = _out1668;
          _2946_valueErased = _out1669;
          _2947_recIdents = _out1670;
          if (_2946_valueErased) {
            _2944_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2944_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _2947_recIdents;
          Dafny.ISequence<Dafny.Rune> _2948_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1671;
          _out1671 = DCOMP.COMP.GenType(_2942_tpe, false, true);
          _2948_valueTypeGen = _out1671;
          Dafny.ISequence<Dafny.Rune> _2949_bodyGen;
          bool _2950___v93;
          bool _2951_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2952_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1672;
          bool _out1673;
          bool _out1674;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1675;
          DCOMP.COMP.GenExpr(_2940_iifeBody, selfIdent, @params, true, out _out1672, out _out1673, out _out1674, out _out1675);
          _2949_bodyGen = _out1672;
          _2950___v93 = _out1673;
          _2951_bodyErased = _out1674;
          _2952_bodyIdents = _out1675;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2952_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2943_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_2943_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2948_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _2944_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _2949_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _2951_bodyErased;
        }
      } else if (_source20.is_Apply) {
        DAST._IExpression _2953___mcc_h226 = _source20.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2954___mcc_h227 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2955_args = _2954___mcc_h227;
        DAST._IExpression _2956_func = _2953___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _2957_funcString;
          bool _2958___v94;
          bool _2959_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2960_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1676;
          bool _out1677;
          bool _out1678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
          DCOMP.COMP.GenExpr(_2956_func, selfIdent, @params, false, out _out1676, out _out1677, out _out1678, out _out1679);
          _2957_funcString = _out1676;
          _2958___v94 = _out1677;
          _2959_funcErased = _out1678;
          _2960_recIdents = _out1679;
          readIdents = _2960_recIdents;
          Dafny.ISequence<Dafny.Rune> _2961_argString;
          _2961_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2962_i;
          _2962_i = BigInteger.Zero;
          while ((_2962_i) < (new BigInteger((_2955_args).Count))) {
            if ((_2962_i).Sign == 1) {
              _2961_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2961_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2963_argExpr;
            bool _2964_isOwned;
            bool _2965_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2966_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1680;
            bool _out1681;
            bool _out1682;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1683;
            DCOMP.COMP.GenExpr((_2955_args).Select(_2962_i), selfIdent, @params, false, out _out1680, out _out1681, out _out1682, out _out1683);
            _2963_argExpr = _out1680;
            _2964_isOwned = _out1681;
            _2965_argErased = _out1682;
            _2966_argIdents = _out1683;
            if (_2964_isOwned) {
              _2963_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2963_argExpr);
            }
            _2961_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2961_argString, _2963_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2966_argIdents);
            _2962_i = (_2962_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2957_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2961_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_TypeTest) {
        DAST._IExpression _2967___mcc_h228 = _source20.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2968___mcc_h229 = _source20.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _2969___mcc_h230 = _source20.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _2970_variant = _2969___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2971_dType = _2968___mcc_h229;
        DAST._IExpression _2972_on = _2967___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _2973_exprGen;
          bool _2974___v95;
          bool _2975_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2976_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1684;
          bool _out1685;
          bool _out1686;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1687;
          DCOMP.COMP.GenExpr(_2972_on, selfIdent, @params, false, out _out1684, out _out1685, out _out1686, out _out1687);
          _2973_exprGen = _out1684;
          _2974___v95 = _out1685;
          _2975_exprErased = _out1686;
          _2976_recIdents = _out1687;
          Dafny.ISequence<Dafny.Rune> _2977_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1688;
          _out1688 = DCOMP.COMP.GenPath(_2971_dType);
          _2977_dTypePath = _out1688;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _2973_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _2977_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2970_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _2976_recIdents;
        }
      } else if (_source20.is_InitializationValue) {
        DAST._IType _2978___mcc_h231 = _source20.dtor_typ;
        DAST._IType _2979_typ = _2978___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _2980_typString;
          Dafny.ISequence<Dafny.Rune> _out1689;
          _out1689 = DCOMP.COMP.GenType(_2979_typ, false, false);
          _2980_typString = _out1689;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2980_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_SetBoundedPool) {
        DAST._IExpression _2981___mcc_h232 = _source20.dtor_of;
        DAST._IExpression _2982_of = _2981___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _2983_exprGen;
          bool _2984___v96;
          bool _2985_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2986_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1690;
          bool _out1691;
          bool _out1692;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1693;
          DCOMP.COMP.GenExpr(_2982_of, selfIdent, @params, false, out _out1690, out _out1691, out _out1692, out _out1693);
          _2983_exprGen = _out1690;
          _2984___v96 = _out1691;
          _2985_exprErased = _out1692;
          _2986_recIdents = _out1693;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2983_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _2985_exprErased;
          readIdents = _2986_recIdents;
        }
      } else if (_source20.is_SeqBoundedPool) {
        DAST._IExpression _2987___mcc_h233 = _source20.dtor_of;
        bool _2988___mcc_h234 = _source20.dtor_includeDuplicates;
        bool _2989_includeDuplicates = _2988___mcc_h234;
        DAST._IExpression _2990_of = _2987___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _2991_exprGen;
          bool _2992___v97;
          bool _2993_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2994_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1694;
          bool _out1695;
          bool _out1696;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1697;
          DCOMP.COMP.GenExpr(_2990_of, selfIdent, @params, false, out _out1694, out _out1695, out _out1696, out _out1697);
          _2991_exprGen = _out1694;
          _2992___v97 = _out1695;
          _2993_exprErased = _out1696;
          _2994_recIdents = _out1697;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2991_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_2989_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _2993_exprErased;
          readIdents = _2994_recIdents;
        }
      } else {
        DAST._IExpression _2995___mcc_h235 = _source20.dtor_lo;
        DAST._IExpression _2996___mcc_h236 = _source20.dtor_hi;
        DAST._IExpression _2997_hi = _2996___mcc_h236;
        DAST._IExpression _2998_lo = _2995___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _2999_loString;
          bool _3000___v98;
          bool _3001_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3002_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1698;
          bool _out1699;
          bool _out1700;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1701;
          DCOMP.COMP.GenExpr(_2998_lo, selfIdent, @params, true, out _out1698, out _out1699, out _out1700, out _out1701);
          _2999_loString = _out1698;
          _3000___v98 = _out1699;
          _3001_loErased = _out1700;
          _3002_recIdentsLo = _out1701;
          Dafny.ISequence<Dafny.Rune> _3003_hiString;
          bool _3004___v99;
          bool _3005_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3006_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1702;
          bool _out1703;
          bool _out1704;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1705;
          DCOMP.COMP.GenExpr(_2997_hi, selfIdent, @params, true, out _out1702, out _out1703, out _out1704, out _out1705);
          _3003_hiString = _out1702;
          _3004___v99 = _out1703;
          _3005_hiErased = _out1704;
          _3006_recIdentsHi = _out1705;
          if (!(_3001_loErased)) {
            _2999_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2999_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3005_hiErased)) {
            _3003_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3003_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _2999_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3003_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3002_recIdentsLo, _3006_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3007_i;
      _3007_i = BigInteger.Zero;
      while ((_3007_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3008_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1706;
        _out1706 = DCOMP.COMP.GenModule((p).Select(_3007_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3008_generated = _out1706;
        if ((_3007_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3008_generated);
        _3007_i = (_3007_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3009_i;
      _3009_i = BigInteger.Zero;
      while ((_3009_i) < (new BigInteger((fullName).Count))) {
        if ((_3009_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3009_i));
        _3009_i = (_3009_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

